{
    "filter": {
        "form": {
            "style": {
                "width": "360px",
                "overflow": "hidden",
                "paddingRight": "0px"
            },
            "title": "Фильтр",
            "className": "panel vertical",
            "$": {
                "@fields": {
                    "className": "vertical",
                    "style": {
                        "paddingRight": "8px",
                        "overflowY": "auto"
                    },
                    "$": {
                        "@client": {
                            "className": "vertical",
                            "title": "Клиент",
                            "$": {
                                "nibbd": {
                                    "control": "TextEdit",
                                    "label": "НИББД"
                                },
                                "inn": {
                                    "control": "TextEdit",
                                    "label": "ИНН"
                                },
                                "pinfl": {
                                    "control": "TextEdit",
                                    "label": "ПИНФЛ"
                                },
                                "clientCode": {
                                    "control": "TextEdit",
                                    "label": "Код"
                                },
                                "clientName": {
                                    "control": "TextEdit",
                                    "label": "Наименование"
                                },
                                "clientType": {
                                    "label": "Тип клиента",
                                    "control": "SelectList",
                                    "controlProps": {
                                        "list": [
                                            {
                                                "value": "00",
                                                "name": "Физические лица"
                                            },
                                            {
                                                "value": "10",
                                                "name": "Юр. лица"
                                            },
                                            {
                                                "value": "01",
                                                "name": "ИП"
                                            },
                                            {
                                                "value": "11",
                                                "name": "Юр. лица + ИП"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "@app": {
                            "title": "Заявка",
                            "className": "vertical",
                            "$": {
                                "@period": {
                                    "$": {
                                        "@chips": {
                                            "$": {
                                                "week": {
                                                    "label": "Неделя",
                                                    "action": {
                                                        "name": "setWeek"
                                                    },
                                                    "control": "Chip",
                                                    "controlProps": {
                                                        "style": {
                                                            "height": "24px"
                                                        }
                                                    }
                                                },
                                                "month": {
                                                    "label": "Месяц",
                                                    "action": {
                                                        "name": "setMonth"
                                                    },
                                                    "control": "Chip",
                                                    "controlProps": {
                                                        "style": {
                                                            "height": "24px"
                                                        }
                                                    }
                                                },
                                                "3months": {
                                                    "label": "3 Месяца",
                                                    "action": {
                                                        "name": "set3Months"
                                                    },
                                                    "control": "Chip",
                                                    "controlProps": {
                                                        "style": {
                                                            "height": "24px"
                                                        }
                                                    }
                                                }
                                            },
                                            "className": "horizontal"
                                        },
                                        "@dates": {
                                            "$": {
                                                "fromDate": {
                                                    "label": "С",
                                                    "style": {
                                                        "flexGrow": 1
                                                    },
                                                    "control": "DateEdit"
                                                },
                                                "toDate": {
                                                    "label": "По",
                                                    "style": {
                                                        "flexGrow": 1
                                                    },
                                                    "control": "DateEdit"
                                                }
                                            },
                                            "className": "horizontal"
                                        }
                                    },
                                    "actions": {
                                        "setWeek": {
                                            "jsScript": "let dt = new Date(); let df = new Date(); df.setDate(df.getDate()-7); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                        },
                                        "setMonth": {
                                            "jsScript": "let dt = new Date(); let df = new Date(); df.setMonth(df.getMonth()-1); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                        },
                                        "set3Months": {
                                            "jsScript": "let dt = new Date(); let df = new Date(); df.setMonth(df.getMonth()-3); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                        }
                                    },
                                    "className": "vertical"
                                },
                                "appNo": {
                                    "label": "Юридический номер",
                                    "control": "TextEdit"
                                },
                                "appId": {
                                    "control": "TextEdit",
                                    "label": "Уникальный номер"
                                },
                                "deaNo": {
                                    "control": "TextEdit",
                                    "label": "Номер договора"
                                },
                                "state": {
                                    "label": "Состояние",
                                    "control": "SelectList",
                                    "controlProps": {
                                        "list": [
                                            {
                                                "value": "START",
                                                "name": "Заявка создана"
                                            },
                                            {
                                                "value": "ON_REVIEW",
                                                "name": "На рассмотрении"
                                            },
                                            {
                                                "value": "CREDEA",
                                                "name": "Создан договор"
                                            },
                                            {
                                                "value": "DEA_REGISTERED",
                                                "name": "Договор подписан"
                                            },
                                            {
                                                "value": "REFUSAL_BANK",
                                                "name": "Отказ банка"
                                            },
                                            {
                                                "value": "REFUSAL_CLI",
                                                "name": "Отказ клиента"
                                            },
                                            {
                                                "value": "CANCELED",
                                                "name": "Отменена"
                                            }
                                        ]
                                    }
                                },
                                "purpose": {
                                    "label": "Цель кредитования",
                                    "control": "ModuleComponent",
                                    "controlProps": {
                                        "componentPath": "/aoa/ObjectReference",
                                        "object": "purposeOfLoan"
                                    },
                                    "controlOpts": {
                                        "valueField": "code"
                                    }
                                },
                                "vidcred": {
                                    "label": "Вид кредитования",
                                    "control": "ModuleComponent",
                                    "controlProps": {
                                        "componentPath": "/aoa/ObjectReference",
                                        "object": "vidCred"
                                    },
                                    "controlOpts": {
                                        "valueField": "code"
                                    }
                                },
                                "stage": {
                                    "control": "SelectList",
                                    "label": "Стадия рассмотрения",
                                    "controlProps": {
                                        "list": [
                                            {
                                                "value": "START",
                                                "name": "Начало рассмотрения"
                                            },
                                            {
                                                "value": "CHECK",
                                                "name": "Контроль ввода"
                                            },
                                            {
                                                "value": "REGNEW",
                                                "name": "Регистрация заявки"
                                            },
                                            {
                                                "value": "STOPFACTORS1",
                                                "name": "Стоп факторы 1"
                                            },
                                            {
                                                "value": "STOPFACTORS2",
                                                "name": "Стоп факторы 2"
                                            },
                                            {
                                                "value": "STOPFACTORS3",
                                                "name": "Стоп факторы 3"
                                            },
                                            {
                                                "value": "SCORING",
                                                "name": "Скоринг"
                                            },
                                            {
                                                "value": "PREANALYSE",
                                                "name": "Подготовка к анализу"
                                            },
                                            {
                                                "value": "STOPFACTORS",
                                                "name": "Стоп факторы"
                                            },
                                            {
                                                "value": "CONCLUSIONS",
                                                "name": "Получение заключений"
                                            },
                                            {
                                                "value": "DECISIONS",
                                                "name": "Принятие решения"
                                            },
                                            {
                                                "value": "FIN",
                                                "name": "Завершение"
                                            },
                                            {
                                                "value": "COMPLETED",
                                                "name": "Завершено"
                                            },
                                            {
                                                "value": "CANCELED",
                                                "name": "Отменено"
                                            }
                                        ]
                                    }
                                },
                                "department": {
                                    "label": "Подразделение",
                                    "control": "ModuleComponent",
                                    "controlProps": {
                                        "componentPath": "/aoa/ObjectReference",
                                        "object": "department"
                                    },
                                    "controlOpts": {
                                        "valueField": "code"
                                    }
                                },
                                "product": {
                                    "label": "Продукт",
                                    "control": "ModuleComponent",
                                    "controlProps": {
                                        "componentPath": "/aoa/ObjectReference",
                                        "object": "product"
                                    },
                                    "controlOpts": {
                                        "valueField": "code",
                                        "referenceParams": {
                                            "filterParent$": "context.productsRootFolder || backend.post('/aoa/execObjectMethod', {object: 'settings', method: 'get'}, {useCache: true, silent: true}).then(r=>{context.productsRootFolder = r?.loanapp?.productsRootFolder; forceUpdate();}) && undefined"
                                        }
                                    }
                                },
                                "|product_list": {
                                    "className": "vertical",
                                    "$": {
                                        ".ap": {
                                            "control": "ActionPanel",
                                            "params": {
                                                "app$": "params.app"
                                            },
                                            "controlOpts": {
                                                "actions": [
                                                    {
                                                        "title": "Добавить",
                                                        "icon": "add",
                                                        "mini": true,
                                                        "action": {
                                                            "js": "context.selectedProduct = null; frontend.dialog({object: 'product', form: 'productSelectDialog', mem: {}, params: {filterParent: context.productsRootFolder} });"
                                                        }
                                                    },
                                                    {
                                                        "title": "Удалить",
                                                        "icon": "delete",
                                                        "mini": true,
                                                        "action": {
                                                            "name": "deleteProduct",
                                                            "confirm": {
                                                                "title": "Удаление",
                                                                "message$": "`Удалить продукт`",
                                                                "yes": "Да",
                                                                "no": "Нет"
                                                            }
                                                        },
                                                        "disabled$": "!context.selectedProduct"
                                                    }
                                                ]
                                            }
                                        },
                                        ".list": {
                                            "control": "ListTable",
                                            "controlOpts": {
                                                "$": {
                                                    "product": {
                                                        "label": "Список продуктов",
                                                        "width": 250
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "actions": {
                                        "clean": {
                                            "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                                        },
                                        "closeDialog": {
                                            "js": "dialog.actions.close();"
                                        },
                                        "applyDialog": [
                                            {
                                                "js": "if (!dialog.actions.validate()) return; if (mem.indexOf(context.selectedProduct)>=0) {mem.splice(mem.indexOf(context.selectedProduct), 1, dialog.mem)} else mem.push(dialog.mem); dialog.actions.close(); forceUpdate();"
                                            },
                                            {
                                                "name": "onProductChange"
                                            }
                                        ],
                                        "onSelectionChanged": {
                                            "js": "context.selectedProduct = selectedRow;"
                                        },
                                        "deleteProduct": [
                                            {
                                                "jsScript": "mem.splice(mem.indexOf(context.selectedProduct), 1); context.selectedProduct = null; forceUpdate()"
                                            },
                                            {
                                                "name": "onProductsChange"
                                            }
                                        ]
                                    }
                                },
                                "userName": {
                                    "control": "TextEdit",
                                    "label": "Исполнитель"
                                }
                            }
                        },
                        "@loan": {
                            "className": "vertical",
                            "title": "Параметры кредитования",
                            "$": {
                                "@amount": {
                                    "className": "horizontal",
                                    "$": {
                                        "minAmount": {
                                            "control": "CurrencyField",
                                            "label": "Сумма от"
                                        },
                                        "maxAmount": {
                                            "control": "CurrencyField",
                                            "label": "До"
                                        }
                                    }
                                },
                                "currency": {
                                    "control": "SelectList",
                                    "label": "Валюта",
                                    "controlProps": {
                                        "list": [
                                            {
                                                "name": "UZS",
                                                "value": "UZS"
                                            },
                                            {
                                                "name": "USD",
                                                "value": "USD"
                                            },
                                            {
                                                "name": "EUR",
                                                "value": "EUR"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "$": {
                        "btnClear": {
                            "control": "Button",
                            "label": "Очистить",
                            "controlProps": {
                                "variant": "outlined",
                                "color": "primary"
                            },
                            "action": {
                                "name": "clean"
                            }
                        },
                        "btnApply": {
                            "control": "Button",
                            "label": "Применить",
                            "controlProps": {
                                "variant": "contained",
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.apply(mem);",
                                "params": {
                                    "disableUpdate": true
                                }
                            }
                        }
                    }
                }
            },
            "actions": {
                "clean": {
                    "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                }
            }
        },
        "query": {
            "fromDate": {
                "sql": "\"dord\" >= to_date(:fromDate, 'yyyy-mm-dd')"
            },
            "toDate": {
                "sql": "\"dord\" <= to_date(:toDate, 'yyyy-mm-dd')"
            },
            "appNo": {
                "sql": "\"appNo\" like '%%'||:appNo"
            },
            "appId": {
                "sql": "\"appId\" like '%%'||:appId"
            },
            "deaNo": {
                "sql": "json_value(json, '$.dea.code') = :deaNo and \"dord\" >= p_operday - 90"
            },
            "state": {
                "sql": "\"state\" = :state"
            },
            "purpose": {
                "sql": "purpose = :purpose"
            },
            "vidcred": {
                "sql": "vidcred = :vidcred"
            },
            "stage": {
                "sql": "\"stage\" = :stage"
            },
            "department": {
                "sql": "\"depCode\" = any(select code from c_dep_std start with code=:department connect by id_hi=prior id)"
            },
            "product": {
                "sql": "\"product_code\" = any(select code from t_deacls_std start with code=:product connect by id_hi=prior id)"
            },
            "product_list": {
                "sql": "\"product_code\" = any(select code from t_deacls_std start with code in (select * from json_table(:product_list , '$.*' COLUMNS(product path '$'))) connect by id_hi=prior id)"
            },
            "userName": {
                "sql": "\"created_user\" = :userName"
            },
            "nibbd": {
                "sql": "\"cli_code\" = any(select g.code from g_cli g, g_cliidn cli, G_IDNDSC_STD i where cli.idn_id = i.id and i.cliidntyp ='BD' and P_MAXDATE between cli.fromdate and cli.todate and cli.dep_id=g.dep_id and cli.id=g.id and cli.idn_num=:nibbd)"
            },
            "inn": {
                "sql": "cli_taxcode=:inn"
            },
            "pinfl": {
                "sql": "\"cli_code\" = any(select g.code from g_cli g, g_cliidn cli where cli.idn_id = G_pkgIdn.fId('IDN_PRS_UZ') and P_MAXDATE between cli.fromdate and cli.todate and cli.dep_id=g.dep_id and cli.id=g.id and cli.idn_num=:pinfl)"
            },
            "clientCode": {
                "sql": "\"cli_code\" = :clientCode"
            },
            "clientName": {
                "sql": "\"cli_name\" like '%%'||:clientName||'%%'"
            },
            "minAmount": {
                "sql": "\"application_amount\" >= :minAmount"
            },
            "maxAmount": {
                "sql": "\"application_amount\" <= :maxAmount"
            },
            "currency": {
                "sql": "\"currency_code\" = :currency"
            },
            "clientType": {
                "sql": "\"cli_code\" = any(select g.code from g_cli g, g_clihst gh where g.dep_id = gh.dep_id and g.id = gh.id and P_OPERDAY between gh.fromdate and gh.todate and (case when :clientType = '00' and g.JURFL = '0' and g.PBOYULFL = '0' then 1 when :clientType = '10' and g.JURFL = '1' then 1 when :clientType = '01' and g.jurfl = '0' and g.pboyulfl = '1' then 1 when :clientType = '11' and (g.JURFL = '1' or g.jurfl='0' and g.pboyulfl='1') then 1 else 0 end) = 1)"
            }
        }
    },
    "actions": [
        {
            "name": "Отказ клиента",
            "command": {
                "call": "APP_DECLINE_CLIENT",
                "type": "workflow",
                "params": {
                    "objectKey$": "`loanapp:${app.dep_id},${app.id}`"
                }
            },
            "visible": "['CREDEA'].includes(app.state)"
        },
        {
            "name": "Отмена рассмотрения",
            "command": {
                "call": "APP_CANCEL_REVIEW",
                "type": "workflow",
                "params": {
                    "objectKey$": "`loanapp:${app.dep_id},${app.id}`"
                }
            },
            "visible": "['START', 'ON_REVIEW', 'CREDEA'].includes(app.state) && user.groups.includes('GO_ADMINS') "
        },
        {
            "name": "НИКИ. Регистрация отказа",
            "command": {
                "call": "NIKI_REJECT",
                "type": "workflow",
                "params": {
                    "objectKey$": "`loanapp:${app.dep_id},${app.id}`"
                }
            },
            "visible": "user.superuser && user.groups.includes('LOAN_ADMINS')"
        },
        {
            "name": "По решению правительства",
            "command": {
                "type": "workflow",
                "call": "APP_SET_GOVERNMENT",
                "params": {
                    "objectKey$": "`loanapp:${app.dep_id},${app.id}`"
                }
            },
            "visible": "['START'].includes(app.state) && user.groups.includes('LOAN_ADMINS')"
        },
        {
            "name": "Изменить инициатора",
            "command": {
                "type": "task",
                "call": "/aoa/ObjectTask",
                "params": {
                    "object": "loanapp",
                    "form": "changeInitiator",
                    "mem$": "{user: app.created_user, appId: app.appId}",
                    "title$": "`Изменение исполнителя по заявке ${app.appNo}, ${app.cli_name}`"
                }
            },
            "visible": "user.superuser || user.groups.includes('LOAN_ADMINS')"
        },
        {
            "name": "Новый id заявки",
            "command": {
                "call": "APP_RENEW_ID",
                "type": "workflow",
                "params": {
                    "objectKey$": "`loanapp:${app.dep_id},${app.id}`"
                }
            },
            "visible": "user.superuser"
        },
        {
            "name": "Запросы",
            "command": {
                "type": "task",
                "call": "/aoa/ObjectListTask",
                "title$": "`Запросы по заявке ${app.appNo}`",
                "params": {
                    "object": "ext.request",
                    "listParams": {
                        "app": {
                            "dep_id$": "$listRow.dep_id",
                            "id$": "$listRow.id"
                        }
                    }
                }
            },
            "disabled": "!$listRow"
        },
        {
            "name": "Запросы (старая)",
            "command": {
                "type": "task",
                "call": "/loanapp/application-request-list",
                "params": {
                    "title$": "`Коррекция заявки ${app.appNo}`"
                },
                "data": {
                    "application": {
                        "dep_id$": "app.dep_id",
                        "id$": "app.id"
                    }
                }
            },
            "disabled": "!$listRow"
        },
        {
            "name": "Служебная информация",
            "command": {
                "type": "js",
                "js": "frontend.displayInfo(JSON.stringify($listRow, null, 4));"
            },
            "disabled": "!$listRow"
        },
        {
            "name": "Технические",
            "split": true,
            "actions": [
                {
                    "name": "Повторное рассмотрение",
                    "command": {
                        "type": "js",
                        "js": "return backend.post('/aoa/execObjectMethod', {object: 'loanapp', method: 'repeatReview', params: {dep_id: app.dep_id, id: app.id}})"
                    }
                },
                {
                    "name": "Удалить процессы",
                    "command": {
                        "type": "js",
                        "js": "return backend.post('/aoa/execObjectMethod', {object: 'loanapp', method: 'cleanReview', params: {dep_id: app.dep_id, id: app.id}})"
                    },
                    "visible": "user.code == 'SMM'"
                },
                {
                    "name": "Корректировать заявку",
                    "command": {
                        "type": "task",
                        "call": "/loanapp/edit-json",
                        "data": {
                            "application": {
                                "dep_id$": "app.dep_id",
                                "id$": "app.id"
                            }
                        },
                        "params": {
                            "title$": "`Коррекция заявки ${app.appNo}`"
                        }
                    }
                },
                {
                    "name": "Регистрация в АСОКИ (тест связанных лиц)",
                    "command": {
                        "call": "ASOKI_REGISTER_APP",
                        "type": "workflow",
                        "params": {
                            "objectKey$": "`loanapp:${app.dep_id},${app.id}`"
                        }
                    },
                    "visible": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                },
                {
                    "name": "Запрос отчетов АСОКИ (тест связанных лиц)",
                    "command": {
                        "call": "APP_CREDIT_REPORT",
                        "type": "workflow",
                        "params": {
                            "objectKey$": "`loanapp:${app.dep_id},${app.id}`"
                        }
                    },
                    "visible": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                }
            ],
            "visible": "user.superuser && user.groups.includes('LOAN_ADMINS')"
        },
        {
            "name": "Повторная регистрация",
            "split": true,
            "actions": [
                {
                    "name": "Регистрация в ГРКИ оффлайн",
                    "command": {
                        "call": "NIKI_REGISTER",
                        "type": "workflow",
                        "params": {
                            "objectKey$": "`loanapp:${app.dep_id},${app.id}`",
                            "updateClient": false,
                            "localReview": false
                        }
                    },
                    "visible": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                },
                {
                    "name": "Регистрация в ГРКИ онлайн",
                    "command": {
                        "call": "NIKI_REGISTER_ONLINE",
                        "type": "workflow",
                        "params": {
                            "objectKey$": "`loanapp:${app.dep_id},${app.id}`",
                            "updateClient": false,
                            "localReview": false
                        }
                    },
                    "visible": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                },
                {
                    "name": "Регистрация в АСОКИ",
                    "command": {
                        "call": "KATM_REGISTER",
                        "type": "workflow",
                        "params": {
                            "objectKey$": "`loanapp:${app.dep_id},${app.id}`",
                            "updateClient": false,
                            "localReview": false
                        }
                    },
                    "visible": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                },
                {
                    "name": "Изменение атрибутов заявки",
                    "command": {
                        "type": "workflow",
                        "call": "APP_CHANGE_ATTR",
                        "params": {
                            "objectKey$": "`loanapp:${app.dep_id},${app.id}`"
                        }
                    },
                    "visible": "['ON_REVIEW', 'CREDEA'].includes(app.state) && (user.superuser || user.groups.includes('LOAN_ADMINS'))"
                }
            ],
            "visible": "user.superuser || user.groups.includes('LOAN_ADMINS')"
        }
    ],
    "forms": {
        "changeInitiator": {
            "className": "vertical task task-panel panel",
            "$": {
                "@currentUser": {
                    "title": "Текущий исполнитель",
                    "className": "vertical",
                    "$": {
                        "@user": {
                            "className": "horizontal",
                            "$": {
                                "user": {
                                    "label": "Исполнитель",
                                    "style": {
                                        "width": "260px"
                                    },
                                    "control": "TextEdit"
                                },
                                "userName": {
                                    "label": "",
                                    "style": {
                                        "width": "400px"
                                    },
                                    "control": "TextEdit"
                                }
                            }
                        }
                    },
                    "readOnly": false
                },
                "@newUser": {
                    "title": "Новый исполнитель",
                    "className": "vertical",
                    "$": {
                        "@user": {
                            "className": "horizontal",
                            "$": {
                                "newUser": {
                                    "style": {
                                        "width": "260px"
                                    },
                                    "init$": "''",
                                    "$": {
                                        "@control": {
                                            "object": "bank_user",
                                            "form": "selectUserControl",
                                            "params": {
                                                "label": "Исполнитель"
                                            }
                                        }
                                    }
                                },
                                "newUserName": {
                                    "label": "",
                                    "style": {
                                        "width": "400px"
                                    },
                                    "control": "TextEdit",
                                    "readOnly": true
                                }
                            },
                            "actions": {
                                "onUserSelected": [
                                    {
                                        "js": "mem.newUser=params.user.code; mem.newUserName=params.user.name; cleanErrors(validator.$.newUser);"
                                    },
                                    {
                                        "name": "onChangeNewUser"
                                    }
                                ],
                                "onHandChange": [
                                    {
                                        "js": "return backend.post('/aoa/execObjectMethod', {object: 'bank_user', method: 'get', params: {code: params.userCode}}, {silent: true}).then(r=>{mem.newUserName=r?.name; if(r){mem.newUser=r.code;}else{mem.newUserName=null; setError(validator.$.newUser);} forceUpdate();})"
                                    }
                                ]
                            }
                        },
                        "btnChange": {
                            "label": "Изменить",
                            "control": "Button",
                            "controlProps": {
                                "variant": "contained",
                                "color": "primary"
                            },
                            "readOnly$": "!mem.newUser",
                            "action": {
                                "jsScript": "frontend.easyflow.startProcessByCode('APP_CHANGE_INITIATOR', {objectKey: mem.objectKey, appId: mem.appId, oldInitiator: mem.user, initiator: mem.newUser}, ()=>frontend.closeTask())"
                            }
                        }
                    },
                    "actions": {
                        "onChangeNewUser": {
                            "jsScript": ";"
                        }
                    }
                }
            }
        },
        "lookupMyIdDialog": {
            "title": "Идентификация клиента My Id",
            "style": {
                "width": "1000px",
                "height": "800px",
                "overflow": "hidden"
            },
            "className": "vertical",
            "$": {
                "@form": {
                    "className": "vertical myIdData",
                    "style": {
                        "flexGrow": 1,
                        "overflowY": "auto"
                    },
                    "$": {
                        "@request": {
                            "object": "myId",
                            "form": "requestForm"
                        },
                        "@job": {
                            "object": "myId",
                            "form": "jobForm",
                            "visible$": "!!mem.jobId"
                        },
                        "@client": {
                            "title": "Карточка клиента",
                            "className": "vertical",
                            "$": {
                                "client": {
                                    "$": {
                                        "@clientCard": {
                                            "form": "clientCardInfoForm",
                                            "visible$": "!!mem.code",
                                            "readOnly": true
                                        },
                                        "@notFound": {
                                            "className": "vertical",
                                            "$": {
                                                ".text": {
                                                    "control": "Text",
                                                    "getter": "'Карточка клиента не найдена'"
                                                }
                                            },
                                            "visible$": "!mem.code"
                                        }
                                    }
                                }
                            },
                            "visible$": "!!mem.jobResult?.response_id"
                        }
                    },
                    "actions": {
                        "onRequestSent": [
                            {
                                "js": "if (!!mem.jobResult?.response_id && mem.jobResult?.result_code==1){return backend.post('/aoa/execObjectMethod', {object: 'loanapp', method: 'identifyClient', params: {forceFiz: true, pinfl: mem.jobResult?.profile?.common_data?.pinfl}}).then((r)=>{mem.client = r; forceUpdate();})}else{mem.client={};}"
                            },
                            {
                                "js": "setTimeout(()=>{let e = document.getElementsByClassName('myIdData')[0]; e.scrollTo(0, e.scrollHeight);}, 100);"
                            },
                            {
                                "name": "refresh"
                            }
                        ],
                        "onPhotoChanged": {
                            "js": "mem.client=null; mem.jobId=null; mem.jobResult=null;"
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "flexFlow": "row-reverse"
                    },
                    "$": {
                        ".btnClose": {
                            "label": "Закрыть",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close();",
                                "params": {
                                    "disableUpdate": true
                                }
                            }
                        },
                        ".btnSelect": {
                            "label": "Выбрать",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "contained"
                            },
                            "action": [
                                {
                                    "name": "onSelectClient",
                                    "params": {
                                        "client$": "mem.client",
                                        "myId": {
                                            "photo$": "mem.request.photoFromCamera.front"
                                        }
                                    }
                                },
                                {
                                    "js": "actions.close();",
                                    "params": {
                                        "disableUpdate": true
                                    }
                                }
                            ],
                            "readOnly$": "!mem.client?.code"
                        }
                    }
                }
            },
            "actions": {
                "refresh": {
                    "js": ";"
                }
            }
        },
        "clientCardInfoForm": {
            "title": "Краткая информация о клиенте",
            "className": "vertical",
            "$": {
                "@s1": {
                    "className": "horizontal",
                    "$": {
                        "@g1": {
                            "className": "horizontal",
                            "style": {
                                "width": "50%"
                            },
                            "$": {
                                "code": {
                                    "label": "Код",
                                    "control": "TextEdit",
                                    "style": {
                                        "width": "180px"
                                    }
                                },
                                "name": {
                                    "label": "Наименование",
                                    "control": "TextEdit",
                                    "style": {
                                        "flexGrow": 1
                                    }
                                }
                            }
                        },
                        "@g2": {
                            "style": {
                                "width": "50%"
                            }
                        }
                    }
                },
                "@fiz": {
                    "className": "vertical",
                    "$": {
                        "@g1": {
                            "className": "horizontal",
                            "$": {
                                ".fio": {
                                    "style": {
                                        "width": "50%"
                                    },
                                    "label": "ФИО",
                                    "control": "TextEdit",
                                    "getter": "[mem.lastname, mem.firstname, mem.secondname].join(' ')"
                                },
                                ".fioLat": {
                                    "style": {
                                        "width": "50%"
                                    },
                                    "label": "ФИО на латинице",
                                    "control": "TextEdit",
                                    "getter": "[mem.lastnameLat, mem.firstnameLat, mem.secondnameLat].join(' ')"
                                }
                            }
                        },
                        "@g2": {
                            "className": "horizontal",
                            "$": {
                                "pinfl": {
                                    "style": {
                                        "width": "50%"
                                    },
                                    "label": "ПИНФЛ",
                                    "control": "TextEdit"
                                },
                                "inn": {
                                    "style": {
                                        "width": "50%"
                                    },
                                    "label": "ИНН",
                                    "control": "TextEdit"
                                }
                            }
                        }
                    }
                }
            },
            "readOnly": true
        },
        "appIdentifyClientForm": {
            "title": "Идентификация клиента",
            "className": "horizontal",
            "style": {},
            "$": {
                "@pin": {
                    "className": "vertical",
                    "style": {
                        "flex": 1,
                        "xwidth": "50%",
                        "xpadding": "8px"
                    },
                    "$": {
                        "pinfl": {
                            "label": "ПИНФЛ",
                            "control": "TextEdit",
                            "controlProps": {
                                "inputProps": {
                                    "maxLength": 14
                                },
                                "onKeyPress$": "(e) => {if (!/[0-9]/.test(String.fromCharCode(e.keyCode || e.which))) e.preventDefault();}"
                            },
                            "actions": {
                                "onChange": [
                                    {
                                        "js": "mem.nibbd='';"
                                    },
                                    {
                                        "name": "forceUpdate"
                                    }
                                ]
                            }
                        },
                        "nibbd": {
                            "label": "НИББД",
                            "control": "TextEdit",
                            "controlProps": {
                                "inputProps": {
                                    "maxLength": 8
                                },
                                "onKeyPress$": "(e) => {if (!/[0-9]/.test(String.fromCharCode(e.keyCode || e.which))) e.preventDefault();}"
                            },
                            "actions": {
                                "onChange": [
                                    {
                                        "js": "mem.pinfl='';"
                                    },
                                    {
                                        "name": "forceUpdate"
                                    }
                                ]
                            }
                        }
                    },
                    "readOnly$": "isReadOnly || !params.isNew || !(context.identifyPin || user.superuser || 'LOAN_ADMINS' in user.groups)"
                },
                "@buttons": {
                    "className": "vertical",
                    "style": {
                        "flex": 1,
                        "flexFlow": "column-reverse"
                    },
                    "$": {
                        "@new": {
                            "className": "horizontal",
                            "$": {
                                ".btnIdentifyPinfl": {
                                    "label": "Идентифицировать",
                                    "control": "Button",
                                    "controlProps": {
                                        "color": "primary",
                                        "style": {
                                            "textTransform": "none"
                                        }
                                    },
                                    "action": {
                                        "name": "onIdentifyClient",
                                        "params": {
                                            "pinfl$": "mem.pinfl",
                                            "nibbd$": "mem.nibbd"
                                        }
                                    },
                                    "readOnly$": "!(!!mem.pinfl || !!mem.nibbd)",
                                    "visible$": "!!context.identifyPin || user.superuser || 'LOAN_ADMINS' in user.groups"
                                },
                                ".btnIdentifyMyId": {
                                    "label": "MyId",
                                    "control": "Button",
                                    "controlProps": {
                                        "color": "primary",
                                        "style": {
                                            "textTransform": "none"
                                        }
                                    },
                                    "action": {
                                        "js": "frontend.dialog({object: 'loanapp', form: 'lookupMyIdDialog', mem: {}, params: {enableLoadImage: user.superuser}});"
                                    },
                                    "visible$": "!!context.myIdVisible"
                                }
                            },
                            "visible$": "!!params.isNew"
                        },
                        "@exists": {
                            "className": "horizontal",
                            "$": {
                                ".btnRenew": {
                                    "label": "Обновить",
                                    "control": "Button",
                                    "controlProps": {
                                        "color": "primary",
                                        "style": {
                                            "textTransform": "none"
                                        }
                                    },
                                    "readOnly$": "!mem.code || !!params.readOnly",
                                    "action": {
                                        "name": "onRenewClient"
                                    }
                                }
                            },
                            "visible$": "!params.isNew && !params.disableRenew"
                        }
                    }
                }
            },
            "actions": {
                "forceUpdate": {
                    "js": ";"
                },
                "onElementCreated": {
                    "name": "onFormCreated"
                },
                "onFormCreated": {
                    "js": "backend.post('/aoa/execObjectMethod', {object: 'settings', method: 'get'}, {useCache: true, silent: true}).then(r=>{context.myIdVisible = r?.loanapp?.identifyMyId; context.identifyPin = r?.loanapp?.identifyPin; forceUpdate();})"
                },
                "onSelectClient": [
                    {
                        "name": "onIdentifyClient",
                        "params": {
                            "pinfl$": "params.client.pinfl"
                        }
                    }
                ]
            }
        },
        "changeAttr": {
            "className": "vertical task task-panel panel",
            "$": {
                "@actions": {
                    "style": {
                        "margin": "16px 0px 16px 0px"
                    },
                    "$": {
                        ".ap": {
                            "control": "ActionPanel",
                            "controlOpts": {
                                "actions": [
                                    {
                                        "title": "Сохранить",
                                        "icon": "save",
                                        "mini": false,
                                        "action": {
                                            "js": "frontend.easyflow.completeTaskById(task.params.taskId, {newAttr: { legalAct: mem.newLegalAct, legalActName: mem.newLegalActName , purposeOfLoan: mem.newPurposeOfLoan, purposeOfLoanName: mem.newPurposeOfLoanName,  typeOfLending: mem.newTypeOfLending , typeOfLendingName: mem.newTypeOfLendingName } }, ()=>{frontend.closeTask()});"
                                        },
                                        "disabled$": " !context.modified"
                                    }
                                ]
                            }
                        }
                    }
                },
                ".error": {
                    "control": "Text",
                    "style": {
                        "color": "red"
                    },
                    "getter": "mem.errorTxt"
                },
                "@npa": {
                    "title": "Нормативно правовой акт",
                    "className": "vertical",
                    "$": {
                        "@currentNPA": {
                            "className": "horizontal",
                            "$": {
                                "legalAct": {
                                    "label": "Текущий",
                                    "style": {
                                        "width": "260px"
                                    },
                                    "control": "TextEdit"
                                },
                                "legalActName": {
                                    "label": "",
                                    "style": {
                                        "width": "600px"
                                    },
                                    "control": "TextEdit"
                                }
                            },
                            "readOnly": true
                        },
                        "@newNPA": {
                            "title": "",
                            "className": "horizontal",
                            "$": {
                                "newLegalAct": {
                                    "label": "Новый",
                                    "style": {
                                        "width": "260px"
                                    },
                                    "control": "ModuleComponent",
                                    "controlProps": {
                                        "componentPath": "/aoa/ObjectReference",
                                        "object": "legalAct"
                                    },
                                    "controlOpts": {
                                        "valueField": "code",
                                        "postfixFields": {
                                            "Name": "name"
                                        }
                                    },
                                    "actions": {
                                        "onChange": {
                                            "name": "onModified"
                                        }
                                    }
                                },
                                "newLegalActName": {
                                    "label": "",
                                    "style": {
                                        "width": "600px"
                                    },
                                    "control": "TextEdit",
                                    "readOnly": true
                                }
                            }
                        }
                    }
                },
                "@purpose": {
                    "title": "Цель кредита",
                    "className": "vertical",
                    "$": {
                        "@currentPurpose": {
                            "className": "horizontal",
                            "$": {
                                "purposeOfLoan": {
                                    "label": "Текущая",
                                    "style": {
                                        "width": "260px"
                                    },
                                    "control": "TextEdit"
                                },
                                "purposeOfLoanName": {
                                    "label": "",
                                    "style": {
                                        "width": "600px"
                                    },
                                    "control": "TextEdit"
                                }
                            },
                            "readOnly": true
                        },
                        "@newPurpose": {
                            "className": "horizontal",
                            "$": {
                                "newPurposeOfLoan": {
                                    "label": "Новая",
                                    "style": {
                                        "width": "260px"
                                    },
                                    "control": "ModuleComponent",
                                    "controlProps": {
                                        "componentPath": "/aoa/ObjectReference",
                                        "object": "purposeOfLoan"
                                    },
                                    "controlOpts": {
                                        "valueField": "code",
                                        "postfixFields": {
                                            "Name": "name"
                                        },
                                        "referenceParams": {
                                            "productCode$": "mem.productCode"
                                        }
                                    },
                                    "actions": {
                                        "onChange": {
                                            "name": "onModified"
                                        }
                                    }
                                },
                                "newPurposeOfLoanName": {
                                    "label": "",
                                    "style": {
                                        "width": "600px"
                                    },
                                    "control": "TextEdit",
                                    "readOnly": true
                                }
                            }
                        }
                    }
                },
                "@vidCred": {
                    "title": " Вид кредитования",
                    "className": "vertical",
                    "$": {
                        "@currentVidCred": {
                            "className": "horizontal",
                            "$": {
                                "typeOfLending": {
                                    "label": "Текущий",
                                    "style": {
                                        "width": "260px"
                                    },
                                    "control": "TextEdit"
                                },
                                "typeOfLendingName": {
                                    "style": {
                                        "width": "600px"
                                    },
                                    "control": "TextEdit"
                                }
                            },
                            "readOnly": true
                        },
                        "@newVidCred": {
                            "className": "horizontal",
                            "$": {
                                "newTypeOfLending": {
                                    "label": "Новый",
                                    "style": {
                                        "width": "260px"
                                    },
                                    "control": "ModuleComponent",
                                    "controlProps": {
                                        "componentPath": "/aoa/ObjectReference",
                                        "object": "vidCred"
                                    },
                                    "controlOpts": {
                                        "valueField": "code",
                                        "postfixFields": {
                                            "Name": "name"
                                        }
                                    },
                                    "actions": {
                                        "onChange": {
                                            "name": "onModified"
                                        }
                                    }
                                },
                                "newTypeOfLendingName": {
                                    "style": {
                                        "width": "600px"
                                    },
                                    "control": "TextEdit",
                                    "readOnly": true
                                }
                            }
                        }
                    }
                }
            },
            "actions": {
                "onModified": [
                    {
                        "js": "context.modified = true;"
                    },
                    {
                        "js": ";"
                    }
                ]
            }
        },
        "newAppFizTask": {
            "title": "Кредитные продукты физлиц",
            "className": "task task-panel vertical panel",
            "style": {
                "overflow": "hidden",
                "marginBottom": "8px",
                "height": "100%"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "flexGrow": 1,
                        "overflow": "auto"
                    },
                    "$": {
                        "@parameters": {
                            "title": "Параметры кредита",
                            "className": "vertical",
                            "$": {
                                "purposeOfLoan": {
                                    "label": "Цель кредита",
                                    "style": {
                                        "width": "800px"
                                    },
                                    "control": "ObjectReference",
                                    "controlProps": {
                                        "object": "purposeOfLoan",
                                        "reference": "default"
                                    },
                                    "controlOpts": {
                                        "valueField": "name",
                                        "referenceParams": {
                                            "isJur": "0"
                                        },
                                        "postfixFields": {
                                            "Code": "code"
                                        }
                                    }
                                },
                                "@amount": {
                                    "className": "horizontal",
                                    "$": {
                                        "amount": {
                                            "label": "Сумма кредита",
                                            "style": {
                                                "width": "300px"
                                            },
                                            "control": "CurrencyField"
                                        },
                                        "currency": {
                                            "label": "Валюта",
                                            "style": {
                                                "width": "300px"
                                            },
                                            "control": "ObjectReference",
                                            "controlProps": {
                                                "object": "bank_currency",
                                                "reference": "default"
                                            },
                                            "controlOpts": {
                                                "referenceParams": {
                                                    "isLoan": 1
                                                }
                                            }
                                        }
                                    }
                                },
                                "@g": {
                                    "className": "horizontal",
                                    "$": {
                                        "duration": {
                                            "label": "Срок кредита",
                                            "style": {
                                                "width": "300px"
                                            },
                                            "control": "PositiveIntegerField"
                                        },
                                        "durationUnit": {
                                            "style": {
                                                "width": "300px"
                                            },
                                            "control": "SelectList",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "value": "D",
                                                        "name": "День"
                                                    },
                                                    {
                                                        "value": "M",
                                                        "name": "Месяц"
                                                    },
                                                    {
                                                        "value": "Y",
                                                        "name": "Год"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        ".btnLookupProducts": {
                            "label": "Подобрать варианты",
                            "control": "Button",
                            "controlProps": {
                                "variant": "text",
                                "color": "primary"
                            },
                            "action": {
                                "name": "lookupProduct"
                            }
                        },
                        "@lookupProductList": {
                            "object": "app",
                            "form": "lookupProductListForm",
                            "visible$": "!!mem.products"
                        }
                    },
                    "actions": {
                        "lookupProduct": [
                            {
                                "js": "return backend.post('/aoa/execObjectMethod', {object: 'loanapp', method: 'lookupProductsFiz', params: {purposeOfLoan: mem.purposeOfLoanCode, amount: mem.amount, currency: mem.currency, duration: mem.duration, durationUnit: mem.durationUnit}}).then(r=>{mem.products = r;});"
                            },
                            {
                                "name": "refreshTask"
                            }
                        ]
                    }
                },
                "@buttons": {
                    "style": {
                        "borderTop": "1px solid rgba(0,0,0,0.20)"
                    },
                    "$": {
                        ".btnCreateApplication": {
                            "label": "Оформить заявку",
                            "control": "Button",
                            "controlProps": {
                                "variant": "contained",
                                "color": "primary"
                            },
                            "readOnly$": "!context.selectedProduct",
                            "action": [
                                {
                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'app', method: 'prepareNewApplication', params: {appType: 'loanfiz', product: context.selectedProduct}}).then(r=>{context.app = r;})",
                                    "disableUpdate": true
                                },
                                {
                                    "js": "true && tm.newTask({title: 'Заявка', path: '/aoa/ObjectTask', params: {object: 'app', form: 'appEditTask',app: {...context.app}}})",
                                    "disableUpdate": true
                                },
                                {
                                    "js": "false && tm.newTask({title: 'Заявка на кредит <новая>', path: '/aoa/ObjectTask', data: {forms: {...context.app}, params: {componentPath: context.app.baseComponent}}, params: {componentPath: context.app.baseComponent, btnSaveTitle: 'Продолжить'}})",
                                    "disableUpdate": true
                                }
                            ]
                        }
                    }
                }
            },
            "actions": {
                "refreshTask": {
                    "js": ";"
                }
            }
        },
        "clientIncomePaymentsDialog": {
            "title$": "`Доходы клиента ${mem.client.name}`",
            "className": "vertical",
            "style": {
                "width": "1200px",
                "height": "600px",
                "overflow": "hidden"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "flex": 1,
                        "overflow": "hidden",
                        "marginTop": "4px",
                        "paddingTop": "4px"
                    },
                    "$": {
                        "@payments": {
                            "style": {
                                "flex": 1,
                                "overflow": "auto"
                            },
                            "$": {
                                "|salaries": {
                                    "$": {
                                        "@salary": {
                                            "object": "ext.request.gnk",
                                            "form": "salaryForm"
                                        }
                                    }
                                },
                                "@company-info": {
                                    "visible": "!!mem.company-info",
                                    "title": "Компании",
                                    "$": {
                                        "|company_info": {
                                            "$": {
                                                "@form": {
                                                    "object": "ext.request.defen",
                                                    "form": "companyInfoForm"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "flexFlow": "row-reverse"
                    },
                    "$": {
                        ".btnClose": {
                            "label": "Закрыть",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close();",
                                "params": {
                                    "disableUpdate": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "loanInfoForm": {
            "comment": "Информация по выданному кредиту",
            "$": {
                "@loanInfo": {
                    "title": "Информация по договору",
                    "titleClass": "navigated-title",
                    "className": "vertical navigated-content",
                    "readOnly": true,
                    "$": {
                        "@imported": {
                            "visible$": "!!mem.app.importedLoanId",
                            "$": {
                                "app": {
                                    "$": {
                                        "importedLoanId": {
                                            "label": "ID импортированного договора",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "TextEdit"
                                        }
                                    }
                                }
                            }
                        },
                        "@created": {
                            "visible$": "!!mem.dea",
                            "$": {
                                "dea": {
                                    "$": {
                                        "@num": {
                                            "className": "horizontal",
                                            "$": {
                                                "code": {
                                                    "label": "Номер договора",
                                                    "style": {
                                                        "width": "280px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "refer": {
                                                    "label": "Референс договора",
                                                    "style": {
                                                        "width": "280px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "linkToDeaDialog": {
            "title$": "`Установка связи с договорм, заявка ${params?.code}`",
            "style": {
                "width": "800px",
                "overflow": "hidden"
            },
            "className": "vertical",
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "flexGrow": 1,
                        "overflowY": "auto"
                    },
                    "$": {
                        "@appDea": {
                            "visible$": "!!mem?.dea?.id",
                            "$": {
                                "dea": {
                                    "$": {
                                        "code": {
                                            "label": "Номер договора",
                                            "style": {
                                                "marginTop": "4px",
                                                "width": "280px"
                                            },
                                            "control": "TextEdit",
                                            "readOnly": true
                                        }
                                    }
                                }
                            }
                        },
                        "@DeaDoesNotExists": {
                            "visible$": "!!mem.app && !mem?.dea?.id",
                            "$": {
                                ".warning": {
                                    "control": "Text",
                                    "getter": "'В заявке отсутствует информация о договоре'"
                                }
                            }
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "justifyContent": "flex-end"
                    },
                    "$": {
                        ".btnCancel": {
                            "label": "Отменить",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close();",
                                "params": {
                                    "disableUpdate": true
                                }
                            }
                        },
                        ".btnLink": {
                            "label": "Связать",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "contained"
                            },
                            "action": [
                                {
                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'loanapp', method: 'linkToDea', params: {req_dep_id: params.dep_id, req_id: params.id, dea_dep_id: mem.dea.dep_id, dea_id: mem.dea.id, appState: 'DEA_REGISTERED'}})"
                                },
                                {
                                    "js": "task.events.fireEvent('onRefreshCurrentRow')"
                                },
                                {
                                    "js": "actions.close();",
                                    "params": {
                                        "disableUpdate": true
                                    }
                                }
                            ],
                            "readOnly$": "!mem?.dea?.id"
                        }
                    }
                }
            },
            "actions": {
                "refresh": {
                    "js": ";"
                },
                "onElementCreated": [
                    {
                        "js": "return backend.post('/aoa/execObjectMethod', {object: 'app', method: 'getApplication', params: {dep_id: params.dep_id, id: params.id}}).then(r=>{mem.app=r;})"
                    },
                    {
                        "js": "if(mem.app?.dea?.id){mem.dea = mem.app.dea;} forceUpdate();"
                    }
                ]
            }
        }
    },
    "methods": {
        "changeInitiator": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "import json\n\nfrom apng_core.db import fetchone\nfrom django.db import transaction\n\n#\n# Изменение инициатора заявки\n#\nif not parameters.get('initiator'):\n    raise Exception('Не задан инициатор')\n\nif not parameters.get('oldInitiator'):\n    raise Exception('Не задан предыдущий инициатор')\n\nif not parameters.get('appId'):\n    raise Exception('Не задан appId')\n\n#raise Exception(json.dumps(parameters, indent=4, ensure_ascii=False))\n\nidDep = None\nidOrd = None\noldInitiator = parameters.get('oldInitiator')\n\nwith transaction.atomic(using='cbs'):\n    from colvir_cbs.auth import AuthenticatedUser\n    with AuthenticatedUser() as au:\n        with au.getConnection().cursor() as cursor:\n            cursor.execute('select * from l_reqdea_ext where appid=:appId', {'appId': parameters['appId']})\n            d = fetchone(cursor)\n            idDep = d['DEP_ID']\n            idOrd = d['ID']\n            \n        from colvir_cbs.services import getUserByCode\n        u = getUserByCode(parameters['initiator'])\n        if not u:\n            raise Exception('Пользователь %s не существует' % parameters['initiator'])\n\n        j = execObjectMethod({\n            'object': 'app', 'method': 'getApplicationJson',\n            'params': {'appId': parameters['appId']}\n        })\n\n        j['user']['code'] = u['code']\n        j['user']['name'] = u['name']\n        \n        execObjectMethod({\n            'object': 'app', 'method': 'saveApplicationJson',\n            'params': {'appId': parameters['appId'], 'json': j}\n        })\n\n            \n            #raise Exception(json.dumps(j, indent=4, ensure_ascii=False))\n    with transaction.atomic():\n        from apng_core.easyflow.models import Token, TokenAut\n        from django.db import connection\n        \n        with connection.cursor() as cursor:\n            cursor.execute(\"\"\"select id from easyflow_token  where \"objectKey\" = 'loanapp:%s,%s' and process_id is null and state in('active', 'suspended')\"\"\",[idDep, idOrd])\n            for row in cursor.fetchall():\n                processes = Token.objects.filter(id = row[0])\n                for p in processes:\n                    \n                    if p.initiator == oldInitiator:\n                        p.initiator = parameters['initiator']\n                        p.save()\n            \n                    for t in p.tokens.filter(state__in=['active', 'suspended']):\n                        needSave = False\n                \n                        if t.initiator == oldInitiator:\n                            t.initiator = parameters['initiator']\n                            needSave = True\n                \n                        if t.performer == oldInitiator:\n                            t.performer = parameters['initiator']\n                            needSave = True\n                \n                        if needSave:\n                            t.save()\n                \n                        if t.flow.typ == 'task':\n                            if t.candidates.filter(username = oldInitiator).count() > 0:\n                                if t.candidates.filter(username=parameters['initiator']).count() == 0:\n                                    ta = TokenAut(\n                                    token = t,\n                                    username = parameters['initiator'])\n                                    ta.save()\n\n                \t\n\n        \n\n        \n                "
            }
        },
        "identifyClient": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "con = initDbSession(application='bank')\n\ndef fillCategory(client):\n    if not client['isJur'] and not client['isIE']:\n        client['categoryName'] = 'Физическое лицо'\n    elif not client['isIE']:\n        client['categoryName'] = 'Юридическое лицо'\n    else:\n        client['categoryName'] = 'Индивидуальный предприниматель'\n\nclient = execObjectMethod({\n    'object': 'client', 'method': 'identifyClient',\n    'params': parameters\n})\n\nif client:\n    fillCategory(client)\n\ndata = client\n"
            }
        },
        "getClient": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "con = initDbSession(application='bank')\n\nclient = execObjectMethod({\n    'object': 'client', 'method': 'getClient',\n    'params': parameters\n})\n\ndef fillCategory(client):\n    if not client['isJur'] and not client['isIE']:\n        client['categoryName'] = 'Физическое лицо'\n    elif not client['isIE']:\n        client['categoryName'] = 'Юридическое лицо'\n    else: \n        client['categoryName'] = 'Индивидуальный предприниматель'\n\nif client:\n    fillCategory(client)\n\ndata = client\n\n"
            }
        },
        "setLoanAttributes": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "#\n# Установка разных атрибутов кредитных договоров из данных кредитной заявки\n#\n# TODO: Метод перенести в объект кредитной заявки\nfrom loanapp.services.application.app_to_cbs import extractClassifiers\n\nwith initDbSession(application='bank').cursor() as cursor:\n    \n    classifiers = extractClassifiers(parameters['app'])\n    #raise Exception(json.dumps(classifiers))\n    for name in classifiers:\n        p = {\n            'dep_id': parameters['dea']['dep_id'],\n            'id': parameters['dea']['id'],\n            'code': name,\n            'value': classifiers[name]\n        }\n        cursor.execute(\"\"\"\n            declare\n            begin\n                L_pkgDeaUniRef.pSetRefValOnly(\n                    :dep_id, :id, u_pkguniref.fRefCode2Id(:code),\n                    u_pkguniref.fId(:code, null, :value)\n                );\n            end;\n        \"\"\", p)\n        \n    # Установка параметров договора\n    p = {\n        'dep_id': parameters['dea']['dep_id'],\n        'id': parameters['dea']['id'],\n        'app': json.dumps(parameters['app'], ensure_ascii=False)\n    }\n    cursor.execute(\"\"\"\n        declare\n        begin\n            -- id заявки\n            T_PkgDeaPrm.pSetPrm(:id, :dep_id,\n                'L_UNNUMBER', \n                json_value(:app, '$.app.appId')\n            );\n            \n        end;\n    \"\"\", p)"
            }
        },
        "createLoan": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "SQL=\"\"\"\n    declare\n        idDeaDep number;\n        idDea number;\n        r L_REQDEA%%rowtype;\n        ro T_ORD%%rowtype;\n        pm T_PROCMEM%%rowtype;\n        nNJRN number;\n\n        fromDate date;\n        toDate date;\n        \n        idDuration T_DEAPRD_STD.ID%%type;\n        \n        function getDurationId(duration in varchar2, durationUnit in varchar2) return T_DEAPRD_STD.ID%%type is\n            per T_DEAPRD_STD%%rowtype;\n        begin\n            select * into per from T_DEAPRD_STD where time_type=durationUnit and time_unit=duration and arcfl='0';\n            return per.id;\n        exception \n            when no_data_found then\n                raise_application_error(-20000, LocalFrmt(\n                    'Срок %%0:s/%%1:s не существует в спрвочнике сроков', \n                    vargs(duration, durationUnit)\n                ));\n            when too_many_rows then\n                raise_application_error(-20000, LocalFrmt(\n                    'Срок %%0:s/%%1:s описан в спрвочнике сроков несколько раз. Исправьте ошибку в справочнике.', \n                    vargs(duration, durationUnit)\n                ));\n        end;\n        \n    begin\n        t_log.penable; t_log.clean;\n        \n        select * into r from L_REQDEA where DEP_ID=:req_dep_id and ID=:req_id;\n        select * into ro from T_ORD where DEP_ID=:req_dep_id and ID=:req_id;\n        select * into pm from T_PROCMEM where DEP_ID=:req_dep_id and ORD_ID=:req_id and MAINFL='1';\n    \n        idDeaDep := :req_dep_id;\n        \n        if nvl(json_value(r.json, '$.product.options.durationMethod'), 'duration') = 'duration' then\n            idDuration := getDurationId(json_value(r.json, '$.app.duration'), json_value(r.json, '$.app.durationUnit'));\n            fromDate := P_OPERDAY;\n            toDate := T_PkgDeaPer.fAddPer(P_OPERDAY, r.DEP_ID, idDuration, r.DCL_ID);\n        elsif json_value(r.json, '$.product.options.durationMethod') = 'endDate' then\n            fromDate := P_OPERDAY;\n            toDate := to_date(substr(json_value(r.json, '$.app.durationEndDate'),1,10), 'yyyy-mm-dd');\n        else\n            raise_application_error(-20000, localize(\n                'Невозможно определить срок для создания договора'\n            ));\n        end if;\n        \n        --\n        -- Ищем ранее созданный договор. Возможно из за порванной транзакции\n        --\n        select \n            (select ord_id from t_procmem where id=pm.id and MAINFL='0')\n        into idDea from dual;\n\n        if idDea is null then\n            -- Добавляем к процессу заявки псевдо операцию\n            declare\n            begin\n                select nvl(max(NJRN)+1, 1) into nNJRN from T_OPERJRN where ID=pm.ID;\n                insert into T_OPERJRN(\n                    ID, NJRN, BOP_ID, \n                    NOPER,\n                    DEP_ID, ORD_ID,\n                    DOPER, TUS_ID,\n                    DSCR \n                )values(\n                    pm.ID, nNJRN, pm.BOP_ID,\n                    (select NORD from T_SCEN_STD where ID=pm.BOP_ID and CODE='_RUN_ANL_ACM_'),\n                    :req_dep_id, :req_id,\n                    P_OPERDAY, p_idus,\n                    'Создание договора'\n                );\n            end;\n        else\n            -- Берём последнюю операцию по заявке\n            select max(NJRN) into nNJRN from T_OPERJRN where ID=pm.ID;\n        end if;\n        \n    \n        L_BSLOAN.pSave(\n            nDEP_ID         => idDeaDep,\n            nID             => idDea,\n            sDCL_CODE       => json_value(r.json, '$.app.productCode'),\n            dFROMDATE       => fromDate,\n            dTODATE         => toDate,\n            sVAL_CODE       => json_value(r.json, '$.app.currency'),\n            sAMOUNT         => json_value(r.json, '$.app.amount'),\n            nPRD_ID         => r.REQ_PRD_ID, \n            nCLI_DEP_ID     => r.CLIDEP_ID, \n            nCLI_ID         => r.CLI_ID,\n            sPRIM           => null, \n            sCode           => null, \n            idPur           => r.PUR_ID,\n            nParentProc     => pm.ID, \n            nParentOpr      => nNJRN,\n            sStatCode       => null,\n            dRecv           => null,\n            dDSF            => null, \n            sNSF            => null, \n            sREFER          => null,\n            nTUS_ID         => null, \n            cIMPFL          => '0', \n            nSELL_DEP_ID    => null,\n            nDEA_STATE      => 0, \n            nSELL_ID        => null, \n            nBAL_DEP_ID     => null,\n            nSRV_DEP_ID     => null, \n            nVAL_RAT        => null, \n            nTRF_IDCAT      => null,\n            sINDEX_VAL_CODE => null,\n            cINDEXFL        => '0', \n            nINDEX_VAL_RATE => null,\n            sNOMINAL_VALUE  => null, \n            sPURCHASE_VALUE => null, \n            cSELSRVFL       => '0',\n            idBnchMrk       => null, \n            sTimeType       => null, \n            nTimeUnit       => null,\n            nCLI_ACC_DEP_ID => null, \n            nCLI_ACC_ID     => null, \n            cIMPORTED       => '0'\n        );\n    \n        :dea_dep_id := idDeaDep;\n        :dea_id := idDea;\n        select CODE into :dea_code from T_ORD where DEP_ID=idDeaDep and ID=idDea;\n        select refer into :dea_refer from t_dea where DEP_ID=idDeaDep and ID=idDea;\n        \n        \n        -- Добавление участника в процесс заявки\n        declare\n            op BS_OPERATION.SelfAttr;\n            memCnt integer;\n        begin\n            --delete from t_procmem where id=pm.id and mainfl=0;\n            select count(*) into memCnt from t_procmem where id=pm.id and mainfl=0 and dep_id=idDeaDep and ord_id=idDea;\n            if memCnt = 0 then\n                BS_OPERATION.read_process(op, pm.id);\n                BS_OPERATION.add_mem(op, P_IDDEP=>idDeaDep, p_idord=>idDea, p_nmem=>BS_BOP.fGetPosId(pm.BOP_ID, 'DEA'));\n            end if;\n        end;\n        \n        -- Установка индивидуальной ставки\n        -- L_PCNPRODUCT - признак использования продуктовой ставки\n        if nvl(T_PkgDeaPrm.fParByCode(idDea, idDeaDep, 'L_PCNPRODUCT'), '0') = '0' then\n            declare\n                idClc number;\n                idPcn number;\n                idPcnVer number;\n            begin\n                idClc := T_PkgArl.fGetClcByArl(T_PkgArl.fArlId('CR_INTER'), idDeaDep, idDea);\n                T_PkgPcnSpec.pCre(\n                    nDEP_ID => idDeaDep,\n                    nID     => idDea,\n                    nCLC_ID => idClc,\n                    idPcn   => idPcn,\n                    iVer    => idPcnVer\n                );\n                T_PkgPcnSpec.pAddNewValue(\n                    idPcn     => idPcn,\n                    dFromdate => P_OPERDAY,\n                    fpercent  => r.RATE_REQ\n                );\n            end;\n        end if;\n\n        -- id заявки\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'L_UNNUMBER', \n            json_value(r.json, '$.app.appId')\n        );\n        \n        --\n        -- Копирование параметров из заявки в договор\n        --\n        declare\n            dg clob;\n        begin\n            select json_dataguide(json_query(r.json, '$.app.parameters')) into dg from dual;\n            for rec in (\n                select substr(path, 3) param\n                from json_table(dg, '$[*]' columns (path varchar2 path '$.\"o:path\"'))\n            ) loop\n                T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n                    rec.param, json_value(r.json, '$.app.parameters.'||rec.param)\n                );\n                \n            end loop;\n        end;\n\n        -- Льготный период ОД\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'L_PNTGRACEOD', \n            nvl(json_value(r.json, '$.app.parameters.L_PNTGRACEOD'), '0')\n        );\n        \n        -- Льготный период проценты\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'L_PNTGRACEPRC', \n            nvl(json_value(r.json, '$.app.parameters.L_PNTGRACEPRC'), '0')\n        );\n    \n        -- Вид рынка (для авто/ипотека) (первичный/вторичный)\n        if json_value(r.json, '$.objectOfCredit.marketType') is not null then\n            T_PkgDeaPrm.pSetPrm(idDea, idDeaDep, \n                'L_VIDNED', \n                json_value(r.json, '$.objectOfCredit.marketType')\n            );\n        end if;\n    \n        -- Атрибуты для ипотеки\n        if json_value(r.json, '$.objectOfCredit.objectType') = 'realty' then\n            -- Стоимость квартиры по ипотеке\n            T_PkgDeaPrm.pSetPrm(idDea, idDeaDep, \n                'L_PAYALLSUMIP', \n                json_value(r.json, '$.objectOfCredit.cost')\n            );\n            -- Сумма первоначального взноса по ипотеке\n            T_PkgDeaPrm.pSetPrm(idDea, idDeaDep, \n                'L_PAYFIRST_R', \n                json_value(r.json, '$.objectOfCredit.own_amount')\n            );\n            -- Сумма первоначального взноса по ипотеке\n            T_PkgDeaPrm.pSetPrm(idDea, idDeaDep, \n                'Z_SUMVZN', \n                json_value(r.json, '$.objectOfCredit.own_amount')\n            );\n            \n        end if;\n        \n        -- Атрибуты для авто кредита\n        if json_value(r.json, '$.objectOfCredit.objectType') = 'auto' then\n            -- Стоимость автомобиля\n            T_PkgDeaPrm.pSetPrm(idDea, idDeaDep, \n                'L_PAYALLSUMIP', \n                json_value(r.json, '$.objectOfCredit.cost')\n            );\n\n        end if;\n\n        -- Тип заемщика\n        declare\n            typeOfBorrower varchar2(60);\n        begin\n            typeOfBorrower := json_value(r.json, '$.client.clientType');\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_TZ'),\n                u_pkguniref.fId('UZ_TZ', null, typeOfBorrower)\n            );\n        end;\n        \n        -- Вид кредитования\n        if json_value(r.json, '$.app.typeOfLending') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_VIDCRED'),\n                u_pkguniref.fId('UZ_VIDCRED', null, json_value(r.json, '$.app.typeOfLending'))\n            );\n        end if;\n        \n        -- Вид кредитования по классификатору\n        if json_value(r.json, '$.app.typeOfLending110') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_TYPECRED_110'),\n                u_pkguniref.fId('UZ_TYPECRED_110', null, json_value(r.json, '$.app.typeOfLending110'))\n            );\n        end if;\n\n        -- Нормативно правовой акт\n        if json_value(r.json, '$.app.legalAct') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_NPA'),\n                u_pkguniref.fId('UZ_NPA', null, json_value(r.json, '$.app.legalAct'))\n            );\n        end if;\n        \n        -- Количество создаваемых рабочих мест\n        if json_value(r.json, '$.client.isJur') = 'true' then\n            T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n                'L_WORKPLACES_NUM', \n                nvl(json_value(r.json, '$.app.workplaces_num'), '0')\n            );\n        end if;\n\n        -- Первоначальный взнос\n        if json_value(r.json, '$.app.parameters.L_PAYFIRST') is not null then\n            T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n                'L_PAYFIRST', \n                json_value(r.json, '$.app.parameters.L_PAYFIRST')\n            );\n        end if;\n        \n        -- Цель кредитной линии\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'L_PURPOSE_CREDLINE', \n            json_value(r.json, '$.app.objectOfLoan')\n        );\n        \n        -- Цель кредита по кассификатору\n        if json_value(r.json, '$.app.purpose112OfLoan') is not null then \n            L_pkgDeaUniRef.pSetRefValOnly( \n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_PURPCRED_112'), \n                u_pkguniref.fId('UZ_PURPCRED_112', null, json_value(r.json, '$.app.purpose112OfLoan')) \n            ); \n        end if;\n        \n        -- Признак выдачи кредита по решению правительства\n        -- Этот признак на договоре всегда по решению банка\n        begin\n            T_BSDEA.pSetConMem(\n                idDeaDep, idDea, G_PkgCon.fId('L_LOAN_ISSUED'),\n                case when json_value(r.json, '$.government.hasDecision') = 'true' then '0' else '0' end\n            );\n        exception when others then\n            raise_application_error(-20000, format(\n                'Ошибка установки значения группы консолидации L_LOAN_ISSUED для договора%%CRLF%%0:s',\n                vargs(sqlerrm||dbms_utility.format_error_backtrace)\n            ));\n        end;\n        \n        --\n        -- Место работы заёмщика\n        --\n        if json_value(r.json, '$.income.companyName') is not null then\n            T_PkgDeaPrm.pSetPrm(idDea, idDeaDep, \n                'L_WORK', \n                json_value(r.json, '$.income.companyName')\n            );\n        end if;\n        \n        \n        l_pkgloans.pAfterSavePrmAndAnl(idDeaDep, idDea, INEEDSENDMMS => 0);\n\n        \n        -- Временное решение по копированию созаёмщиков\n        -- Но их надо создавать сразу из заявки, без промежуточного хранения\n        for cb in (\n            select PRSDEP_ID, PRS_ID from M_DEAPRS m where m.DEP_ID = :req_dep_id and m.ID = :req_id\n        ) loop\n            L_pkgLoans.pAddDeaPrs(idDeaDep, idDea, cb.PRSDEP_ID, cb.PRS_ID);\n        end loop;\n\n        :operday := P_OPERDAY;\n    \n    \n    end;\n\n\"\"\"\n\nwith initDbSession(application='bank').cursor() as cursor:\n    p = {\n        'req_dep_id': parameters['req_dep_id'],\n        'req_id': parameters['req_id'],\n        'dea_dep_id': cursor.var(int),\n        'dea_id': cursor.var(int),\n        'dea_code': cursor.var(str),\n        'dea_refer': cursor.var(str),\n        'operday': cursor.var(str),\n    }\n    \n    try:\n        cursor.execute(SQL, p)\n    except Exception as e:\n        raise UserException({\n            'message': 'Ошибка создания договора\\n%s' % e,\n            'trace': log.readLog()\n        })\n        \n        \n    data = {\n        'dep_id': p['dea_dep_id'].getvalue(),\n        'id': p['dea_id'].getvalue(),\n        'code': p['dea_code'].getvalue(),\n        'refer': p['dea_refer'].getvalue(),\n        #'log': log.readLog(),\n    }\n        \n    "
            }
        },
        "createLine": {
            "sql": {},
            "script": {
                "py": "SQL = \"\"\"\n    declare\n        idDeaDep number;\n        idDea number;\n        idDcl number;\n        r L_REQDEA%%rowtype;\n        ro T_ORD%%rowtype;\n        pm T_PROCMEM%%rowtype;\n        dpm T_PROCMEM%%rowtype;\n        nNJRN number;\n        \n        idLimPeriodMov number;\n        idLimPeriodBal number;\n        \n        cPerLastBalAuto varchar2(30);\n        \n        dateLastDeaMov date;\n        dateLastDeaBal date;\n        \n        amountLimMov number;\n        amountLimBal number;\n        \n        idDuration T_DEAPRD_STD.ID%%type;\n        \n        function getDurationId(duration in varchar2, durationUnit in varchar2) return T_DEAPRD_STD.ID%%type is\n            per T_DEAPRD_STD%%rowtype;\n        begin\n            select * into per from T_DEAPRD_STD where time_type=durationUnit and time_unit=duration;\n            return per.id;\n        exception \n            when no_data_found then\n                raise_application_error(-20000, LocalFrmt(\n                    'Срок %%0:s/%%1:s не существует в спрвочнике сроков', \n                    vargs(duration, durationUnit)\n                ));\n            when too_many_rows then\n                raise_application_error(-20000, LocalFrmt(\n                    'Срок %%0:s/%%1:s описан в спрвочнике сроков несколько раз. Исправьте ошибку в справочнике.', \n                    vargs(duration, durationUnit)\n                ));\n        end;\n        \n    begin\n        t_log.penable; t_log.clean;\n    \n        select * into r from L_REQDEA where DEP_ID=:req_dep_id and ID=:req_id;\n        select * into ro from T_ORD where DEP_ID=:req_dep_id and ID=:req_id;\n        select * into pm from T_PROCMEM where DEP_ID=:req_dep_id and ORD_ID=:req_id and MAINFL='1';\n        \n        begin\n            select * into dpm from T_PROCMEM where id=pm.id and MAINFL='0';\n        exception when no_data_found then null;\n        end;\n        \n        if dpm.id is null then\n            -- Добавляем к процессу заявки псевдо операцию\n            declare\n            begin\n                select nvl(max(NJRN)+1, 1) into nNJRN from T_OPERJRN where ID=pm.ID;\n                insert into T_OPERJRN(\n                    ID, NJRN, BOP_ID, \n                    NOPER,\n                    DEP_ID, ORD_ID,\n                    TUS_ID,\n                    DSCR \n                )values(\n                    pm.ID, nNJRN, pm.BOP_ID,\n                    (select NORD from T_SCEN_STD where ID=pm.BOP_ID and CODE='_RUN_ANL_ACM_'),\n                    :req_dep_id, :req_id,\n                    p_idus,\n                    'Создание договора'\n                );\n            end;\n        end if;\n        \n    \n        idDeaDep := nvl(dpm.dep_id, :req_dep_id);\n        idDea := dpm.ord_id;\n        \n        idDcl := T_PkgDea.fDclId(json_value(r.json, '$.app.productCode'));\n        idDuration := getDurationId(json_value(r.json, '$.app.duration'), json_value(r.json, '$.app.durationUnit'));\n        \n        --\n        -- Поиск лимита\n        --\n        \n        if L_PkgDeaLim.fHasLineLimBal(idDcl) = 1 then\n            idLimPeriodBal := idDuration;\n            \n            -- Смотрим на продукте период доступности для лимита задолженности\n            cPerLastBalAuto := T_PkgDeaPrm.fClsParByCode(idDcl, 'LL_AUTOPRDLAST');\n            if cPerLastBalAuto is not null then\n                idLimPeriodBal := T_PkgDeaPer.fId(cPerLastBalAuto);\n            end if;\n            \n            dateLastDeaBal := T_PkgDeaPer.fAddPer(P_OPERDAY, idDeaDep, idLimPeriodBal, idDcl);\n            amountLimBal   := json_value(r.json, '$.app.amount');\n        elsif L_PkgDeaLim.fHasLineLimMov(idDcl) = 1 then\n            idLimPeriodMov := idDuration;\n            dateLastDeaMov := T_PkgDeaPer.fAddPer(P_OPERDAY, idDeaDep, idDuration, r.DCL_ID);\n            amountLimMov   := json_value(r.json, '$.app.amount');\n        else\n            raise_application_error(-20000, LocalFrmt(\n                'По продукту %%0:s не настроены лимиты',\n                vargs(json_value(r.json, '$.app.productCode'))\n            ));\n        end if;\n        \n        t_log.debug('Создание договора линиии L_BSLOANLINE.pSave()');\n        t_log.debug('  Лимит задолженности');\n        t_log.debug('    nPRD_BAL_ID  => '||idLimPeriodBal);\n        t_log.debug('    dLastDea_Bal => '||dateLastDeaBal);\n        t_log.debug('    sAMOUNT      => '||amountLimBal);\n    \n        L_BSLOANLINE.pSave(\n            nDEP_ID         => idDeaDep,\n            nID             => idDea,\n            sDCL_CODE       => json_value(r.json, '$.app.productCode'),\n            dFROMDATE       => P_OPERDAY,\n            dTODATE         => T_PkgDeaPer.fAddPer(P_OPERDAY, idDeaDep, idDuration, r.DCL_ID),\n            sCode           => null, \n            dRecv           => null,\n            sVAL_CODE       => json_value(r.json, '$.app.currency'),\n            nCLI_DEP_ID     => r.CLIDEP_ID, \n            nCLI_ID         => r.CLI_ID,\n            nPUR_ID         => r.PUR_ID,\n            nParentProc     => pm.ID, \n            nParentOpr      => nNJRN,\n            sStatCode       => null,\n            sPRIM           => null, \n            nTUS_ID         => null, \n            cIMPFL          => '0', \n            nBAL_DEP_ID     => null,\n            nSRV_DEP_ID     => null, \n            nSELL_DEP_ID    => null,\n            cNOCORRLIMFL    => '0',\n            nTRF_IDCAT      => null,\n            idBnchMrk       => null, \n            sTimeType       => null, \n            nTimeUnit       => null,\n            \n            -- Лимит выдачи\n            nPRD_ID         => idLimPeriodMov, \n            dLastDea        => dateLastDeaMov,\n            sSUMLIMPAY      => amountLimMov,\n            \n            -- Лимит задолженности\n            nPRD_BAL_ID     => idLimPeriodBal,\n            dLastDea_Bal    => dateLastDeaBal,\n            sAMOUNT         => amountLimBal,\n            \n            cIMPORTED       => '0'\n        );\n    \n        :dea_dep_id := idDeaDep;\n        :dea_id := idDea;\n        select CODE into :dea_code from T_ORD where DEP_ID=idDeaDep and ID=idDea;\n        \n        \n        if dpm.id is null then\n            -- Добавление участника в процесс заявки\n            declare\n                op BS_OPERATION.SelfAttr;\n            begin\n                BS_OPERATION.read_process(op, pm.id);\n                BS_OPERATION.add_mem(op, P_IDDEP=>idDeaDep, p_idord=>idDea, p_nmem=>BS_BOP.fGetPosId(pm.BOP_ID, 'DEA'));\n            end;\n        end if;\n\n        \n        -- Установка индивидуальной ставки\n        if r.RATE_REQ is not null then\n            declare\n                idClc number;\n                idPcn number;\n                idPcnVer number;\n            begin\n                idClc := T_PkgArl.fGetClcByArl(T_PkgArl.fArlId('CR_INTER'), idDeaDep, idDea);\n                T_PkgPcnSpec.pCre(\n                    nDEP_ID => idDeaDep,\n                    nID     => idDea,\n                    nCLC_ID => idClc,\n                    idPcn   => idPcn,\n                    iVer    => idPcnVer\n                );\n                T_PkgPcnSpec.pAddNewValue(\n                    idPcn     => idPcn,\n                    dFromdate => P_OPERDAY,\n                    fpercent  => r.RATE_REQ\n                );\n            end;\n        end if;\n        \n        -- id заявки\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'L_UNNUMBER', \n            json_value(r.json, '$.app.appId')\n        );\n    \n\n        -- День погашения процентов\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'LPAYDAY', \n            json_value(r.json, '$.app.parameters.LPAYDAY')\n        );\n\n        -- День погашения ОД\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'LPAYDAYOD', \n            json_value(r.json, '$.app.parameters.LPAYDAYOD')\n        );\n\n        -- Льготный период ОД\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'L_PNTGRACEOD', \n            nvl(json_value(r.json, '$.app.parameters.L_PNTGRACEOD'), '0')\n        );\n        \n        -- Длительность льготного периода для револьверной кредитной линии\n        if json_value(r.json, '$.app.parameters.L_GRACEPERIOD') is not null then\n            T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n                'L_GRACEPERIOD', \n                json_value(r.json, '$.app.parameters.L_GRACEPERIOD')\n            );\n        end if;\n        \n        \n        \n        -- Льготный период проценты\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'L_PNTGRACEPRC', \n            nvl(json_value(r.json, '$.app.parameters.L_PNTGRACEPRC'), '0')\n        );\n    \n    \n        -- Тип заемщика\n        declare\n            typeOfBorrower varchar2(60);\n        begin\n            typeOfBorrower := json_value(r.json, '$.client.clientType');\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_TZ'),\n                u_pkguniref.fId('UZ_TZ', null, typeOfBorrower)\n            );\n        end;\n        \n        -- Вид кредитования\n        if json_value(r.json, '$.app.typeOfLending') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_VIDCRED'),\n                u_pkguniref.fId('UZ_VIDCRED', null, json_value(r.json, '$.app.typeOfLending'))\n            );\n        end if;\n        \n        -- Вид кредитования по классификатору\n        if json_value(r.json, '$.app.typeOfLending110') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_TYPECRED_110'),\n                u_pkguniref.fId('UZ_TYPECRED_110', null, json_value(r.json, '$.app.typeOfLending110'))\n            );\n        end if;\n\n        -- Нормативно правовой акт\n        if json_value(r.json, '$.app.legalAct') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_NPA'),\n                u_pkguniref.fId('UZ_NPA', null, json_value(r.json, '$.app.legalAct'))\n            );\n        end if;\n\n        -- Цель кредитной линии\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'L_PURPOSE_CREDLINE', \n            json_value(r.json, '$.app.objectOfLoan')\n        );\n        \n        --  Цель кредитной линии по классификатору\n        if json_value(r.json, '$.app.purpose112OfLoan') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_PURPCRED_112'),\n                u_pkguniref.fId('UZ_PURPCRED_112', null, json_value(r.json, '$.app.purpose112OfLoan'))\n            );\n        end if;\n        \n        -- Признак выдачи кредита по решению правительства\n        -- На договоре он всегда по решению банка\n        begin\n            T_BSDEA.pSetConMem(\n                idDeaDep, idDea, G_PkgCon.fId('L_LOAN_ISSUED'),\n                case when json_value(r.json, '$.government.hasDecision') = 'true' then '0' else '0' end\n            );\n        exception when others then\n            raise_application_error(-20000, format(\n                'Ошибка установки значения группы консолидации L_LOAN_ISSUED для договора%%CRLF%%0:s',\n                vargs(sqlerrm||dbms_utility.format_error_backtrace)\n            ));\n        end;\n        \n        --\n        -- Место работы заёмщика\n        --\n        if json_value(r.json, '$.income.companyName') is not null then\n            T_PkgDeaPrm.pSetPrm(idDea, idDeaDep, \n                'L_WORK', \n                json_value(r.json, '$.income.companyName')\n            );\n        end if;\n        \n        \n        l_pkgloans.pAfterSavePrmAndAnl(idDeaDep, idDea, INEEDSENDMMS => 0);\n        \n        \n        -- Временное решение по копированию созаёмщиков\n        -- Но их надо создавать сразу из заявки, без промежуточного хранения\n        for cb in (\n            select PRSDEP_ID, PRS_ID from M_DEAPRS m where m.DEP_ID = :req_dep_id and m.ID = :req_id\n        ) loop\n            L_pkgLoans.pAddDeaPrs(idDeaDep, idDea, cb.PRSDEP_ID, cb.PRS_ID);\n        end loop;\n        \n        :operday := P_OPERDAY;\n\n\n    end;\n/\"\"\"\n\n\nfrom colvir_cbs.services import log\n\nwith initDbSession(application='bank').cursor() as cursor:\n    p = {\n        'req_dep_id': parameters['req_dep_id'],\n        'req_id': parameters['req_id'],\n        'dea_dep_id': cursor.var(int),\n        'dea_id': cursor.var(int),\n        'dea_code': cursor.var(str),\n        'operday': cursor.var(str),\n    }\n    \n    try:\n        cursor.execute(SQL, p)\n    except Exception as e:\n        raise UserException({\n            'message': 'Ошибка создания договора кредитной линии\\n%s' % e,\n            'trace': log.readLog()\n        })\n        \n        \n    data = {\n        'dep_id': p['dea_dep_id'].getvalue(),\n        'id': p['dea_id'].getvalue(),\n        'code': p['dea_code'].getvalue(),\n        #'log': log.readLog(),\n    }\n\n\n\n"
            }
        },
        "createLeasing": {
            "sql": {},
            "script": {
                "params": [],
                "py": "SQL=\"\"\"\r\ndeclare\r\n    r L_REQDEA%%rowtype;\r\n    ro T_ORD%%rowtype;\r\n    pm T_PROCMEM%%rowtype;\r\n    nNJRN number;\r\n\r\n    idLsnDep number;\r\n    idLsn number;\r\n    \r\n    idSellerDep number;\r\n    idSeller number;\r\n    \r\n    lsnTODATE date;\r\n    iREQ_PRD_ID T_DEAPRD_STD.ID%%type;\r\n    \r\n    \r\n    -- Получение срока по продукту\r\n    function getDurationID(pNum in number, pDim in varchar2, pDclCode in varchar2) return varchar is\r\n        iDurationID T_DEAPRD_STD.ID%%type;\r\n    begin\r\n        select\r\n            (select p.ID \r\n            from T_DEALNKPRD m, T_DEAPRD_STD p, T_DEACLS_STD t\r\n            where m.PRD_ID = p.ID and m.DCL_ID = t.ID and t.code=pDclCode\r\n              and p.time_type = pDim and p.time_unit = pNum\r\n            )\r\n        into iDurationID\r\n        from dual;\r\n        \r\n        if iDurationID is null then\r\n            raise_application_error(-20000, colvir.LocalFrmt(\r\n                'Для продукта %%0:s не настроен срок договора %%1:s %%2:s', \r\n                colvir.vargs(pDclCode, pNum, pDim)\r\n            ));\r\n        end if;\r\n        \r\n        return iDurationID;\r\n    end;\r\n    \r\n    \r\n    \r\nbegin\r\n    select * into r from L_REQDEA where DEP_ID=:req_dep_id and ID=:req_id;\r\n    select * into ro from T_ORD where DEP_ID=:req_dep_id and ID=:req_id;\r\n    select * into pm from T_PROCMEM where DEP_ID=:req_dep_id and ORD_ID=:req_id and MAINFL='1';\r\n    \r\n    -- Добавляем к процессу заявки псевдо операцию\r\n    declare\r\n    begin\r\n        select nvl(max(NJRN)+1, 1) into nNJRN from T_OPERJRN where ID=pm.ID;\r\n        insert into T_OPERJRN(\r\n            ID, NJRN, BOP_ID, \r\n            NOPER,\r\n            DEP_ID, ORD_ID,\r\n            TUS_ID,\r\n            DSCR\r\n        )values(\r\n            pm.ID, nNJRN, pm.BOP_ID,\r\n            (select NORD from T_SCEN_STD where ID=pm.BOP_ID and CODE='_RUN_ANL_ACM_'),\r\n            :req_dep_id, :req_id,\r\n            p_idus,\r\n            'Создание договора'\r\n        );\r\n    end;\r\n    \r\n    idLsnDep := r.DEP_ID;\r\n    \r\n    if json_value(r.json, '$.leasing.seller_code') is null then\r\n        raise_application_error(-20000, Localize(\r\n            'Не указан продавец в заявке на лизинг'\r\n        ));\r\n    end if;\r\n    \r\n    -- Карточка клиента продавца\r\n    g_pkgcli.pGetCliId(\r\n        json_value(r.json, '$.leasing.seller_code'),\r\n        idSellerDep, idSeller\r\n    );                        \r\n    \r\n    iREQ_PRD_ID := getDurationID(json_value(r.json, '$.app.duration'), json_value(r.json, '$.app.durationUnit'), json_value(r.json, '$.product.code'));\r\n    lsnTODATE := T_PkgDeaPer.fAddPer(P_OPERDAY, idLsnDep, iREQ_PRD_ID, r.DCL_ID);\r\n    \r\n    LS_BSDEA.pSave(\r\n        nDEP_ID         => idLsnDep, \r\n        nID             => idLsn, \r\n        sDCL_CODE       => json_value(r.json, '$.product.code'), \r\n        dFROMDATE       => P_OPERDAY, \r\n        dTODATE         => lsnTODATE,\r\n        sVAL_CODE       => json_value(r.json, '$.app.currency'),\r\n        sAMOUNT         => r.REQ_SUM, \r\n        nPRD_ID         => iREQ_PRD_ID, \r\n        nCLI_DEP_ID     => r.CLIDEP_ID, \r\n        nCLI_ID         => r.CLI_ID,\r\n        sPRIM           => null, \r\n        sCode           => null, \r\n        nParentProc     => pm.ID, \r\n        nParentOpr      => nNJRN, \r\n        sStatCode       => null,\r\n        dRecv           => null, \r\n        sREFER          => null, \r\n        nTUS_ID         => null, \r\n        nSRV_DEP_ID     => null,\r\n        nVAL_RAT        => null, \r\n        nVRATE_ID       => null, \r\n        nTRF_IDCAT      => null,\r\n        sTimeType       => null, \r\n        nTimeUnit       => null, \r\n        nOWN_AMOUNT     => null,\r\n        -- Продавец\r\n        nPRV_DEP_ID     => idSellerDep, \r\n        nPRV_ID         => idSeller, \r\n        nDISC_AMOUNT    => null, \r\n        sCOMPENSATIONFL => null,\r\n        nAMOUNT_NDS     => null, \r\n        dOrd            => null, \r\n        cIMPFL          => '0', \r\n        -- Цель использования\r\n        nPUR_ID         => r.PUR_ID\r\n    );\r\n    \r\n    -- Добавление участника в процесс заявки\r\n    declare\r\n        op BS_OPERATION.SelfAttr;\r\n    begin\r\n        BS_OPERATION.read_process(op, pm.id);\r\n        BS_OPERATION.add_mem(op, P_IDDEP=>idLsnDep, p_idord=>idLsn, p_nmem=>BS_BOP.fGetPosId(pm.BOP_ID, 'DEA'));\r\n    end;\r\n    \r\n    \r\n    -- Установка индивидуальной ставки\r\n    declare\r\n        idClc number;\r\n        idPcn number;\r\n        idPcnVer number;\r\n    begin\r\n        idClc := T_PkgArl.fGetClcByArl(T_PkgArl.fArlId('LS_INT'), idLsnDep, idLsn);\r\n        T_PkgPcnSpec.pCre(\r\n            nDEP_ID => idLsnDep,\r\n            nID     => idLsn,\r\n            nCLC_ID => idClc,\r\n            idPcn   => idPcn,\r\n            iVer    => idPcnVer\r\n        );\r\n        T_PkgPcnSpec.pAddNewValue(\r\n            idPcn     => idPcn,\r\n            dFromdate => P_OPERDAY,\r\n            fpercent  => r.RATE_REQ\r\n        );\r\n    end;\r\n    \r\n    -- Льготный период ОД\r\n    T_PkgDeaPrm.pSetPrm(idLsn, idLsnDep,\r\n        'L_PNTGRACEOD', \r\n        nvl(json_value(r.json, '$.app.parameters.L_PNTGRACEOD'), '0')\r\n    );\r\n    \r\n    -- Льготный период проценты\r\n    T_PkgDeaPrm.pSetPrm(idLsn, idLsnDep,\r\n        'L_PNTGRACEPRC',\r\n        nvl(json_value(r.json, '$.app.parameters.L_PNTGRACEPRC'), '0')\r\n    );\r\n    \r\n    -- Тип заемщика\r\n    declare\r\n        typeOfBorrower varchar2(60);\r\n    begin\r\n        typeOfBorrower := json_value(r.json, '$.client.clientType');\r\n        if typeOfBorrower is null then\r\n            -- Старый способ, оставлен пока для совместимости\r\n            typeOfBorrower := L_PKGDEAUNIREF.fGetDeaRefValCode(\r\n                r.dep_id, r.id, u_pkguniref.fRefCode2Id('UZ_TZ')\r\n            );\r\n        end if;\r\n        L_pkgDeaUniRef.pSetRefValOnly(\r\n            idLsnDep, idLsn, u_pkguniref.fRefCode2Id( 'UZ_TZ'),\r\n            u_pkguniref.fId('UZ_TZ', null, typeOfBorrower)\r\n        );\r\n    end;\r\n    \r\n    -- Цель кредита по кассификатору\r\n    if json_value(r.json, '$.app.purpose112OfLoan') is not null then \r\n        L_pkgDeaUniRef.pSetRefValOnly( \r\n            idLsnDep, idLsn, u_pkguniref.fRefCode2Id( 'UZ_PURPCRED_112'), \r\n            u_pkguniref.fId('UZ_PURPCRED_112', null, json_value(r.json, '$.app.purpose112OfLoan')) \r\n        ); \r\n    end if;\r\n    \r\n    \r\n    :lsn_dep_id := idLsnDep;\r\n    :lsn_id := idLsn;\r\n    select CODE into :lsn_code from T_ORD where DEP_ID=idLsnDep and ID=idLsn;\r\n    \r\n    -- id заявки\r\n    T_PkgDeaPrm.pSetPrm(idLsn, idLsnDep,\r\n        'L_UNNUMBER', \r\n        json_value(r.json, '$.app.appId')\r\n    );\r\n    \r\nend;\r\n\"\"\"\r\n\r\nfrom colvir_cbs.services import log\r\n\r\nwith initDbSession(application='bank').cursor() as cursor:\r\n\r\n\r\n    p = {\r\n        'req_dep_id': parameters['req_dep_id'],\r\n        'req_id': parameters['req_id'],\r\n        'lsn_dep_id': cursor.var(int),\r\n        'lsn_id': cursor.var(int),\r\n        'lsn_code': cursor.var(str),\r\n    }\r\n\r\n\r\n    try:\r\n        cursor.execute(SQL, p)\r\n    except Exception as e:\r\n        raise UserException({\r\n            'message': 'Ошибка создания договора лизинга в CBS\\n%s' % e,\r\n            'trace': log.readLog()\r\n        })\r\n\r\n    data = {\r\n        'dep_id': p['lsn_dep_id'].getvalue(),\r\n        'id': p['lsn_id'].getvalue(),\r\n        'code': p['lsn_code'].getvalue(),\r\n        #'log': log.readLog(),\r\n    }\r\n"
            }
        },
        "createTranche": {
            "script": {
                "py": "SQL = \"\"\"\n    declare\n        prmOut c_PkgStr.TPrmTBlLst;\n        idTrnDep number;\n        idTrn number;\n        req L_REQDEA%%rowtype;\n        pm T_PROCMEM%%rowtype;\n        \n        idDuration T_DEAPRD_STD.ID%%type;\n        \n        function getDurationId(duration in varchar2, durationUnit in varchar2) return T_DEAPRD_STD.ID%%type is\n            per T_DEAPRD_STD%%rowtype;\n        begin \n            select * into per from T_DEAPRD_STD where time_type=durationUnit and time_unit=duration and arcfl='0';\n            return per.id;\n        exception \n            when no_data_found then\n                raise_application_error(-20000, LocalFrmt(\n                    'Срок %%0:s/%%1:s не существует в спрвочнике сроков', \n                    vargs(duration, durationUnit)\n                ));\n            when too_many_rows then\n                raise_application_error(-20000, LocalFrmt(\n                    'Срок %%0:s/%%1:s описан в спрвочнике сроков несколько раз. Исправьте ошибку в справочнике.', \n                    vargs(duration, durationUnit)\n                ));\n            end;\n    begin\n        t_log.penable; t_log.clean;\n        \n        select * into req from L_REQDEA where DEP_ID=:REQ_DEP_ID and ID=:REQ_ID;\n        select * into pm from T_PROCMEM where DEP_ID=:REQ_DEP_ID and ORD_ID=:REQ_ID and MAINFL='1';\n        idDuration := getDurationId(json_value(req.json, '$.app.duration'), json_value(req.json, '$.app.durationUnit'));\n        \n        prmOut := T_PkgRunOprUtl.fRunOprByMainOrd(\n            json_value(req.json, '$.line.DEP_ID'),\n            json_value(req.json, '$.line.ID'),\n            'NEWDEA', \n            'amount=>'||json_value(req.json, '$.app.amount')||\n            ',VAL_ID=>'||T_PkgVal.fValCode2Id(json_value(req.json, '$.app.currency'))||',ValCode=>'||json_value(req.json, '$.app.currency')||\n            ',DclCode=>'||json_value(req.json, '$.app.productCode')||\n            ',sLoanT=>'||json_value(req.json, '$.app.purposeOfLoan')||\n            ',PRD_ID=>'||idDuration||\n            ',REQ_DEP_ID=>'||:REQ_DEP_ID||\n            ',REQ_ID=>'||:REQ_ID||\n            ',DFROM=>'||P_OPERDAY\n        );\n        \n        idTrnDep := json_value(req.json, '$.line.DEP_ID');\n        idTrn := C_PkgStr.fGetPrmVal(prmOut, 'LOAN_ID');\n        \n        -- Добавление участника в процесс заявки\n        declare\n            op BS_OPERATION.SelfAttr;\n        begin\n            BS_OPERATION.read_process(op, pm.id);\n            BS_OPERATION.add_mem(op, P_IDDEP=>idTrnDep, p_idord=>idTrn, p_nmem=>BS_BOP.fGetPosId(pm.BOP_ID, 'DEA'));\n        end;\n        \n        -- id заявки\n        T_PkgDeaPrm.pSetPrm(idTrn, idTrnDep,\n            'L_UNNUMBER', \n            json_value(req.json, '$.app.appId')\n        );\n        \n        \n        --\n        -- Копирование параметров из заявки в договор\n        --\n        declare\n            dg clob;\n        begin\n            select json_dataguide(json_query(req.json, '$.app.parameters')) into dg from dual;\n            for rec in (\n                select substr(path, 3) param\n                from json_table(dg, '$[*]' columns (path varchar2 path '$.\"o:path\"'))\n            ) loop\n                T_PkgDeaPrm.pSetPrm(idTrn, idTrnDep,\n                    rec.param, json_value(req.json, '$.app.parameters.'||rec.param)\n                );\n                \n            end loop;\n        end;\n        \n\n        -- Цель кредитной линии\n        T_PkgDeaPrm.pSetPrm(idTrn, idTrnDep,\n            'L_PURPOSE_CREDLINE', \n            json_value(req.json, '$.app.objectOfLoan')\n        );\n        \n        -- Цель кредита по классификатору\n        if json_value(req.json, '$.app.purpose112OfLoan') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idTrnDep, idTrn, u_pkguniref.fRefCode2Id( 'UZ_PURPCRED_112'),\n                u_pkguniref.fId('UZ_PURPCRED_112', null, json_value(req.json, '$.app.purpose112OfLoan'))\n            );\n        end if;\n\n        -- Вид кредитования\n        if json_value(req.json, '$.app.typeOfLending') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idTrnDep, idTrn, u_pkguniref.fRefCode2Id( 'UZ_VIDCRED'),\n                u_pkguniref.fId('UZ_VIDCRED', null, json_value(req.json, '$.app.typeOfLending'))\n            );\n        end if;\n        \n        -- Вид кредитования по классификатору\n        if json_value(req.json, '$.app.typeOfLending110') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idTrnDep, idTrn, u_pkguniref.fRefCode2Id( 'UZ_TYPECRED_110'),\n                u_pkguniref.fId('UZ_TYPECRED_110', null, json_value(req.json, '$.app.typeOfLending110'))\n            );\n        end if;\n\n        -- Признак выдачи кредита по решению правительства\n        -- на договоре всегда по решению банка\n        begin\n            T_BSDEA.pSetConMem(\n                idTrnDep, idTrn, G_PkgCon.fId('L_LOAN_ISSUED'),\n                case when json_value(req.json, '$.government.hasDecision') = 'true' then '0' else '0' end\n            );\n        exception when others then\n            raise_application_error(-20000, format(\n                'Ошибка установки значения группы консолидации L_LOAN_ISSUED для договора%%CRLF%%0:s',\n                vargs(sqlerrm||dbms_utility.format_error_backtrace)\n            ));\n        end;\n\n\n        :dea_dep_id := idTrnDep;\n        :dea_id := idTrn;\n        select CODE into :DEA_CODE from T_ORD o where DEP_ID=idTrnDep and ID=idTrn;\n        \n    end;\n/\"\"\"\n\nfrom colvir_cbs.services import log\n\nwith initDbSession(application='bank').cursor() as cursor:\n\n    p = {\n        'req_dep_id': parameters['req_dep_id'],\n        'req_id': parameters['req_id'],\n        'dea_dep_id': cursor.var(int),\n        'dea_id': cursor.var(int),\n        'dea_code': cursor.var(str),\n    }\n\n    try:\n\n        cursor.execute(SQL, p)\n    except Exception as e:\n        raise UserException({\n            'message': 'Ошибка создания транша\\n%s' % e,\n            'trace': log.readLog()\n        })\n\n    data = {\n        'dep_id': p['dea_dep_id'].getvalue(),\n        'id': p['dea_id'].getvalue(),\n        'code': p['dea_code'].getvalue(),\n        'log': log.readLog(),\n    }\n"
            },
            "sql": {}
        },
        "setClientAccount": {
            "sql": {},
            "script": {
                "params": [],
                "py": "SQL = \"\"\"\n    declare\n        accbln G_ACCBLN%%rowtype;\n    begin\n        t_log.penable; t_log.clean;\n        \n        select * into accbln from g_accbln where code=:accountNo;\n        \n        L_PKGLOANS.pAddNewAcc(\n            pDepId      => :dep_id, \n            pId         => :id, \n            pAccDepId   => accbln.dep_id,\n            pAccId      => accbln.id\n        );\n    end;\n\"\"\"\n\nfrom colvir_cbs.services import log\n\nwith initDbSession(application='bank').cursor() as cursor:\n    p = {\n        'dep_id': parameters['dep_id'],\n        'id': parameters['id'],\n        'accountNo': parameters['accountNo']\n    }\n    try:\n        cursor.execute(SQL, p)\n    except Exception as e:\n        raise UserException({\n            'message': 'Ошибка установки счета клиента по договору\\n%s' % e,\n            'trace': log.readLog()\n            \n        })\n        \n    data = {\n        'log': log.readLog()\n    }"
            }
        },
        "getList": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "import time\nfrom apng_core.db import fetchall\nimport logging\nlogger = logging.getLogger('loanapp')\n\n\ndef filterModelRank(filterModel):\n    default_rank = 1\n    ranks = {\n        'appId': 1000,\n        'appNo': 1000,\n        'fromDate': 0,\n        'toDate': 0,\n    }\n    \n    rank = 0\n    \n    for k in filterModel.keys():\n        r = ranks.get(k)\n        if r:\n            rank += r\n        else:\n            rank += default_rank\n    return rank\n\ndef doQuery(sql, params):\n    with initDbSession(application='bank').cursor() as cursor:\n        #print(sql)\n        start_time = time.time()\n        cursor.execute(sql, params)\n        #logger.debug('getApplicationList execute in %0.2f', time.time()-start_time)\n        \n        start_time = time.time()\n        d = fetchall(cursor)\n        #logger.debug('getApplicationList fetch in %0.2f', time.time()-start_time)\n\n    return d\n\ndef getApplicationList(params):\n    \n    rawSQL =\"\"\"\n      SELECT /*{index_sort}*/\n        r.DEP_ID \"dep_id\", \n        r.ID \"id\", \n        \n        -- Дата заявки\n        r.DOP \"dord\",\n        \n        -- Юридический номер заявки \n        re.APPNO \"code\",\n\n        -- Идентификатор заявки\n        re.APPID \"appId\",\n        \n        -- Номер заявки\n        re.APPNO \"appNo\",\n        \n        -- Код клиента\n        c.CODE \"cli_code\",\n        \n        -- Признак юридического лица \n        c.JURFL, \n        \n        -- Признак индивидуального предпринимателя\n        c.PBOYULFL,\n        \n        -- Наименование клиента\n        ch.NAME \"cli_name\",\n        \n        r.CLIDEP_ID CLI_DEP_ID, \n        r.CLI_ID,\n        ch.TAXCODE CLI_TAXCODE,\n        -- Код продукта\n        cls.CODE \"product_code\", \n        -- Наименование продукта\n        cls.LONGNAME \"product_name\",\n        -- Валюта\n        json_value(r.JSON, '$.app.currency') \"currency_code\",\n        \n        -- Сумма\n        r.REQ_SUM \"application_amount\",\n        -- Ставка\n        r.RATE_REQ \"rate_req\",\n        \n        d.CODE \"depCode\",\n        \n        -- Состояние заявки\n        re.STATE \"state\",\n        \n        -- Стадия рассмотрения заявки\n        re.REVIEWSTAGE \"stage\",\n        \n\n        json_value(r.JSON, '$.baseComponent') \"baseComponent\",\n        json_value(r.JSON, '$.appType') \"appType\",\n        json_value(r.JSON, '$.user.code') MODIFY_USER,\n        json_value(r.JSON, '$.user.code') \"created_user\",\n        json_value(r.JSON, '$.user.modified') \"created_date\",\n        \n        -- Сценарий рассмотрения заявки\n        nvl(\n            json_value(r.JSON, '$.app.reviewWorkflow'),\n            json_value(r.JSON, '$.product.options.reviewWorkflow')\n        ) \"scn\",\n        \n        \n        (select d.code\n         from L_DEAPUR l, L_PURDSC_STD d, T_DEACLS_STD t\n         where l.PUR_ID=d.ID and l.DCL_ID=t.ID \n           and t.CODE=cls.CODE and rownum=1) as purpose,\n        \n        (l_Pkgdeauniref.fGetClsRefValCode(t_pkgDea.fDclId(cls.CODE),\n        u_Pkguniref.fRefCode2Id('UZ_VIDCRED',0))) as vidcred,\n        \n        json_value(r.JSON, '$.app.purposeOfLoan') \"purposeOfLoan\",\n        json_value(r.JSON, '$.app.purposeOfLoanName') \"purposeOfLoanName\",\n        json_value(r.JSON, '$.app.typeOfLending') \"typeOfLending\",\n        json_value(r.JSON, '$.app.typeOfLendingName') \"typeOfLendingName\",\n        json_value(r.JSON, '$.app.legalAct') \"legalAct\",\n        json_value(r.JSON, '$.app.legalActName') \"legalActName\",\n       \n        r.json,\n       \n        null dummy\n       \n      FROM \n           G_CLI c, G_CLIHST ch,\n           T_DEACLS cls,\n           C_DEP_STD d,\n           L_REQDEA r, L_REQDEA_EXT re\n      WHERE r.DEP_ID=re.DEP_ID and r.ID=re.ID\n        and c.DEP_ID=ch.DEP_ID and c.ID=ch.ID and P_OPERDAY between ch.FROMDATE and ch.TODATE\n        and c.DEP_ID=r.CLIDEP_ID and c.ID=r.CLI_ID\n        and cls.ID=r.DCL_ID\n        and d.ID=r.DEP_ID\n        and exists (select 1 from DUAL where GRN$L_REQDEA$.fAccess(r.DEP_ID, r.ID, 3)=1)\n        \n    \"\"\"\n    \n    accessSQL = \"\"\"\n        exists (select 1 from DUAL where GRN$L_REQDEA$.fAccess(DEP_ID, ID, 3)=1)\n    \"\"\"\n    \n    dep_id     = params.get('dep_id')\n    ord_id     = params.get('id')\n    \n    if ord_id is None and params.get('request',{}).get('filterModel2', {}).get('idReq'):\n        import re\n        r = re.match(r'([0-9]+)([ ]*\\,[ ]*)([0-9]+)', params['request']['filterModel2']['idReq'])\n        if r and len(r.groups())==3:\n            dep_id=int(r[1])\n            ord_id=int(r[3])\n        else:\n            raise UserException('Неправильный формат идентификатора заявки, используйте dep_id,id')\n\n    \n    if dep_id and ord_id:\n        rawSQL = rawSQL + ' and r.DEP_ID=to_number(:dep_id) and r.ID=to_number(:ord_id)'\n        q  = doQuery(rawSQL, {\n            'dep_id': dep_id,\n            'ord_id': ord_id,\n        })\n    elif params.get('appId'):\n        rawSQL = rawSQL + ' and re.appId=to_number(:appId)'\n        q  = doQuery(rawSQL, {\n            'appId': params['appId'],\n        })\n        \n    else:\n        request = params.get('request')\n\n        queryParams = {}\n        \n        rank = 0\n        \n        if request:\n            filterModel2 = request.get('filterModel2', {})\n            if filterModel2.get('filterData'):\n                filterModel2 = filterModel2['filterData']\n            \n            rank = filterModelRank(filterModel2)\n\n            if (rank==0):\n                rawSQL = 'select * from (' + rawSQL + ')' + ' where \"dord\" between P_OPERDAY-2 and P_OPERDAY+7 '\n                \n                \n            if filterModel2:\n                from apng_core.aoa.services import filter as aoa\n                filterDef = aoa.buildFilterSql({\n                    'objectCode': 'loanapp',\n                    'filterData': filterModel2\n                })\n                rawSQL =  'select * from (' + rawSQL + ') '+ filterDef['sql']\n                queryParams = {\n                    **queryParams,\n                    **filterDef['params']\n                }\n        \n        #if rank==0:\n        #    import re\n        #    rawSQL = re.sub('{index_sort}', '+index_desc(r, ie_l_reqdea_sort)', rawSQL)\n        #else:\n        #    rawSQL = rawSQL + ' ORDER BY \"dord\" desc, \"appNo\" desc'\n        \n\n        rawSQL = rawSQL + ' ORDER BY \"dord\" desc, \"appNo\" desc'\n\n        \n        #rawSQL = 'select * from (' + rawSQL + ') where ' + accessSQL \n        \n        if request and request.get('startRow') is not None:\n            # Ограничение по количеству записей\n            startRow = int(request.get('startRow'))\n            endRow = int(request.get('endRow'))\n            if request:\n                rawSQL = rawSQL + \\\n                    ' OFFSET %s ROWS FETCH NEXT %s ROWS ONLY' % (startRow, endRow-startRow+1)\n        \n        q = doQuery(rawSQL, queryParams)\n        \n    return q\n    \nlst = getApplicationList(parameters)\n\ndata = []\nfor r in lst:\n    row = r\n    del row['JSON']\n    data.append(row)\n\n"
            }
        },
        "printApplication": {
            "sql": {},
            "script": {
                "params": [],
                "py": "#\n# Печать заявлений\n#\nfrom apng_core.aoa.services import execObjectMethod\n\ns = execObjectMethod({'object': 'settings', 'method': 'get'})['loanapp']\nif not s.get('printApplication'):\n    raise UserException('В настройках не определен метод печати заявлений')\n\ndata = execObjectMethod({**s['printApplication'], 'params': parameters})\n"
            }
        },
        "getDossierFileByType": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from apng_core.db import fetchone\ncon = initDbSession(application='bank')\nwith con.cursor() as cursor:\n    SQL = \"\"\"\n        select \n            d.DATABLOB, d.EXTFILE FILENAME\n        from L_REQDEADOS d, T_DEADOC DD\n        where d.DEP_ID=:dep_id and d.ID=:id \n            and dd.CODE=:code\n        and d.DOCTYPE=dd.ID\n    \"\"\"\n    \n    p = {\n        'dep_id': parameters.get('dep_id'),\n        'id': parameters.get('id'),\n        'code': parameters.get('docType'),\n    }\n    \n    cursor.execute(SQL, p)\n    d = fetchone(cursor)\n    \n    if d:\n        data = {\n            'fileName': d['FILENAME'],\n            'fileData': d['DATABLOB'].read()\n        }\n        "
            }
        },
        "resetAppNo": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "#\n# Сброс нумерации кредитных заявок\n#\n\ncon = initDbSession(application='bank')\n\nwith con.cursor() as cursor:\n    cursor.execute(\"\"\"\n        delete from C_NUMCODE where code='L_REQDEACODE'\n    \"\"\");\n\n\n"
            }
        },
        "cleanReview": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "#\n# Очистка заявки для повторного рассмотрения\n#\n\nok = 'loanapp:%s,%s' % (parameters['dep_id'], parameters['id'])\nstopProcess = parameters.get('stopProcess', False)\n\n#\n# Удалим старые процессы\n#\nfrom apng_core.aoa.services import execObjectMethod\nfrom apng_core.easyflow.models import Token, TokenAut, TokenVar, Journal\nfrom apng_core.easyflow.services import RunTimeService\n\nfrom django.db import transaction\nfrom django.conf import settings\n\nimport logging\nlogger = logging.getLogger('loanapp')\n\nlogger.debug('Очистка процессов заявки %s, stopProcess: %s', ok, stopProcess)\n\ntry:\n    with transaction.atomic(using=settings.APPS_DB['easyflow']):\n\n        # Удаляем все процессы \n        for p in Token.objects.filter(objectKey=ok):\n            if stopProcess:\n                RunTimeService.stopToken(p.id)\n            else:\n                RunTimeService.deleteProcessById(p.id)\n            \n        # Теперь чистим данные заявки\n        with transaction.atomic(using=settings.APPS_DB['bank']):\n            con = initDbSession(application='bank')\n            \n            #\n            # Возврат состояния заявки в начальное положение\n            #\n            execObjectMethod({\n                'object': 'app',\n                'method': 'setState',\n                'params': {\n                    'dep_id': parameters['dep_id'],\n                    'id': parameters['id'],\n                    'state': 'START',\n                    'stage': None,\n                }\n            })\n            \n            #\n            # Чистим данные в заявке\n            #\n            r = execObjectMethod({\n                'object': 'app', 'method': 'getApplicationJson',\n                'params': {'dep_id': parameters['dep_id'], 'id': parameters['id'],}\n            })\n            \n            if r.get('afs'):\n                r['afs']['results'] = {}\n            \n            r = execObjectMethod({\n                'object': 'app', 'method': 'saveApplicationJson',\n                'params': {'dep_id': parameters['dep_id'], 'id': parameters['id'], 'json': r}\n            })\n        \n        \n            #\n            # Чистим процесс и связи в CBS\n            #\n            with con.cursor() as cursor:\n            \n                params = {\n                    'dep_id': parameters['dep_id'],\n                    'id'    : parameters['id']\n                }\n                \n                #\n                # Отменяем все возможные операции по заявке\n                #\n        \n                cursor.execute(\"\"\"\n                        begin\n                            -- Чистим участников\n                            delete from T_PROCMEM where MAINFL='0' and id=(select ID from T_PROCMEM where DEP_ID=:dep_id and ORD_ID=:id and MAINFL='1');\n                            \n                            -- Удаляем связи с порожденными процессами\n                            delete from T_PROCINH where parent_id=(select id from T_PROCMEM where dep_id=:dep_id and ord_id=:id and mainfl='1');\n                            \n                            -- Удаляем из журнала операции\n                            update T_OPERJRN set undofl='1' where dep_id=:dep_id and ord_id=:id;\n                            delete from T_OPERJRN where dep_id=:dep_id and ord_id=:id;\n        \n                            --for r in (\n                            --    select* from COLVIR.t_operjrn \n                            --    where dep_id=:dep_id and ord_id=:id\n                            --        and undofl='0' and cancelfl='0'\n                            --    order by njrn desc\n                            --) loop\n                            --    COLVIR.t_pkgrunoprutl.pUndoOpr(r.id, r.njrn);\n                            --end loop;\n                            \n                        end;\n                    \"\"\",\n                    params\n                )\n                \nexcept Exception as e:\n    logger.error('Ошибка очистки процессов %s\\n%s', ok, e)\n    raise\n    \n"
            }
        },
        "repeatReview": {
            "sql": {},
            "script": {
                "params": [],
                "py": "from apng_core.aoa.services import execObjectMethod\n\n\nexecObjectMethod({\n    'object': 'loanapp',\n    'method': 'cleanReview',\n    'params': {\n        **parameters,\n        'stopProcess': True\n    },\n})\n\nexecObjectMethod({\n    'object': 'loanapp',\n    'method': 'startReview',\n    'params': parameters\n})\n"
            }
        },
        "startReview": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from django.db import transaction\nfrom django.conf import settings\nfrom apng_core.aoa.services import execObjectMethod\nfrom apng_core.easyflow.services import RuntimeService as rs\nfrom apng_core.easyflow.auth import Authentication\nfrom apng_core.auth import getUser\n\ninitDbSession(application='bank')\n\nif parameters.get('dep_id') and parameters.get('id'):\n    r = execObjectMethod({\n        'object': 'app', 'method': 'getApplicationJson',\n        'params': {'dep_id': parameters['dep_id'], 'id': parameters['id'],}\n    })\nelif parameters.get('appId'):\n    r = execObjectMethod({\n        'object': 'app', 'method': 'getApplicationJson',\n        'params': {'appId': parameters['appId']}\n    })\nelse:\n    raise UserException('Не заданы идентификаторы заявки для запуска процесса рассмотрения')\n\nif not r['app'].get('reviewWorkflow'):\n    raise UserException({\n        'message': 'Для заявки {appCode}, продукт {productCode} не определен сценарий рассмотрения'.format(\n            appCode = r['app']['code'],\n            productCode = r['app']['productCode']\n        )\n    })\n\nwith transaction.atomic(using=settings.APPS_DB['easyflow']):\n    with Authentication.setAuthenticatedUser(getUser()):\n        rs.startProcessByCode(r['app']['reviewWorkflow'], {'objectKey': 'loanapp:%s,%s' % (r['dep_id'], r['id'])})\n\n"
            }
        },
        "saveApplicationUI": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "\"\"\"\n    Сохранение кредитной заявки с клиента\n\"\"\"\ninitDbSession(application='bank')\n\nfrom loanapp.services.application import saveApplication\nfrom loanapp.services.dossier import saveDossierFiles\nfrom apng_core.aoa.services import execObjectMethod\n\nfrom django.db import transaction\nfrom django.conf import settings\n\n# Получение системных настроек\nappSettings = execObjectMethod({\n    'object': 'settings',\n    'method': 'get'\n})['loanapp']\n\nwith transaction.atomic(using=settings.APPS_DB['bank']):\n    if parameters.get('product', '{}').get('options', '{}').get('typeOfObjectOfCredit','') == 'REALTY':\n        parameters['app']['parameters']['L_PAYFIRST_R'] = parameters.get('guarantee', '{}').get('own_amount')\n    \n    data = saveApplication(parameters)\n    \n    idReqDep = data['cbs']['dep_id']\n    idReq = data['cbs']['id']\n    \n    if appSettings.get('identifyMyId') == True:\n    \n        #\n        # Сохранение фотографий myId созаёмщиков\n        #\n        for idx in range(1, 3):\n            coborrowers = parameters.get('coborrowers', []) or []\n            if idx <= len(coborrowers) and coborrowers[idx-1]['customer'].get('myId') is not None:\n                saveDossierFiles({\n                    'dep_id': idReqDep,\n                    'id': idReq,\n                    'files': [\n                        {\n                            'docType': 'CRED.FOTO_F%s' % (idx),\n                            'fileName': 'client_%s_photo' % (coborrowers[idx-1]['customer']['code']),\n                            'fileData': None,\n                            'base64Data': coborrowers[idx-1]['customer']['myId']['photo']\n                        }\n                    ]\n                })\n            else:\n                execObjectMethod({\n                    'object': 'loanapp',\n                    'method': 'deleteDossierFileByType',\n                    'params': {\n                        'dep_id': idReqDep,\n                        'id': idReq,\n                        'code': 'CRED.FOTO_F%s' % idx\n                    }\n                })\n        \n        #\n        # Сохранение фотографий myId поручителей\n        #\n        surerers = list(filter(lambda x: x['JSON']['type'] == 'SURETY', parameters['pledges']))\n        for idx in range(1,3):\n            if idx <= len(surerers) and surerers[idx-1]['JSON']['owner'].get('myId') is not None:\n                saveDossierFiles({\n                    'dep_id': idReqDep,\n                    'id': idReq,\n                    'files': [\n                        {\n                            'docType': 'CRED.FOTO.P%s' % (idx),\n                            'fileName': 'client_%s_photo' % (surerers[idx-1]['JSON']['owner']['code']),\n                            'fileData': None,\n                            'base64Data': surerers[idx-1]['JSON']['owner']['myId']['photo']\n                        }\n                    ]\n                })\n            else:                \n                execObjectMethod({\n                    'object': 'loanapp',\n                    'method': 'deleteDossierFileByType',\n                    'params': {\n                        'dep_id': idReqDep,\n                        'id': idReq,\n                        'code': 'CRED.FOTO.P%s' % (idx)\n                    }\n                })\n        \n\n    \n    #raise UserException(json.dumps(parameters['coborrowers'], indent=4, ensure_ascii=False))\n"
            }
        },
        "deleteDossierFileByType": {
            "sql": {},
            "script": {
                "params": [],
                "py": "con = initDbSession(application='bank')\nwith con.cursor() as cursor:\n    p = {\n        'DEP_ID': parameters.get('dep_id'),\n        'ID': parameters.get('id'),\n        'DOC_CODE': parameters.get('code'),\n    }\n    cursor.execute(\"\"\"\n        delete from L_REQDEADOS\n        where DEP_ID=:DEP_ID and ID=:ID\n          and DOCTYPE=(select ID from colvir.T_DEADOC_STD where CODE=:DOC_CODE)\n    /\"\"\", p)\n"
            }
        },
        "deleteCoborrower": {
            "sql": {},
            "script": {
                "params": [],
                "py": "from django.db import transaction\nfrom django.conf import settings\nfrom colvir_csl import Csl\n\ncon = initDbSession(application='bank')\n\nwith transaction.atomic(using=settings.APPS_DB['bank']):\n    with con.cursor() as cursor:\n        p = {\n            'dep_id': parameters['dep_id'],\n            'id': parameters['id'],\n            'nord': parameters['nord'],\n        }\n        SQL = \"\"\"\n            begin\n                delete from M_DEAPRS where DEP_ID=:dep_id and ID=:id and NORD=:nord;\n            end;\n        \"\"\"\n        \n        cursor.execute(SQL, p)\n        \n    with Csl('CSL_APP_URL') as csl:\n        r = csl.request('/ESInputData/DeleteRow', {\n            'path': 'MTH=>{},SHT=>OBJ_A'.format(parameters.get('MTH_CODE')),\n            'key' : '{},{},{}'.format(parameters['dep_id'], parameters['id'], parameters['nord']),\n        })\n        \n        if r.status_code != 200:\n            raise UserException(csl.extractLastError())\n"
            }
        },
        "updateDeaAttr": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "SQL_legalAct = \"\"\"\n    declare\n        idDeaDep number := :dea_dep_id;\n        idDea number := :dea_id;\n        cNPACode varchar2(30 BYTE) := :legalAct;\n    begin\n        -- Нормативно правовой акт\n        L_pkgDeaUniRef.pSetRefValOnly( \n            idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_NPA'),\n            u_pkguniref.fId('UZ_NPA', null, cNPACode)\n        );\n    end;\n\"\"\"\n\nSQL_typeOfLending = \"\"\"\n    declare\n        idDeaDep number := :dea_dep_id;\n        idDea number := :dea_id;\n        cVidCred varchar2(30 BYTE) := :typeOfLending;\n    begin\n       -- Вид кредитования\n        L_pkgDeaUniRef.pSetRefValOnly(\n            idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_VIDCRED'),\n            u_pkguniref.fId('UZ_VIDCRED', null, cVidCred)\n        );\n    end;\n\"\"\"\n\nfrom colvir_cbs.services import log\nfrom apng_core.db import fetchall\nerrorMsg= ''\n\nwith initDbSession(application='bank').cursor() as cursor:\n    if parameters['newDeaAttr'].get('legalAct'):\n        p = {\n            'dea_dep_id': parameters['dea_dep_id'],\n            'dea_id': parameters['dea_id'],\n            'legalAct':  parameters['newDeaAttr'].get('legalAct')\n        }\n        try:\n            cursor.execute(SQL_legalAct, p)\n            statusLegalAct = 'success'\n        except Exception as e:\n            statusLegalAct = 'error'\n            errorMsg += 'Ошибка изменения НПА договора \\n'\n        \n    if parameters['newDeaAttr'].get('purposeOfLoan'):\n        p = {\n            'purpose':  parameters['newDeaAttr'].get('purposeOfLoan')\n        }\n        \n        cursor.execute(\"\"\"\n                SELECT ID \"idPur\" FROM L_PURDSC WHERE CODE=:purpose\n                \"\"\",\n                p\n            )\n            \n        data = oracle.fetchall(cursor)\n        if len(data) != 1:\n            statusPurposeOfLoan = 'error'\n            errorMsg += 'Цель кредита не существует, \"{purpose}\" \\n ' .format( purpose = parameters['newDeaAttr'].get('purposeOfLoan') )\n        else:\n            p = {\n                'dea_dep_id': parameters['dea_dep_id'],\n                'dea_id': parameters['dea_id'],\n                'pur_id': data[0]['idPur']\n            }\n            try:\n                if parameters['isLeasing'] : \n                    cursor.execute(\"\"\" \n                        update ls_dea set PUR_ID = :pur_id where DEP_ID = :dea_dep_id and ID = :dea_id\n                    \"\"\", p)\n                else :\n                    cursor.execute(\"\"\" \n                        update L_DEA set PUR_ID = :pur_id where DEP_ID = :dea_dep_id and ID = :dea_id\n                    \"\"\", p)\n                statusPurposeOfLoan = 'success'\n            except Exception as e:\n                statusPurposeOfLoan = 'error'\n                errorMsg += 'Ошибка изменения цели кредитования договора \\n '\n            \n    if parameters['newDeaAttr'].get('typeOfLending'):\n        p = {\n            'dea_dep_id': parameters['dea_dep_id'],\n            'dea_id': parameters['dea_id'],\n            'typeOfLending':  parameters['newDeaAttr'].get('typeOfLending')\n        }\n        try:\n            cursor.execute(SQL_typeOfLending, p)\n            statusTypeOfLending = 'success'\n        except Exception as e:\n            statusTypeOfLending = 'error'\n            errorMsg += 'Ошибка изменения атрибутов договора \\n'\n        \n    data = {\n        'statusLegalAct': statusLegalAct if parameters['newDeaAttr'].get('legalAct') else None ,\n        'statusPurposeOfLoan': statusPurposeOfLoan if parameters['newDeaAttr'].get('purposeOfLoan') else None,\n        'statusTypeOfLending': statusTypeOfLending if parameters['newDeaAttr'].get('typeOfLending') else None,\n        'log': log.readLog(),\n        'errorMsg': errorMsg\n    }"
            }
        },
        "compareClientPhoto": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from apng_core.csl import Csl\nimport base64\nimport time\nfrom apng_core.aoa.services import execObjectMethod\n\n# Определене типа фотографии по имени файла или ресширению\ndef resolveFileType(fileName):\n    if not fileName:\n        raise UserException('Не задано имя файла или расширение')\n    # Конвертация данных файла досье клиента\n    fileType = None\n    if 'jpg' in fileName or  'jpeg' in fileName:\n        fileType = 'jpeg'\n    elif 'png' in fileName:\n        fileType = 'png'\n    else:\n        raise UserException('Фотография клиента не поддерживаемого типа: %s' % fileName)\n    \n    return fileType\n\n# Фотография, которую проверяем\ncheck_photo = parameters['check_photo']\n\nif not check_photo:\n    raise UserException('В подтверждение клиента не передана фотография')\n\n# Конвертация данных в base64\ncheck_photo_data = 'data:image/{fileType};base64,{data}'.format(\n    fileType = resolveFileType(check_photo['fileName']),\n    data = check_photo.get('base64Data') if check_photo.get('base64Data') else base64.b64encode(check_photo['fileData']).decode('ascii'),\n)\n\n#\n# Фото в досье клиента\n#\nclient_photo = execObjectMethod({\n    'object': 'cbs.dossier',\n    'method': 'getDocumentFileByType',\n    'params': {\n        'clientCode': parameters['client']['code'],\n        'docType': 'PHOTO_001'\n    }\n})\n\nif not client_photo:\n    raise UserError('В досье карточки клиента отсуствует фотография клиента')\n    \nclient_photo['fileData'] = 'data:image/{fileType};base64,{data}'.format(\n    fileType = resolveFileType(client_photo['fileExt']) if client_photo.get('fileExt') else 'dat',\n    data = base64.b64encode(client_photo['fileData']).decode('ascii'),\n)\n\n#\n# Вызов сервиса сравнения фотографий\n#\nwith Csl('CSL_APP_URL') as csl:\n    csl.timeout = (10, 300)\n    r = csl.request('/face-compare', {\n        'im1': client_photo['fileData'],\n        'im2': check_photo_data\n    })\n    \n    if r.status_code != 200:\n        try:\n            j = json.loads(r.text)\n        except Exception:\n            j = None\n            \n        if j and j.get('cause'):\n            raise UserError({\n                'message': '{img}: {msg}'.format(\n                    img = {'im1': 'Фотография в досье клиента', 'im2': 'Фотография клиента'}[j['cause']],\n                    msg = j.get('message') or 'Ошибка обработки'\n                )\n            })\n        else:\n            raise UserException(csl.extractLastError())\n        \n    if len(r.content)==0:\n        raise UserException('Получен пустой ответ от сервиса')\n    \n    res = json.loads(r.content)\n\n\n#raise UserException(json.dumps(res))\n\nif res['isSimilar'] == False:\n    raise UserError('Фотография клиента не совпадает с фотографией в досье карточки клиента')\n    \n\n#\n# Контроль через myID\n#\nexecObjectMethod({\n    'object': 'myId',\n    'method': 'compareClientPhoto',\n    'params': {\n        'appKey': parameters.get('appKey'),\n        'passData': parameters['client']['idDocument']['serials'] + parameters['client']['idDocument']['number'],\n        'birthDate': parameters['client']['birthday'][:10],\n        'agreedOnTerms': True,\n        'photoFromCamera': {\n            'front': check_photo_data\n        }\n    }\n})\n"
            }
        },
        "checkDossierPhoto": {
            "script": {
                "py": "#\n# Проверка фотографии клиента через myId\n# Фотографию берём из досье заявки\n#\nfrom apng_core.aoa.services import execObjectMethod\n\n# Зачитаем заявку\napp = execObjectMethod({\n    'object': 'app', 'method': 'getApplication',\n    'params': {\n        'dep_id': parameters['dep_id'],\n        'id': parameters['id']\n    }\n})\n\n# Зачитываем фотографию из досье заявки\ncheck_photo = execObjectMethod({\n    'object': 'loanapp',\n    'method': 'getDossierFileByType',\n    'params': {\n        'dep_id': parameters['dep_id'],\n        'id': parameters['id'],\n        'docType': 'CRED.FOTO_CLI',\n        'base64': True\n    }\n})\n\nif not check_photo:\n    raise UserException('Досье заявки не содержит фотографии клиента')\n\n\n#\n# Контроль через myID\n#\ndata = execObjectMethod({\n    'object': 'myId',\n    'method': 'compareClientPhoto',\n    'params': {\n        'appKey': {'dep_id': parameters['dep_id'], 'id': parameters['id']},\n        'passData': app['client']['idDocument']['serials'] + app['client']['idDocument']['number'],\n        'birthDate': app['client']['birthday'][:10],\n        'agreedOnTerms': True,\n        'photoFromCamera': {\n            'front': check_photo['fileData64']\n        }\n    }\n})\n\n"
            },
            "sql": {}
        },
        "lookupProductsFiz": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "SQL = \"\"\"\n    select distinct\n        -- Код продукта \n        t.CODE \"code\",\n        -- Наименование продукта \n        t.LONGNAME \"name\",\n        -- Валюта продукта        \n        valdsk.CODE \"currency\",\n    \n        case when (nvl(t_pkgdeaprm.fParDclLinked(t.ID ,'L_PNTGRACEOD'),0) > 0) and\n                  (nvl(t_pkgdeaprm.fParDclLinked(t.ID ,'L_PNTGRACEPRC'),0) > 0)\n            then 1 else 0\n        end pr_disc_period,\n        \n        c.sumshd,\n        T_PkgDclCliDis.fDclCliEnable(t.ID, :P_CLIDEPID, :P_CLIID) Fz,\n        L_pkgReq_Django.fPrcRatePossible(t.CODE,:P_DBEG,:P_DEND,valdsk.CODE) \"interest\",\n        l_Pkgdeauniref.fGetClsRefValCode(t.ID,colvir.u_Pkguniref.fRefCode2Id('UZ_VIDCRED',0)) VID,\n    \n        l_Pkgreq_Django.fGetMinSum('1',t.code,valdsk.code) \"minAmount\", \n        l_Pkgreq_Django.fGetMinSum('0',t.code,valdsk.code) \"maxAmount\",\n        \n        -- Нормативно правовой акт\n        L_PkgDeaUniRef.fGetClsRefValCode(t.id, U_PkgUniRef.fRefCode2Id( 'UZ_NPA')) legal_Act,\n        L_PkgDeaUniRef.fGetClsRefValLongname(t.id, U_PkgUniRef.fRefCode2Id( 'UZ_NPA')) legal_Act_Name\n       \n    from \n        tv_deacls t,\n        t_bop_dscr bd,\n        t_valdepcls val,       -- Валюта\n        t_val valdsk,\n        t_arlcls l,            -- Виды сумм к оплате/поступлению для продукта\n        t_arlclc c,            -- Правила расчета сумм к оплате/поступлению\n        t_arldsc a\n    where t.GROUPFL = 0\n        and nvl(t.ARCFL, 0) = 0\n        and nvl(t.ARESTFL,0) = 0\n        and t.BOP_ID = bd.ID\n        and bd.CODE in ('CS_CRED', 'CS_CR_LIN')\n        and t.ID = val.dcl_id\n        and val.val_id = valdsk.ID\n        and t.ID = l.dcl_id\n        and l.clc_id = c.ID\n        and a.ID = c.arl_id\n        and a.CODE = 'CR_PD'\n        and not exists ( \n            select * from colvir.T_DEACLS_STD where arcfl=1 connect by prior ID_HI=id start with id=t.ID\n        )  \n        and valdsk.code = NVL(:P_VAL_CODE, valdsk.code)\n        and (val.min_sum is null or :P_SUM is null or val.min_sum<=:P_SUM)\n        and (val.max_sum is null or :P_SUM is null or val.max_sum>=:P_SUM)\n        and T_PkgDclCliDis.fDclCliEnable(t.ID, :P_CLIDEPID, :P_CLIID) = 1\n        and T_pkgDclSell.fChkDepPeriod(t.ID, P_IDUS) = 1\n        and (:PUR_CODE is null or exists (\n               select 1\n               from  l_purdsc lp, l_deapur pd  \n               where lp.ID=pd.pur_id and pd.dcl_id=t.id and lp.CODE = :PUR_CODE\n            )\n        )\n        and (:P_DURATION is NULL or :P_DURATION_UNIT is null or (\n            :P_DURATION is not null and :P_DURATION_UNIT is not null and exists(\n                select 1 from t_dealnkprd pp, t_deaprd_std p\n                where p.time_type=:P_DURATION_UNIT and p.time_unit=:P_DURATION\n                    and pp.prd_id=p.id\n                    and pp.dcl_id=t.id\n            )\n        ))\n        -- Признак онлайн продукта\n        and T_PkgDeaPrm.fClsParByCode(t.id, 'L_ONLINE_PRODUCT', '0') = '0'\n        -- Технические овердрафты не продаются\n        and T_PkgDeaPrm.fClsParByCode(t.id, 'LL_NOVR', '0') = '0' and T_PkgDeaPrm.fClsParByCode(t.id, 'LL_TECHOVER', '0') = '0'\n    order by t.code, t.LONGNAME\n\"\"\"\n\nclass RollbackException(Exception):\n    pass\n\nfrom django.db import transaction\nfrom django.conf import settings\nfrom apng_core.db import fetchall\n\ncon = initDbSession(application='bank')\n\ntry:\n    with transaction.atomic(using=settings.APPS_DB['bank']):\n            \n        with con.cursor() as cursor:\n            p = {\n                'P_CLICODE': cursor.var(str).bind_parameter(cursor),\n                'P_JURFL': cursor.var(int).bind_parameter(cursor),\n                'P_CLIDEPID': cursor.var(int).bind_parameter(cursor),\n                'P_CLIID': cursor.var(int).bind_parameter(cursor),\n                'P_ERRORCODE': cursor.var(int).bind_parameter(cursor),\n                'P_ERRORMSG': cursor.var(str).bind_parameter(cursor),\n            }\n            p['P_JURFL'].setvalue(0, 0)\n                \n            cursor.callproc('l_pkgcredclc.pCreateClient', (), p)\n                \n            if p['P_ERRORCODE'].getvalue() != 0:\n                raise UserException(p['P_ERRORMSG'].getvalue()) \n    \n            dparams = {\n                'P_CLIDEPID': p['P_CLIDEPID'].getvalue(),\n                'P_CLIID': p['P_CLIID'].getvalue(),\n                'P_DBEG': None,\n                'P_DEND': None,\n                'P_VAL_CODE': parameters.get('currency'),\n                'P_SUM': parameters.get('amount'),\n                'PUR_CODE': parameters.get('purposeOfLoan'),\n                'P_DURATION': parameters.get('duration'),\n                'P_DURATION_UNIT': parameters.get('durationUnit'),\n            }\n                \n    \n            cursor.execute(SQL, dparams)\n            data = fetchall(cursor)\n        \n            raise RollbackException()\n            \nexcept RollbackException:\n    pass\n    \n"
            }
        },
        "updateConclusions": {
            "sql": {},
            "script": {
                "py": "import json\nfrom apng_core.json import WebJSONEncoder\n\ndef updateConclusions(params):\n    execObjectMethod({\n        'object': 'app', 'method': 'updateApplicationJson',\n        'params': {\n            'DEP_ID': params.get('dep_id'),\n            'ID': params.get('id'),\n            'attr': 'conclusions',\n            'JSON': json.dumps({\n                **params.get('conclusions') \n            }, cls=WebJSONEncoder)\n        }\n    })\n\nupdateConclusions(parameters) "
            }
        },
        "updateDecisions": {
            "script": {
                "py": "import json\nfrom django.utils import timezone\nfrom apng_core.json import WebJSONEncoder\n\ndef updateDecisions(params):\n    if not params.get('decisions'):\n        return\n    \n    for name in params['decisions']:\n        decision = params['decisions'][name]\n        \n        # Подставлям явно код органа принявшего решения, если не передали\n        if not decision.get('code'):\n            decision['code'] = name\n            \n        if decision.get('user') is None:\n            from apng_core.auth import getUser\n            u = getUser()\n            if u is not None:\n                decision['user'] = {\n                    'code': u.code,\n                    'name': u.name,\n                    'date': timezone.now(),\n                }\n    \n    execObjectMethod({\n        'object': 'app', 'method': 'updateApplicationJson',\n        'params': {\n            'DEP_ID': params.get('dep_id'),\n            'ID': params.get('id'),\n            'attr': 'decisions',\n            'JSON': json.dumps({\n                **params.get('decisions') \n            }, cls=WebJSONEncoder)\n        }\n    })\n\nupdateDecisions(parameters)\n"
            },
            "sql": {}
        },
        "calculateInterest": {
            "sql": {},
            "script": {
                "py": "import json\nfrom datetime import datetime\n\nimport logging\nlogger = logging.getLogger('loanapp')\n\n\ndef calculateInterest(params):\n\n\n    hasDuration = params.get('duration') is not None and params.get('durationUnit') is not None\n    hasDurationEndDate = params.get('durationEndDate')\n\n    if not (hasDuration or hasDurationEndDate):\n        raise Exception('Не задан срок для расчета ставки')\n    \n    if not params.get('clientCode'):\n        raise Exception('Не задан клиент для расчета ставки')\n    \n    if not params.get('productCode'):\n        raise Exception('Не задан код продукта для расчета ставки')\n    \n\n    if params.get('withDebug')==True:\n        logger.debug('calculate interest: %s', params)\n        \n        \n    durationEndDate = params.get('durationEndDate')\n    if isinstance(durationEndDate, str):\n        durationEndDate = datetime.fromisoformat(durationEndDate)\n\n    conn = initDbSession(application='bank')\n    with conn.cursor() as cursor:\n        p = {\n            'CLI_CODE': params.get('clientCode'),\n            'DCL_CODE': params.get('productCode'),\n            'AMOUNT': params.get('amount'),\n            'VAL_CODE': params.get('currency'),\n            'duration': params.get('duration'),\n            'durationUnit': params.get('durationUnit'),\n            'durationEndDate': durationEndDate,\n            'parameters': json.dumps(params.get('parameters'), ensure_ascii=False) if params.get('parameters') else None,\n            'classifiers': json.dumps(params.get('classifiers'), ensure_ascii=False) if params.get('classifiers') else None,\n            'withDebug': 1 if params.get('withDebug')==True else 0,\n            'interest': cursor.var(float),\n        }\n        try:\n            cursor.execute(\"\"\"\n                declare\n                    interest number;\n                    idCliDep number;\n                    idCli number;\n                    dFrom date;\n                    dTo date;\n                    idDeaDep number;\n                    idDeaOrd number;\n                    jParameters json_object_t;\n                    jClassifiers json_object_t;\n                    keys JSON_KEY_LIST;\n                    i integer;\n                begin\n    \n                    if :withDebug = 1 then\n                        t_log.penable; t_log.clean;\n                    end if;\n    \n                    savepoint calc_credit_interest;\n                    \n                    jParameters := treat(json_element_t.parse(nvl(:parameters, '{}')) as json_object_t);\n                    jClassifiers := treat(json_element_t.parse(nvl(:classifiers, '{}')) as json_object_t);\n                    \n                    G_PkgCli.pGetCliId(:CLI_CODE, idCliDep, idCli);\n                    \n                    dFrom := P_OPERDAY;\n                    if :duration is not null then\n                        dTo := C_PkgNewShd.AddTimeValue(dFrom, :durationUnit, :duration);\n                    elsif :durationEndDate is not null then\n                        dTo := :durationEndDate;\n                    else\n                        dTo := P_OPERDAY;\n                    end if;\n                    \n                    idDeaDep := P_IDDEP2;\n                    \n                    L_pkgCredClc.pSave(\n                        -- Подразделение договора\n                        p_DepId        => idDeaDep,\n                        -- Идентификатор созданного договора\n                        p_Id           => idDeaOrd,\n                        -- Код шаблона договора\n                        p_DclCode      => :DCL_CODE,\n                        -- Дата с\n                        p_FromDate     => dFrom,\n                        -- Дата по\n                        p_ToDate       => dTo,\n                        -- Код валюты\n                        p_ValCode      => :VAL_CODE,\n                        -- Сумма\n                        p_Amount       => :AMOUNT,\n                        -- Срок\n                        p_PrdId        => null,\n                        -- Подразделение клиента\n                        p_CliDepId     => idCliDep,\n                        -- Идентификатор клиента\n                        p_CliId        => idCli\n                    );\n    \n                    --\n                    -- Установка параметров договора\n                    --\n                    keys := jParameters.get_keys();\n                    if keys is not null then\n                        i := keys.first();\n                        while i is not null loop\n                            t_pkgdeaprm.pSetPrm(idDeaOrd, idDeaDep, keys(i), jParameters.get_string(keys(i)) );\n                            i := keys.next(i);\n                        end loop;\n                    end if;\n    \n                    --\n                    -- Установка классификаторов договора\n                    --\n                    keys := jClassifiers.get_keys();\n                    if keys is not null then\n                        i := keys.first();\n                        while i is not null loop\n                            L_pkgDeaUniRef.pSetRefValOnly(\n                                idDeaDep, idDeaOrd, u_pkguniref.fRefCode2Id(keys(i)),\n                                u_pkguniref.fId(keys(i), null, jClassifiers.get_string(keys(i)) )\n                            );\n                            i := keys.next(i);\n                        end loop;\n                    end if;\n    \n                    \n                    select\n                        t_pkgarl.fPcnVal(d.dep_id, d.id, ad.PCN_ID) into interest\n                    from \n                        t_dea d, tv_arldea ad\n                    where d.dep_id = ad.dep_id and d.id = ad.ord_id\n                        and ad.CODE in ('CR_INTER','LS_INT')\n                        and d.dep_id = idDeaDep and d.id = idDeaOrd\n                    ;\n                    \n                    rollback to calc_credit_interest;\n                    \n                    :interest := interest;\n                exception when others then\n                    rollback to calc_credit_interest;\n                    raise;\n                end;\n            /\"\"\", p)\n        except Exception as e:\n            log = AO.bank_log.readLog()\n            from apng_core.exceptions import UserException\n            raise UserException({\n                'message': 'Ошибка расчета процентной ставки\\nКлиент: {clientId}, продукт {productCode}\\n\\n{message}'.format(\n                    clientId=params.get('clientCode'),\n                    productCode=params.get('productCode'),\n                    message=e\n                ),\n                'trace': log \n            })\n            \n\n        if params.get('withDebug') == True:\n            logger.debug('calculate interest %s', AO.bank_log.readLog())\n        \n    return p['interest'].getvalue()\n    \ndata = calculateInterest(parameters)\n\n"
            }
        },
        "linkToDea": {
            "script": {
                "py": "#\n# Установка связи заявки с договором\n#\n\nwith initDbSession(application='bank').cursor() as c:\n    c.execute(\"\"\"\n        declare\n            r L_REQDEA%%rowtype;\n            pm T_PROCMEM%%rowtype;\n            nNJRN number;\n            idDea number;\n            dea_code T_ORD.CODE%%type;\n        begin\n            select * into r from L_REQDEA where DEP_ID=:req_dep_id and ID=:req_id;\n            select * into pm from T_PROCMEM where DEP_ID=:req_dep_id and ORD_ID=:req_id and MAINFL='1';\n            \n            --\n            -- Ищем ранее созданный договор. Возможно из за порванной транзакции\n            --\n            select \n                (select ord_id from t_procmem where id=pm.id and MAINFL='0')\n            into idDea from dual;\n    \n            if idDea is null then\n                -- Добавляем к процессу заявки псевдо операцию\n                declare\n                begin\n                    select nvl(max(NJRN)+1, 1) into nNJRN from T_OPERJRN where ID=pm.ID;\n                    insert into T_OPERJRN(\n                        ID, NJRN, BOP_ID, \n                        NOPER,\n                        DEP_ID, ORD_ID,\n                        DOPER, TUS_ID,\n                        DSCR \n                    )values(\n                        pm.ID, nNJRN, pm.BOP_ID,\n                        (select NORD from T_SCEN_STD where ID=pm.BOP_ID and CODE='_RUN_ANL_ACM_'),\n                        :req_dep_id, :req_id,\n                        P_OPERDAY, p_idus,\n                        'Создание договора'\n                    );\n                end;\n            else\n                -- Берём последнюю операцию по заявке\n                select max(NJRN) into nNJRN from T_OPERJRN where ID=pm.ID;\n            end if;\n        \n            -- Зачитываем номер договора\n            select CODE into dea_code from T_ORD where DEP_ID=:dea_dep_id and ID=:dea_id;\n            \n            \n            -- Добавление участника в процесс заявки\n            declare\n                op BS_OPERATION.SelfAttr;\n                memCnt integer;\n            begin\n                select count(*) into memCnt from t_procmem where id=pm.id and mainfl=0 and dep_id=:dea_dep_id and ord_id=:dea_id;\n                if memCnt = 0 then\n                    BS_OPERATION.read_process(op, pm.id);\n                    BS_OPERATION.add_mem(op, P_IDDEP=>:dea_dep_id, p_idord=>:dea_id, p_nmem=>BS_BOP.fGetPosId(pm.BOP_ID, 'DEA'));\n                end if;\n            end;\n        \n            -- устанавливаем id заявки на договоре\n            T_PkgDeaPrm.pSetPrm(:dea_id, :dea_dep_id,\n                'L_UNNUMBER', \n                json_value(r.json, '$.app.appId')\n            );\n        \n        \n        end;\n    \"\"\", {\n        'req_dep_id'    : parameters['req_dep_id'],\n        'req_id'        : parameters['req_id'],\n        'dea_dep_id'    : parameters['dea_dep_id'],\n        'dea_id'        : parameters['dea_id'],\n    })\n    \n    if parameters.get('appState'):\n        execObjectMethod({\n            'object': 'app', 'method': 'setState',\n            'params': {\n                'dep_id'    : parameters['req_dep_id'],\n                'id'        : parameters['req_id'],\n                'state'     : parameters['appState'],\n            }\n        })\n        \n    \n    "
            },
            "sql": {}
        },
        "checkIncomeResult": {
            "sql": {},
            "script": {
                "py": "res = { 'needAccept': False, 'needRework': False }\n\ndef getCompanies(payments):\n    lastRow = payments[-1]\n    companies = filter(\n        lambda r: lastRow['year'] == r['year'] and lastRow['period'] == r['period'],\n        payments\n    )\n    return list(companies);\n\nfor client in parameters['clients']:\n    if client['status'] == 'noPayments' or client['status'] is None:\n        client['income']['hasPayments'] = False\n    elif client['status'] == 'hasPayments':\n        # Получены отчисления, определим работодателя\n        if client['income'].get('report_asoki_25'):\n            #\n            # Отчет из АСОКИ\n            #\n            incomes = client['income']['report_asoki_25']['report'].get('incomes', {})\n            if isinstance(incomes, dict):\n                income = incomes.get('income', [])\n                last_period = None\n                if isinstance(income, dict):\n                    income = [income,]\n                    last_period = income\n                    \n                if len(income)>0:\n                    last_period = income[-1]\n                    \n                    companies = list(filter(\n                        lambda r: last_period['period'] == r['period'], income\n                    ))\n                    def check_salary(s):\n                        if s.get('income_summa'):\n                            return float(s['income_summa']) > 0\n                        return False\n                        \n                    companiesWithSalary = list(filter(check_salary, companies))\n                    \n                    if len(companiesWithSalary) > 0:\n                        last_period = companiesWithSalary[-1]\n                    else:\n                        last_period = None\n                        res['needRework'] = True\n\n                if last_period:\n                    client['income']['companyInn'] = last_period['org_inn']\n                    client['income']['companyName'] = last_period['orgname']\n                else:\n                    client['income']['companyInn'] = None\n                    client['income']['companyName'] = None\n                    \n            else:\n                # АСОКИ может вернуть строку вместо объекта. пропускаем\n                client['income']['hasPayments'] = False\n                \n        elif client['income'].get('payments'):\n            #\n            # Отчет из DEFEN или ЭП\n            #\n            companies = getCompanies(client['income']['payments'])\n            companiesWithSalary = list(filter(lambda x: x['salary']>0, companies))\n            \n            #raise Exception(json.dumps(companiesWithSalary))\n            \n            if len(companies)>1:\n                # На случай, если в последнем периоде несколько мест работы\n                client['income']['companies'] = companies\n            \n            # Подставим место работы\n            if len(companiesWithSalary)==1:\n                last_payment = companiesWithSalary[0]\n            elif len(companies)==1:\n                last_payment = companies[0]\n            elif len(companies)>1:\n                last_payment = companies[0]\n                res['needRework'] = True\n            else:\n                last_payment = None\n                \n            if last_payment:\n                client['income']['companyInn'] = last_payment['company_tin']\n                client['income']['companyName'] = last_payment['company_name'].lstrip() if last_payment['company_name'] else None\n            else:\n                client['income']['companyInn'] = None\n                client['income']['companyName'] = None\n                \n    # Если подтверждены платежи, то установим и признак работающего\n    if client['income']['hasPayments']:\n        client['income']['hasWork'] = True\n    \n    if client['income']['hasPayments'] == False and client['income']['hasWork'] == True:\n        if not client['income'].get('income'):\n            # Нужно заполнить доходы\n            res['needRework'] = True\n        res['needAccept'] = True\n        \n    if client['income']['hasPayments'] == True and client['income']['hasWork'] == True:\n        res['needRework'] = False   \n    \ndata = res"
            }
        }
    },
    "lists": {
        "default": {
            "columns": {
                "appDate": {
                    "title": "Number/Date",
                    "width": 160,
                    "fields": {
                        "appNo": {},
                        "dord": {
                            "format": "date"
                        }
                    }
                },
                "appId": {
                    "title": "Id",
                    "width": 120
                },
                "clientAndProduct": {
                    "title": "Customer/Product",
                    "flex": 1,
                    "fields": {
                        "cli_name": {},
                        "product_name": {}
                    }
                },
                "amount": {
                    "title": "Amount",
                    "cellStyle": {
                        "textAlign": "right"
                    },
                    "fields|": {
                        "application_amount": {
                            "format": "currency"
                        },
                        "currency_code": {}
                    }
                },
                "state": {
                    "title": "State",
                    "width": 175,
                    "control": "chip",
                    "decode": {
                        "START": {
                            "value": "Created",
                            "color": "#2D9CDB"
                        },
                        "ON_REVIEW": {
                            "value": "On review",
                            "color": "#F2994A"
                        },
                        "CREDEA": {
                            "value": "Deal created",
                            "color": "#00AA44"
                        },
                        "DEA_REGISTERED": {
                            "value": "Deal signed",
                            "color": "#00AA44"
                        },
                        "REFUSAL_BANK": {
                            "value": "Declined",
                            "color": "#EB5757"
                        },
                        "REFUSAL_CLI": {
                            "value": "Customer refused",
                            "color": "#EB5757"
                        },
                        "CANCELED": {
                            "value": "On hold",
                            "color": "#EB5757"
                        }
                    }
                },
                "depCode": {
                    "title": "Department",
                    "width": 180
                },
                "user": {
                    "title": "Performer",
                    "width": 140,
                    "fields": {
                        "created_user": {},
                        "created_date": {
                            "format": "datetime"
                        }
                    }
                },
                "stage": {
                    "title": "Review stage",
                    "width": 160,
                    "decode": {
                        "START": {
                            "value": "Started"
                        },
                        "CHECK": {
                            "value": "Check"
                        },
                        "REGNEW": {
                            "value": "Registration"
                        },
                        "STOPFACTORS1": {
                            "value": "Stop factors 1"
                        },
                        "STOPFACTORS2": {
                            "value": "Stop factors 2"
                        },
                        "STOPFACTORS3": {
                            "value": "Stop factors 3"
                        },
                        "SCORING": {
                            "value": "Scoring"
                        },
                        "PREANALYSE": {
                            "value": "Prepare analizys"
                        },
                        "STOPFACTORS": {
                            "value": "Stop factors"
                        },
                        "CONCLUSIONS": {
                            "value": "Conclusions"
                        },
                        "DECISIONS": {
                            "value": "Decisions"
                        },
                        "FIN": {
                            "value": "Completing"
                        },
                        "COMPLETED": {
                            "value": "Completed"
                        },
                        "CANCELED": {
                            "value": "Canceled"
                        }
                    },
                    "cellStyle": {
                        "lineHeight": 1.2,
                        "whiteSpace": "normal",
                        "display": "flex",
                        "alignItems": "center"
                    }
                }
            },
            "id": "appId",
            "actions": [
                {
                    "title": "Refresh",
                    "icon": "refresh",
                    "mini": true,
                    "command": {
                        "type": "standard",
                        "call": "refresh"
                    }
                },
                {
                    "title": "View",
                    "icon": "view",
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "`${_('Application')} ${$listRow.appNo} ${_('at')} ${$formatters.date($listRow.dord)}`",
                        "params": {
                            "object": "app",
                            "form": "appEditTask",
                            "objectKey$": "{dep_id: $listRow.dep_id, id: $listRow.id}"
                        }
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Journal",
                    "icon": "history",
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "`${_('Application journal')} ${$listRow.appNo}, ${$listRow.cli_name}`",
                        "params": {
                            "object": "easyflow",
                            "form": "objectJournalTask",
                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                        }
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Operations",
                    "split": true,
                    "actions": [
                        {
                            "title": "Customer refuse",
                            "command": {
                                "call": "APP_DECLINE_CLIENT",
                                "type": "workflow",
                                "params": {
                                    "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                }
                            },
                            "confirm": {
                                "message$": "`${_('Do execute customer refuse for application')} ${$listRow.appNo}?`",
                                "yes": "Yes",
                                "no": "No"
                            },
                            "visible$": "['CREDEA'].includes($listRow.state)"
                        },
                        {
                            "title": "Cancel review",
                            "command": {
                                "call": "APP_CANCEL_REVIEW",
                                "type": "workflow",
                                "params": {
                                    "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                }
                            },
                            "confirm": {
                                "message$": "`${_('Do cancel application review')} ${$listRow.appNo}`",
                                "yes": "Yes",
                                "no": "No"
                            },
                            "visible$": "['START', 'ON_REVIEW', 'CREDEA'].includes($listRow.state) && user.groups.includes('GO_ADMINS') "
                        },
                        {
                            "title": "Set government decision",
                            "command": {
                                "type": "workflow",
                                "call": "APP_SET_GOVERNMENT",
                                "params": {
                                    "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                }
                            },
                            "confirm": {
                                "message$": "`${_('Do set property \"Government decision\" for application')} ${$listRow.appNo}`",
                                "yes": "Yes",
                                "no": "No"
                            },
                            "visible$": "['START'].includes($listRow.state) && user.groups.includes('LOAN_ADMINS')"
                        },
                        {
                            "title": "Change initiator",
                            "command": {
                                "type": "task",
                                "call": "/aoa/ObjectTask",
                                "title$": "`${_('Do you want to change application initiator')} ${$listRow.appNo}, ${$listRow.cli_name}?`",
                                "params": {
                                    "object": "loanapp",
                                    "form": "changeInitiator",
                                    "mem$": "{user: $listRow.created_user, appId: $listRow.appId, objectKey:`loanapp:${$listRow.dep_id},${$listRow.id}`}"
                                }
                            },
                            "visible$": "user.superuser || user.groups.includes('LOAN_ADMINS')"
                        },
                        {
                            "title": "Generate new application Id",
                            "command": {
                                "call": "APP_RENEW_ID",
                                "type": "workflow",
                                "params": {
                                    "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                }
                            },
                            "confirm": {
                                "message$": "`${_('Do you want to generate new claim_id')} ${$listRow.appNo}?`",
                                "yes": "Да",
                                "no": "Нет"
                            },
                            "visible$": "user.superuser"
                        },
                        {
                            "title": "Requests",
                            "command": {
                                "type": "task",
                                "call": "/aoa/ObjectListTask",
                                "title$": "`${_('Application requests')} ${$listRow.appNo}`",
                                "params": {
                                    "object": "ext.request",
                                    "list": "default",
                                    "listParams": {
                                        "app": {
                                            "dep_id$": "$listRow.dep_id",
                                            "id$": "$listRow.id"
                                        }
                                    }
                                }
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "Technical information",
                            "command": {
                                "type": "js",
                                "js": "frontend.displayInfo(JSON.stringify($listRow, null, 4));"
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "Priveliged",
                            "split": true,
                            "actions": [
                                {
                                    "title": "Reconsideration",
                                    "command": {
                                        "type": "js",
                                        "js": "backend.post('/aoa/execObjectMethod', {object: 'loanapp', method: 'repeatReview', params: {dep_id: $listRow.dep_id, id: $listRow.id}})"
                                    }
                                },
                                {
                                    "title": "Delete processes",
                                    "command": {
                                        "type": "js",
                                        "js": "backend.post('/aoa/execObjectMethod', {object: 'loanapp', method: 'cleanReview', params: {dep_id: $listRow.dep_id, id: $listRow.id}})"
                                    },
                                    "confirm": {
                                        "message$": "`Удалить все процессы для заявки ${$listRow.appNo}`",
                                        "yes": "Да",
                                        "no": "Нет"
                                    },
                                    "visible$": "user.code == 'SMM' || user.code == 'KMATVEYONOK'"
                                },
                                {
                                    "title": "Link to contract",
                                    "command": {
                                        "type": "js",
                                        "js": "frontend.dialog({object: 'loanapp', form: 'linkToDeaDialog', mem: {}, params: {code: $listRow.appNo, dep_id: $listRow.dep_id, id: $listRow.id} });",
                                        "disableUpdate": true
                                    },
                                    "visible$": "user.superuser || user.groups.includes('LOAN_ADMINS')"
                                },
                                {
                                    "title": "Modify JSON",
                                    "command": {
                                        "type": "task",
                                        "call": "/aoa/ObjectTask",
                                        "title$": "`Коррекция заявки ${$listRow.appNo}`",
                                        "params": {
                                            "object": "app",
                                            "form": "appEditJsonTask",
                                            "appKey": {
                                                "dep_id$": "$listRow.dep_id",
                                                "id$": "$listRow.id"
                                            }
                                        }
                                    }
                                }
                            ],
                            "visible$": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                        },
                        {
                            "title": "Reregistration",
                            "split": true,
                            "actions": [
                                {
                                    "title": "Регистрация в ГРКИ онлайн",
                                    "command": {
                                        "call": "NIKI_REGISTER_ONLINE",
                                        "type": "workflow",
                                        "params": {
                                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`",
                                            "updateClient": false,
                                            "localReview": false
                                        }
                                    },
                                    "confirm": {
                                        "message$": "`Выполнить регистрацию в ГРКИ онлайн заявки ${$listRow.appNo}`",
                                        "yes": "Да",
                                        "no": "Нет"
                                    },
                                    "visible$": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                                },
                                {
                                    "title": "Регистрация в АСОКИ",
                                    "command": {
                                        "call": "KATM_REGISTER",
                                        "type": "workflow",
                                        "params": {
                                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`",
                                            "updateClient": false,
                                            "localReview": false
                                        }
                                    },
                                    "confirm": {
                                        "message$": "`Выполнить регистрацию в АСОКИ заявки ${$listRow.appNo}`",
                                        "yes": "Да",
                                        "no": "Нет"
                                    },
                                    "visible$": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                                },
                                {
                                    "title": "Регистрация отказа в ГРКИ онлайн",
                                    "command": {
                                        "call": "NIKI_REJECT_ONLINE",
                                        "type": "workflow",
                                        "params": {
                                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                        }
                                    },
                                    "confirm": {
                                        "message$": "`Выполнить регистрацию отказа в ГРКИ онлайн заявки ${$listRow.appNo}`",
                                        "yes": "Да",
                                        "no": "Нет"
                                    },
                                    "visible$": "user.superuser || user.groups.includes('LOAN_ADMINS')"
                                },
                                {
                                    "title": "Регистрация отказа в АСОКИ",
                                    "command": {
                                        "call": "KATM_REJECT",
                                        "type": "workflow",
                                        "params": {
                                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                        }
                                    },
                                    "confirm": {
                                        "message$": "`Выполнить регистрацию отказа в АСОКИ заявки ${$listRow.appNo}`",
                                        "yes": "Да",
                                        "no": "Нет"
                                    },
                                    "visible$": "user.superuser || user.groups.includes('LOAN_ADMINS')"
                                },
                                {
                                    "title": "Изменение атрибутов заявки",
                                    "command": {
                                        "type": "workflow",
                                        "call": "APP_CHANGE_ATTR",
                                        "params": {
                                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                        }
                                    },
                                    "visible$": "['ON_REVIEW', 'CREDEA'].includes($listRow.state) && (user.superuser || user.groups.includes('LOAN_ADMINS'))"
                                },
                                {
                                    "title": "Изменение решения по заявке",
                                    "command": {
                                        "js": "frontend.dialog({object: 'app', form: 'modifyDecisionDialog', mem: {}, params: {code: $listRow.appNo, dep_id: $listRow.dep_id, id: $listRow.id} });",
                                        "disableUpdate": true,
                                        "visible$": "user.groups.includes('GO_ADMINS') || user.groups.includes('LOAN_ADMINS')"
                                    }
                                }
                            ],
                            "visible$": "user.superuser || user.groups.includes('LOAN_ADMINS')"
                        }
                    ],
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Delete",
                    "icon": "delete",
                    "command": {
                        "type": "js",
                        "js": "backend.post('/aoa/execObjectMethod', {object: 'app', method: 'deleteApplication', params: {dep_id: $listRow.dep_id, id: $listRow.id}})"
                    },
                    "confirm": {
                        "message$": "`Удалить заявку ${$listRow.appNo}, ${$listRow.cli_name} ?`",
                        "yes": "Да",
                        "no": "Нет"
                    },
                    "disabled$": "$listRow?.state != 'START'"
                }
            ],
            "filter": {
                "form": {
                    "style": {
                        "width": "360px",
                        "overflow": "hidden",
                        "paddingRight": "0px"
                    },
                    "title": "Filter",
                    "className": "panel vertical",
                    "$": {
                        "@fields": {
                            "className": "vertical",
                            "style": {
                                "paddingRight": "8px",
                                "overflowY": "auto"
                            },
                            "$": {
                                "@client": {
                                    "className": "vertical",
                                    "title": "Customer",
                                    "$": {
                                        "nibbd": {
                                            "control": "TextEdit",
                                            "label": "NIBBD"
                                        },
                                        "inn": {
                                            "control": "TextEdit",
                                            "label": "TIN"
                                        },
                                        "pinfl": {
                                            "control": "TextEdit",
                                            "label": "PINFL"
                                        },
                                        "clientCode": {
                                            "control": "TextEdit",
                                            "label": "Code"
                                        },
                                        "clientName": {
                                            "control": "TextEdit",
                                            "label": "Name"
                                        },
                                        "clientType": {
                                            "label": "Customer type",
                                            "control": "SelectList",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "value": "00",
                                                        "name$": "console.log('eval', arguments['0']) || _('Individual')"
                                                    },
                                                    {
                                                        "value": "10",
                                                        "name$": "_('Legal entity')"
                                                    },
                                                    {
                                                        "value": "01",
                                                        "name$": "_('Individual entrepreneur')"
                                                    },
                                                    {
                                                        "value": "11",
                                                        "name$": "_('Legal entity + IE')"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                },
                                "@app": {
                                    "title": "Application",
                                    "className": "vertical",
                                    "$": {
                                        "@period": {
                                            "$": {
                                                "@chips": {
                                                    "$": {
                                                        "week": {
                                                            "label": "Week",
                                                            "action": {
                                                                "name": "setWeek"
                                                            },
                                                            "control": "Chip",
                                                            "controlProps": {
                                                                "style": {
                                                                    "height": "24px"
                                                                }
                                                            }
                                                        },
                                                        "month": {
                                                            "label": "Month",
                                                            "action": {
                                                                "name": "setMonth"
                                                            },
                                                            "control": "Chip",
                                                            "controlProps": {
                                                                "style": {
                                                                    "height": "24px"
                                                                }
                                                            }
                                                        },
                                                        "3months": {
                                                            "label": "3 Months",
                                                            "action": {
                                                                "name": "set3Months"
                                                            },
                                                            "control": "Chip",
                                                            "controlProps": {
                                                                "style": {
                                                                    "height": "24px"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "className": "horizontal"
                                                },
                                                "@dates": {
                                                    "$": {
                                                        "fromDate": {
                                                            "label": "From",
                                                            "style": {
                                                                "flexGrow": 1
                                                            },
                                                            "control": "DateEdit"
                                                        },
                                                        "toDate": {
                                                            "label": "To",
                                                            "style": {
                                                                "flexGrow": 1
                                                            },
                                                            "control": "DateEdit"
                                                        }
                                                    },
                                                    "className": "horizontal"
                                                }
                                            },
                                            "actions": {
                                                "setWeek": {
                                                    "jsScript": "let dt = new Date(); let df = new Date(); df.setDate(df.getDate()-7); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                                },
                                                "setMonth": {
                                                    "jsScript": "let dt = new Date(); let df = new Date(); df.setMonth(df.getMonth()-1); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                                },
                                                "set3Months": {
                                                    "jsScript": "let dt = new Date(); let df = new Date(); df.setMonth(df.getMonth()-3); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                                }
                                            },
                                            "className": "vertical"
                                        },
                                        "appNo": {
                                            "label": "Legal number",
                                            "control": "TextEdit"
                                        },
                                        "appId": {
                                            "control": "TextEdit",
                                            "label": "Unique number"
                                        },
                                        "deaNo": {
                                            "control": "TextEdit",
                                            "label": "Contract No"
                                        },
                                        "state": {
                                            "label": "State",
                                            "control": "SelectList",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "value": "START",
                                                        "name": "Заявка создана"
                                                    },
                                                    {
                                                        "value": "ON_REVIEW",
                                                        "name": "На рассмотрении"
                                                    },
                                                    {
                                                        "value": "CREDEA",
                                                        "name": "Создан договор"
                                                    },
                                                    {
                                                        "value": "DEA_REGISTERED",
                                                        "name": "Договор подписан"
                                                    },
                                                    {
                                                        "value": "REFUSAL_BANK",
                                                        "name": "Отказ банка"
                                                    },
                                                    {
                                                        "value": "REFUSAL_CLI",
                                                        "name": "Отказ клиента"
                                                    },
                                                    {
                                                        "value": "CANCELED",
                                                        "name": "Отменена"
                                                    }
                                                ]
                                            }
                                        },
                                        "purpose": {
                                            "label": "Purpose of loan",
                                            "control": "ObjectReference",
                                            "controlProps": {
                                                "object": "purposeOfLoan",
                                                "reference": "default"
                                            },
                                            "controlOpts": {
                                                "valueField": "code"
                                            }
                                        },
                                        "vidcred": {
                                            "label": "Type of loan",
                                            "control": "ObjectReference",
                                            "controlProps": {
                                                "object": "vidCred",
                                                "reference": "default"
                                            },
                                            "controlOpts": {
                                                "valueField": "code"
                                            }
                                        },
                                        "stage": {
                                            "control": "SelectList",
                                            "label": "Review stage",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "value": "START",
                                                        "name": "Начало рассмотрения"
                                                    },
                                                    {
                                                        "value": "CHECK",
                                                        "name": "Контроль ввода"
                                                    },
                                                    {
                                                        "value": "REGNEW",
                                                        "name": "Регистрация заявки"
                                                    },
                                                    {
                                                        "value": "STOPFACTORS1",
                                                        "name": "Стоп факторы 1"
                                                    },
                                                    {
                                                        "value": "STOPFACTORS2",
                                                        "name": "Стоп факторы 2"
                                                    },
                                                    {
                                                        "value": "STOPFACTORS3",
                                                        "name": "Стоп факторы 3"
                                                    },
                                                    {
                                                        "value": "SCORING",
                                                        "name": "Скоринг"
                                                    },
                                                    {
                                                        "value": "PREANALYSE",
                                                        "name": "Подготовка к анализу"
                                                    },
                                                    {
                                                        "value": "STOPFACTORS",
                                                        "name": "Стоп факторы"
                                                    },
                                                    {
                                                        "value": "CONCLUSIONS",
                                                        "name": "Получение заключений"
                                                    },
                                                    {
                                                        "value": "DECISIONS",
                                                        "name": "Принятие решения"
                                                    },
                                                    {
                                                        "value": "FIN",
                                                        "name": "Завершение"
                                                    },
                                                    {
                                                        "value": "COMPLETED",
                                                        "name": "Завершено"
                                                    },
                                                    {
                                                        "value": "CANCELED",
                                                        "name": "Отменено"
                                                    }
                                                ]
                                            }
                                        },
                                        "department": {
                                            "label": "Department",
                                            "control": "ObjectReference",
                                            "controlProps": {
                                                "object": "department",
                                                "reference": "default"
                                            },
                                            "controlOpts": {
                                                "valueField": "code"
                                            }
                                        },
                                        "product": {
                                            "label": "Product",
                                            "control": "ObjectReference",
                                            "controlProps": {
                                                "object": "product",
                                                "reference": "default",
                                                "params": {
                                                    "filterParent$": "context.productsRootFolder || backend.post('/aoa/execObjectMethod', {object: 'settings', method: 'get'}, {useCache: true, silent: true}).then(r=>{context.productsRootFolder = r?.loanapp?.productsRootFolder; forceUpdate();}) && undefined"
                                                }
                                            },
                                            "controlOpts": {
                                                "valueField": "code"
                                            }
                                        },
                                        "@product_list": {
                                            "$": {
                                                "|product_list": {
                                                    "className": "vertical",
                                                    "$": {
                                                        ".ap": {
                                                            "control": "ActionPanel",
                                                            "params": {
                                                                "app$": "params.app"
                                                            },
                                                            "controlOpts": {
                                                                "actions": [
                                                                    {
                                                                        "title": "Add",
                                                                        "icon": "add",
                                                                        "mini": true,
                                                                        "action": {
                                                                            "js": "context.selectedProduct = null; frontend.dialog({object: 'product', form: 'productSelectDialog', mem: {}, params: {filterParent: context.productsRootFolder} });"
                                                                        }
                                                                    },
                                                                    {
                                                                        "title": "Delete",
                                                                        "icon": "delete",
                                                                        "mini": true,
                                                                        "action": {
                                                                            "name": "deleteProduct",
                                                                            "confirm": {
                                                                                "title": "Удаление",
                                                                                "message$": "`Удалить продукт`",
                                                                                "yes": "Да",
                                                                                "no": "Нет"
                                                                            }
                                                                        },
                                                                        "disabled$": "!context.selectedProduct"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        ".list": {
                                                            "control": "ListTable",
                                                            "controlOpts": {
                                                                "$": {
                                                                    "product": {
                                                                        "label": "Product list",
                                                                        "width": 250
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "actions": {
                                                        "onSelectionChanged": {
                                                            "js": "context.selectedProduct = selectedRow;"
                                                        }
                                                    }
                                                }
                                            },
                                            "actions": {
                                                "onProductSelected": [
                                                    {
                                                        "js": "mem.product_list.push({product: params.product.code}); mem.product_list = [...mem.product_list];"
                                                    }
                                                ],
                                                "deleteProduct": [
                                                    {
                                                        "jsScript": "mem.product_list.splice(mem.product_list.indexOf(context.selectedProduct), 1); context.selectedProduct = null; mem.product_list = [...mem.product_list];"
                                                    }
                                                ]
                                            }
                                        },
                                        "userName": {
                                            "control": "TextEdit",
                                            "label": "Initiator"
                                        }
                                    }
                                },
                                "@loan": {
                                    "className": "vertical",
                                    "title": "Loan parameters",
                                    "$": {
                                        "@amount": {
                                            "className": "horizontal",
                                            "$": {
                                                "minAmount": {
                                                    "control": "CurrencyField",
                                                    "label": "Amount from"
                                                },
                                                "maxAmount": {
                                                    "control": "CurrencyField",
                                                    "label": "Amount to"
                                                }
                                            }
                                        },
                                        "currency": {
                                            "control": "SelectList",
                                            "label": "Currency",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "name": "UZS",
                                                        "value": "UZS"
                                                    },
                                                    {
                                                        "name": "USD",
                                                        "value": "USD"
                                                    },
                                                    {
                                                        "name": "EUR",
                                                        "value": "EUR"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                },
                                "@internal": {
                                    "className": "vertical",
                                    "title": "Technical",
                                    "$": {
                                        "idReq": {
                                            "label": "Application Id",
                                            "control": "TextEdit"
                                        }
                                    }
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnClear": {
                                    "control": "Button",
                                    "label": "Clear",
                                    "controlProps": {
                                        "variant": "outlined",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "clean"
                                    }
                                },
                                "btnApply": {
                                    "control": "Button",
                                    "label": "Apply",
                                    "controlProps": {
                                        "variant": "contained",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "js": "actions.apply(mem);",
                                        "params": {
                                            "disableUpdate": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "clean": {
                            "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                        }
                    }
                },
                "query": {
                    "fromDate": {
                        "sql": "\"dord\" >= to_date(:fromDate, 'yyyy-mm-dd')"
                    },
                    "toDate": {
                        "sql": "\"dord\" <= to_date(:toDate, 'yyyy-mm-dd')"
                    },
                    "appNo": {
                        "sql": "\"appNo\" like '%%'||:appNo"
                    },
                    "appId": {
                        "sql": "\"appId\" like '%%'||:appId"
                    },
                    "deaNo": {
                        "sql": "json_value(json, '$.dea.code') = :deaNo and \"dord\" >= p_operday - 90"
                    },
                    "state": {
                        "sql": "\"state\" = :state"
                    },
                    "purpose": {
                        "sql": "purpose = :purpose"
                    },
                    "vidcred": {
                        "sql": "vidcred = :vidcred"
                    },
                    "stage": {
                        "sql": "\"stage\" = :stage"
                    },
                    "department": {
                        "sql": "\"depCode\" = any(select code from c_dep_std start with code=:department connect by id_hi=prior id)"
                    },
                    "product": {
                        "sql": "\"product_code\" = any(select code from t_deacls_std start with code=:product connect by id_hi=prior id)"
                    },
                    "product_list": {
                        "sql": "\"product_code\" = any(select code from t_deacls_std start with code in (select * from json_table(:product_list , '$.*' COLUMNS(product path '$'))) connect by id_hi=prior id)"
                    },
                    "userName": {
                        "sql": "\"created_user\" = :userName"
                    },
                    "nibbd": {
                        "sql": "\"cli_code\" = any(select g.code from g_cli g, g_cliidn cli, G_IDNDSC_STD i where cli.idn_id = i.id and i.cliidntyp ='BD' and P_MAXDATE between cli.fromdate and cli.todate and cli.dep_id=g.dep_id and cli.id=g.id and cli.idn_num=:nibbd)"
                    },
                    "inn": {
                        "sql": "cli_taxcode=:inn"
                    },
                    "pinfl": {
                        "sql": "\"cli_code\" = any(select g.code from g_cli g, g_cliidn cli where cli.idn_id = G_pkgIdn.fId('IDN_PRS_UZ') and P_MAXDATE between cli.fromdate and cli.todate and cli.dep_id=g.dep_id and cli.id=g.id and cli.idn_num=:pinfl)"
                    },
                    "clientCode": {
                        "sql": "\"cli_code\" = :clientCode"
                    },
                    "clientName": {
                        "sql": "\"cli_name\" like '%%'||:clientName||'%%'"
                    },
                    "minAmount": {
                        "sql": "\"application_amount\" >= :minAmount"
                    },
                    "maxAmount": {
                        "sql": "\"application_amount\" <= :maxAmount"
                    },
                    "currency": {
                        "sql": "\"currency_code\" = :currency"
                    },
                    "clientType": {
                        "sql": "\"cli_code\" = any(select g.code from g_cli g, g_clihst gh where g.dep_id = gh.dep_id and g.id = gh.id and P_OPERDAY between gh.fromdate and gh.todate and (case when :clientType = '00' and g.JURFL = '0' and g.PBOYULFL = '0' then 1 when :clientType = '10' and g.JURFL = '1' then 1 when :clientType = '01' and g.jurfl = '0' and g.pboyulfl = '1' then 1 when :clientType = '11' and (g.JURFL = '1' or g.jurfl='0' and g.pboyulfl='1') then 1 else 0 end) = 1)"
                    }
                }
            },
            "events": {
                "onTaskCreated": [
                    {
                        "js": "task.data.$isFilterOpen = true;"
                    }
                ],
                "onRowDoubleClicked": {
                    "js": "tm.newTask({path: '/aoa/ObjectTask', title: `Заявка ${$listRow.appNo} от ${$formatters.date($listRow.dord)}`, params: {object: 'app', form: 'appEditTask', objectKey: {dep_id: params.selectedRow.dep_id, id: params.selectedRow.id}, componentPath: params.selectedRow.baseComponent}})"
                }
            }
        }
    },
    "references": {},
    "js": {}
}