{
    "forms": {
        "appEditForm": {
            "title": "Форма редактирования заявки",
            "className": "vertical",
            "$": {
                "app": {
                    "className": "vertical",
                    "$": {
                        "@clientInfo": {
                            "object": "app",
                            "form": "clientInfoJurForm"
                        },
                        "@guaranteeInfo": {
                            "object": "appGuarantee",
                            "form": "appGuaranteeEditForm",
                            "params": {
                                "product$": "mem.product"
                            },
                            "readOnly$": "isReadOnly && (task.params.readOnly!==false)"
                        },
                        "@creditReport": {
                            "object": "app",
                            "form": "creditReportForm"
                        },
                        "@pledges": {
                            "object": "appPledge",
                            "form": "pledgesForm",
                            "params": {
                                "client$": "mem.client",
                                "pledgeMaxDate$": "mem.app.toDate"
                            }
                        },
                        "@afs": {
                            "object": "app",
                            "form": "afsProfileForm",
                            "readOnly$": "isReadOnly && (task.params.readOnly!==false)"
                        },
                        "@dossier": {
                            "object": "app",
                            "form": "dossierForm",
                            "visible$": "mem.dep_id && mem.id || false"
                        },
                        "@decisionInfo": {
                            "visible$": "!!mem.decisions",
                            "object": "app",
                            "form": "decisionInfoForm"
                        },
                        "@loanInfo": {
                            "visible$": "!!mem.app.importedLoanId || !!mem.dea",
                            "object": "loanapp",
                            "form": "loanInfoForm"
                        }
                    }
                }
            },
            "actions": {
                "onElementCreated": {
                    "js": "tm.setTaskTitle(task.key, `Заявка на гарантию ${!!mem.app?.app?.code?mem.app.app.code:'<Новая>'}, ${mem.app?.client?.name}`)"
                }
            }
        },
        "appGuaranteeEditForm": {
            "title": "Данные гарантии",
            "$": {
                "@guarantee": {
                    "className": "vertical navigated-content",
                    "title": "Гарантия",
                    "titleClass": "navigated-title",
                    "$": {
                        "app": {
                            "className": "vertical",
                            "$": {
                                "@product": {
                                    "className": "horizontal",
                                    "$": {
                                        "productCode": {
                                            "label": "Продукт",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "TextEdit"
                                        },
                                        "productName": {
                                            "style": {
                                                "width": "570px"
                                            },
                                            "control": "TextEdit"
                                        }
                                    },
                                    "readOnly": true
                                },
                                "@period": {
                                    "className": "horizontal",
                                    "$": {
                                        "fromDate": {
                                            "label": "Дата выдачи",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "DateEdit"
                                        },
                                        "toDate": {
                                            "label": "Дата окончания",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "DateEdit"
                                        }
                                    },
                                    "required": true
                                },
                                "@amount": {
                                    "className": "horizontal",
                                    "$": {
                                        "amount": {
                                            "label": "Сумма договора",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "CurrencyField",
                                            "required": true
                                        },
                                        "currency": {
                                            "label": "Валюта",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "TextEdit",
                                            "readOnly": true
                                        }
                                    }
                                },
                                "guaranteeForm": {
                                    "label": "Форма гарантии",
                                    "style": {
                                        "width": "280px"
                                    },
                                    "control": "ObjectSelectList",
                                    "controlProps": {
                                        "object": "bank_domain",
                                        "method": "getList",
                                        "params": {
                                            "domain": "J_GRNFRM"
                                        }
                                    },
                                    "controlOpts": {
                                        "translate": {
                                            "value": "code",
                                            "name": "name"
                                        }
                                    },
                                    "required": true
                                },
                                "@purposeOfGuarantee": {
                                    "className": "horizontal",
                                    "$": {
                                        "purposeOfGuarantee": {
                                            "label": "Назначение гарантии",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "ObjectReference",
                                            "controlProps": {
                                                "object": "bank_domain",
                                                "params": {
                                                    "domain": "J_GRNNAZN"
                                                }
                                            },
                                            "controlOpts": {
                                                "valueField": "code",
                                                "postfixFields": {
                                                    "Name": "name"
                                                }
                                            },
                                            "required": true
                                        },
                                        "purposeOfGuaranteeName": {
                                            "style": {
                                                "width": "570px"
                                            },
                                            "control": "TextEdit",
                                            "readOnly": true
                                        }
                                    }
                                },
                                "@beneficiary": {
                                    "className": "horizontal",
                                    "$": {
                                        "beneficiary": {
                                            "label": "Бенефициар",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "ButtonTextEdit",
                                            "action": {
                                                "js": "frontend.dialog({object: 'appGuarantee', form: 'beneficiarySelectDialog', mem: {}, params: {}})"
                                            },
                                            "required": true
                                        },
                                        "beneficiaryName": {
                                            "style": {
                                                "width": "570px"
                                            },
                                            "control": "TextEdit",
                                            "readOnly": true
                                        }
                                    },
                                    "actions": {
                                        "onClientIdentified": {
                                            "js": "mem.beneficiary = params.client.code; mem.beneficiaryName = params.client.name"
                                        }
                                    }
                                },
                                "@appid": {
                                    "className": "horizontal",
                                    "$": {
                                        "appId": {
                                            "label": "Уникальный номер заявки",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "TextEdit",
                                            "readOnly": true
                                        },
                                        "code": {
                                            "label": "Юр.номер заявки",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "TextEdit",
                                            "readOnly": true
                                        },
                                        "registrationDate": {
                                            "label": "Дата заявки",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "DateEdit",
                                            "readOnly": true
                                        }
                                    }
                                },
                                "@legalAct": {
                                    "className": "horizontal",
                                    "$": {
                                        "legalAct": {
                                            "label": "Нормативно-правовой акт",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "ObjectReference",
                                            "controlProps": {
                                                "object": "legalAct"
                                            },
                                            "controlOpts": {
                                                "valueField": "code",
                                                "postfixFields": {
                                                    "Name": "name"
                                                }
                                            },
                                            "required": true
                                        },
                                        "legalActName": {
                                            "style": {
                                                "width": "570px"
                                            },
                                            "control": "TextEdit",
                                            "readOnly": true
                                        }
                                    }
                                },
                                "@g2": {
                                    "className": "horizontal",
                                    "$": {
                                        "newObjectType": {
                                            "label": "Признак новообразования",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "ObjectSelectList",
                                            "controlProps": {
                                                "object": "bank_domain",
                                                "method": "getList",
                                                "params": {
                                                    "domain": "L_REQDSCROBJ"
                                                }
                                            },
                                            "controlOpts": {
                                                "translate": {
                                                    "value": "code",
                                                    "name": "name"
                                                }
                                            },
                                            "required": true
                                        },
                                        "existingWorkplaces": {
                                            "label": "Количество рабочих мест",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "NumericField",
                                            "controlProps": {
                                                "numericProps": {
                                                    "minimumValue": 0,
                                                    "maximumValue": 99999
                                                }
                                            },
                                            "required": true
                                        },
                                        "workplaces_num": {
                                            "label": "Количество создаваемых рабочих мест",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "NumericField",
                                            "controlProps": {
                                                "numericProps": {
                                                    "minimumValue": 0,
                                                    "maximumValue": 99999
                                                }
                                            },
                                            "required": true
                                        }
                                    }
                                },
                                "@productParameters": {
                                    "style": {
                                        "width": "860px"
                                    },
                                    "object": "app",
                                    "form": "productParametersForm"
                                }
                            }
                        }
                    }
                }
            }
        },
        "beneficiarySelectDialog": {
            "title": "Идентификация клиента",
            "className": "vertical",
            "style": {
                "width": "400px"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "paddingTop": "4px"
                    },
                    "$": {
                        "inn": {
                            "label": "ИНН",
                            "control": "TextEdit",
                            "actions": {
                                "onChange": {
                                    "name": "refresh"
                                }
                            }
                        },
                        "nibbd": {
                            "label": "НИББД",
                            "control": "TextEdit",
                            "actions": {
                                "onChange": {
                                    "name": "refresh"
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnIdentify": {
                                    "label": "Идентифицировать",
                                    "control": "Button",
                                    "controlProps": {
                                        "variant": "text",
                                        "color": "primary",
                                        "style": {
                                            "textTransform": "none"
                                        }
                                    },
                                    "readOnly$": "!(mem.inn || mem.nibbd)",
                                    "action": [
                                        {
                                            "js": "return backend.post('/aoa/execObjectMethod', {object: 'loanapp', method: 'identifyClient', params:{inn: mem.inn, nibbd: mem.nibbd}}).then((r)=>{context.client=r;})"
                                        },
                                        {
                                            "name": "setClient",
                                            "params": {
                                                "client$": "context.client"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        "@client": {
                            "$": {
                                "client": {
                                    "className": "vertical",
                                    "$": {
                                        ".category": {
                                            "control": "Text",
                                            "getter": "mem.categoryName"
                                        },
                                        ".name": {
                                            "control": "Text",
                                            "getter": "mem.name"
                                        }
                                    }
                                }
                            },
                            "visible$": "!!mem.client?.code"
                        },
                        "@noIdent": {
                            "$": {
                                ".noIdent": {
                                    "control": "Text",
                                    "getter": "`Клиент не идентифицирован`"
                                }
                            },
                            "visible$": "!mem.client?.code"
                        }
                    },
                    "actions": {
                        "refresh": {
                            "js": ";"
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "justifyContent": "flex-end"
                    },
                    "$": {
                        "cancel": {
                            "label": "Отменить",
                            "control": "Button",
                            "controlProps": {
                                "style": {
                                    "textTransform": "none"
                                },
                                "variant": "text",
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close()",
                                "disableUpdate": true
                            }
                        },
                        "apply": {
                            "label": "Выбрать",
                            "control": "Button",
                            "controlProps": {
                                "style": {
                                    "textTransform": "none"
                                },
                                "variant": "contained",
                                "color": "primary"
                            },
                            "readOnly$": "!mem.client?.code",
                            "action": [
                                {
                                    "name": "onClientIdentified",
                                    "params": {
                                        "client$": "mem.client",
                                        "myId$": "mem.myId"
                                    }
                                },
                                {
                                    "js": "actions.close();",
                                    "disableUpdate": true
                                }
                            ]
                        }
                    }
                }
            },
            "actions": {
                "setClient": {
                    "js": "mem.client=params.client; mem.myId=params.myId;"
                },
                "onFormCreated": {
                    "js": ""
                }
            }
        }
    },
    "methods": {
        "createGuarantee": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "SQL=\"\"\"\n    declare\n        idDeaDep number;\n        idDea number;\n        r L_REQDEA%%rowtype;\n        ro T_ORD%%rowtype;\n        pm T_PROCMEM%%rowtype;\n        nNJRN number;\n\n        fromDate date;\n        toDate date;\n        \n        idDepBeneficiary number;\n        idBeneficiary number;\n        \n    begin\n        t_log.penable; t_log.clean;\n        \n        select * into r from L_REQDEA where DEP_ID=:req_dep_id and ID=:req_id;\n        select * into ro from T_ORD where DEP_ID=:req_dep_id and ID=:req_id;\n        select * into pm from T_PROCMEM where DEP_ID=:req_dep_id and ORD_ID=:req_id and MAINFL='1';\n        \n\n        idDeaDep := :req_dep_id;\n        \n        --\n        -- Ищем ранее созданный договор. Возможно из за порванной транзакции\n        --\n        select \n            (select ord_id from t_procmem where id=pm.id and MAINFL='0')\n        into idDea from dual;\n\n        if idDea is null then\n            -- Добавляем к процессу заявки псевдо операцию\n            declare\n            begin\n                select nvl(max(NJRN)+1, 1) into nNJRN from T_OPERJRN where ID=pm.ID;\n                insert into T_OPERJRN(\n                    ID, NJRN, BOP_ID, \n                    NOPER,\n                    DEP_ID, ORD_ID,\n                    DOPER, TUS_ID,\n                    DSCR \n                )values(\n                    pm.ID, nNJRN, pm.BOP_ID,\n                    (select NORD from T_SCEN_STD where ID=pm.BOP_ID and CODE='_RUN_ANL_ACM_'),\n                    :req_dep_id, :req_id,\n                    P_OPERDAY, p_idus,\n                    'Создание договора'\n                );\n            end;\n        else\n            -- Берём последнюю операцию по заявке\n            select max(NJRN) into nNJRN from T_OPERJRN where ID=pm.ID;\n        end if;\n    \n        fromDate := to_date(substr(json_value(r.json, '$.app.fromDate'),1,10), 'yyyy-mm-dd');\n        toDate := to_date(substr(json_value(r.json, '$.app.toDate'),1,10), 'yyyy-mm-dd');\n        \n        G_PkgCli.pGetCliId(json_value(r.json, '$.app.beneficiary'), idDepBeneficiary, idBeneficiary);\n    \n        JGRNDEA.pCreUpdGRN(\n            iDep            => idDeaDep,\n            idDeal          => idDea,\n            iDCL_ID         => T_PkgDea.fDclId(json_value(r.json, '$.app.productCode')),\n            sCode           => null,\n            sNUMDEAL        => null,\n            dORD            => p_operday,\n            dRECV           => p_operday,\n            dFROMDATE       => fromDate,\n            dTODATE         => toDate,\n            dDREQUEST       => null,\n            cWS             => null,\n            cNORECALL       => null,\n            cCONDIFL        => null,\n            -- Форма гарантии\n            iW_FRM          => json_value(r.json, '$.app.guaranteeForm'),\n            -- Назначение гарантии\n            iNAZN           => json_value(r.json, '$.app.purposeOfGuarantee'),\n            cDOCUMFL        => null,\n            iVAL_ID         => ro.VAL_ID,\n            iVRATE_ID       => null,\n            iRate           => null,\n            sCHARGES        => null,\n            sSDOK           => json_value(r.json, '$.app.amount'),\n            \n            iCLI_DEP_ID     => r.CLIDEP_ID,\n            iCLI_ID         => r.CLI_ID,\n            \n            iCOR_DEP_ID     => idDepBeneficiary,\n            iCOR_ID         => idBeneficiary,\n            sCOR_NAME       => null,\n            \n            iGRN_DEP_ID     => null,\n            iGRN_ID         => null,\n            sGRN_NAME       => null,\n            \n            iCANAL          => null,\n            iFromSwift      => 0,\n\n            p_parent_Proc   => pm.ID, \n            p_parentOpr     => nNJRN,\n            \n            iTUS_ID         => null\n        );\n    \n        :dea_dep_id := idDeaDep;\n        :dea_id := idDea;\n        select CODE into :dea_code from T_ORD where DEP_ID=idDeaDep and ID=idDea;\n        select refer into :dea_refer from t_dea where DEP_ID=idDeaDep and ID=idDea;\n        \n        \n        -- Добавление участника в процесс заявки\n        declare\n            op BS_OPERATION.SelfAttr;\n            memCnt integer;\n        begin\n            --delete from t_procmem where id=pm.id and mainfl=0;\n            select count(*) into memCnt from t_procmem where id=pm.id and mainfl=0 and dep_id=idDeaDep and ord_id=idDea;\n            if memCnt = 0 then\n                BS_OPERATION.read_process(op, pm.id);\n                BS_OPERATION.add_mem(op, P_IDDEP=>idDeaDep, p_idord=>idDea, p_nmem=>BS_BOP.fGetPosId(pm.BOP_ID, 'DEA'));\n            end if;\n        end;\n        \n        -- id заявки\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'L_UNNUMBER', \n            json_value(r.json, '$.app.appId')\n        );\n        \n        -- День погашения процентов\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'LPAYDAY', \n            json_value(r.json, '$.app.parameters.LPAYDAY')\n        );\n        \n        -- Интервал значения процентной ставки\n        T_PkgDeaPrm.pSetPrm(idDea, idDeaDep,\n            'L_PCNTDELTA', \n            json_value(r.json, '$.app.parameters.L_PCNTDELTA')\n        );\n    \n        -- Тип заемщика\n        declare\n            typeOfBorrower varchar2(60);\n        begin\n            typeOfBorrower := json_value(r.json, '$.client.clientType');\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_TZ'),\n                u_pkguniref.fId('UZ_TZ', null, typeOfBorrower)\n            );\n        end;\n        \n        -- Вид кредитования\n        --if json_value(r.json, '$.app.typeOfLending') is not null then\n        --    L_pkgDeaUniRef.pSetRefValOnly(\n        --        idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_VIDCRED'),\n        --        u_pkguniref.fId('UZ_VIDCRED', null, json_value(r.json, '$.app.typeOfLending'))\n        --    );\n        --end if;\n        \n        -- Вид кредитования по классификатору\n        --if json_value(r.json, '$.app.typeOfLending110') is not null then\n        --    L_pkgDeaUniRef.pSetRefValOnly(\n        --        idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_TYPECRED_110'),\n        --        u_pkguniref.fId('UZ_TYPECRED_110', null, json_value(r.json, '$.app.typeOfLending110'))\n        --    );\n        --end if;\n\n        -- Нормативно правовой акт\n        if json_value(r.json, '$.app.legalAct') is not null then\n            L_pkgDeaUniRef.pSetRefValOnly(\n                idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_NPA'),\n                u_pkguniref.fId('UZ_NPA', null, json_value(r.json, '$.app.legalAct'))\n            );\n        end if;\n\n        -- Цель кредита по кассификатору\n        --if json_value(r.json, '$.app.purpose112OfLoan') is not null then \n        --    L_pkgDeaUniRef.pSetRefValOnly( \n        --        idDeaDep, idDea, u_pkguniref.fRefCode2Id( 'UZ_PURPCRED_112'), \n        --        u_pkguniref.fId('UZ_PURPCRED_112', null, json_value(r.json, '$.app.purpose112OfLoan')) \n        --    ); \n        --end if;\n        \n        :operday := P_OPERDAY;\n    \n    \n    end;\n\n\"\"\"\n\nfrom colvir_cbs.services import log\n\nwith initDbSession(application='colvir_cbs').cursor() as cursor:\n    p = {\n        'req_dep_id': parameters['req_dep_id'],\n        'req_id': parameters['req_id'],\n        'dea_dep_id': cursor.var(int),\n        'dea_id': cursor.var(int),\n        'dea_code': cursor.var(str),\n        'dea_refer': cursor.var(str),\n        'operday': cursor.var(str),\n    }\n    \n    try:\n        cursor.execute(SQL, p)\n    except Exception as e:\n        raise UserException({\n            'message': 'Ошибка создания договора\\n%s' % e,\n            'trace': log.readLog()\n        })\n        \n        \n    data = {\n        'dep_id': p['dea_dep_id'].getvalue(),\n        'id': p['dea_id'].getvalue(),\n        'code': p['dea_code'].getvalue(),\n        'refer': p['dea_refer'].getvalue(),\n        'log': log.readLog(),\n    }\n        \n    "
            }
        },
        "prepareApplicationFromDea": {
            "script": {
                "py": "#\n# Создание заявки из договора\n#\n\ndea = parameters['dea']\n\napp = execObjectMethod({\n    'object': 'app', 'method': 'prepareNewApplication',\n    'params': {\n        'clientCode': dea['clientCode'],\n        'product': {\n            'code': dea['productCode'],\n            'currency': dea['currency'],\n        }\n    }\n})\n\napp['app'] = {\n    **app['app'],\n    **parameters['app'],\n    'amount': dea['amount'],\n    'currency': dea['currency'],\n    'fromDate': dea['fromDate'],\n    'toDate': dea['toDate'],\n    'guaranteeForm': dea['guaranteeForm'],\n    'purposeOfGuarantee': dea['purposeOfGuarantee'],\n    'purposeOfGuaranteeName': dea['purposeOfGuaranteeName'],\n    \n    'beneficiary': dea['beneficiary'],\n    'beneficiaryName': dea['beneficiaryName'],\n    \n    'legalAct': dea['legalAct'],\n    'legalActName': dea['legalActName'],\n    \n    'newObjectType': '0',\n    \n    'isImported': True,\n}\napp['client']['clientType'] = dea['typeOfBorrower'];\napp['client']['clientTypeName'] = dea['typeOfBorrowerName'];\napp['agreement'] = True\napp['withoutPledge'] = True\n\nif dea['prm_LPAYDAY'] is not None:\n    app['app']['parameters']['LPAYDAY'] = dea['prm_LPAYDAY']\n\nif dea['prm_J_GRNVOFL'] is not None:\n    app['app']['parameters']['J_GRNVOFL'] = dea['prm_J_GRNVOFL'] == '1'\n\napp['decisions'] = {\n    parameters['decision']['code']: {\n        'decision'  : 'accept',\n        'code'      : parameters['decision']['code'],\n        'date'      : parameters['decision']['date'],\n        'number'      : parameters['decision']['number'],\n    }\n}\napp['dea'] = {\n    'code': dea['code'],\n    'dep_id': dea['dep_id'],\n    'id': dea['id'],\n}\n\n\ndata = app"
            },
            "sql": {}
        },
        "createApplicationFromDea": {
            "script": {
                "py": "#\n# Создание заявки из договора\n#\nfrom django.db import transaction\nfrom django.conf import settings\n\ndea = execObjectMethod({\n    'object': 'cbs.guarantee', 'method': 'getGuarantee',\n    'params': {\n        'dep_id': parameters['dea_dep_id'],\n        'id': parameters['dea_id'],\n    }\n})\n\n#raise UserException('%s' % dea)\n\nif dea.get('appId'):\n    raise UserException('По договору заявка уже существует, id=%s' % dea['appId'])\n\n\napp = execObjectMethod({\n    'object': 'appGuarantee', 'method': 'prepareApplicationFromDea',\n    'params': {\n        'dea': dea,\n        'app': parameters['app'],\n        'decision': parameters['decision'],\n    }\n})\n\nwith transaction.atomic(using=settings.APPS_DB['colvir_cbs']):\n    req = execObjectMethod({\n        'object': 'app', 'method': 'saveApplication',\n        'params': {\n            'app': app\n        }\n    })\n    r = execObjectMethod({\n        'object': 'loanapp', 'method': 'linkToDea',\n        'params': {\n            'req_dep_id': req['dep_id'],\n            'req_id': req['id'],\n            'dea_dep_id': parameters['dea_dep_id'],\n            'dea_id': parameters['dea_id'],\n        }\n    })\n    \ndata = {\n    'dep_id': req['dep_id'],\n    'id': req['id'],\n}"
            }
        },
        "prepareNewApplication": {
            "sql": {},
            "script": {
                "py": "#\n# Подготовка новой заявки\n#\n\ndata = parameters['app']\n\nif data.get('events') is None:\n    data['events'] = {}\nif data['events'].get('onDeaCreated') is None:\n    data['events']['onDeaCreated'] = []\n    \ndata['events']['onDeaCreated'].append({\n    'object': 'appGuarantee',\n    'method': 'onDeaCreated'\n})\n\n"
            }
        },
        "onDeaCreated": {
            "script": {
                "py": "from apng_core.easyflow.services import RuntimeService as rs\n\napp = parameters['app']\n\nok = 'loanapp:%s,%s' % (app['dep_id'], app['id'])\n\n# Запуск отмены заявки в КАТМ\np = rs.startProcessByCode('KATM_CANCEL', {\n    'objectKey': ok,\n    'claim_id': app['app']['appId']\n}, parameters['tokenId'])\n"
            }
        }
    },
    "lists": {},
    "references": {},
    "js": {}
}