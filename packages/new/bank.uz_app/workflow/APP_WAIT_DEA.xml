<workflow id="APP_WAIT_DEA" name="Ожидание актуализации договора">
    <event name="onGetProcessObject">
        <![CDATA[ok = process_vars.get('objectKey')
kv = ok.split(':')
pk = kv[1].split(',')

#
# Загружаем общую информацию по заявке
#
token._po = execObjectMethod({
    'object': 'app', 'method': 'getApplication',
    'params': {
        'dep_id': int(pk[0]),
        'id'    : int(pk[1]),
    }
})


]]>
    </event>
    <script id="186e782d-2f71-406a-a40c-53feb52612bb" name="Инициализация">
        <![CDATA[ok = process_vars.get('objectKey')
if not ok: 
    raise Exception('Не задан ключ объекта для запуска сценария, objectKey');
    

kv = ok.split(':')
pk = kv[1].split(',')
pv['dep_id'] = int(pk[0])
pv['id'] = int(pk[1])

]]>
    </script>
    <timer id="31e1823f-5eb0-483d-b067-c287546b4213" name="Проверка состояния договора" description="Проверка состояния договора по заявке {{po.app.code}} {{po.client.name}}, договор {{pv.dea.code}}" duration="00:00:00" errorDuration="00:05:00" action="continue"/>
    <script id="533a43aa-ce2a-4929-93f0-1cfebb95cce0" name="Проверка состояния договора">
        <![CDATA[from apng_core.auth import User

try:
    issueAccount = {
        'accountNo': None
    }
    if pv.get('issueLoan'):
        
        with User(token.getTopProcess().initiator) as au:
            if po['app'].get('cardIdn'):
                # Выдача на карту
                issueAccount = execObjectMethod({
                    'object': 'card',
                    'method': 'getAccountByCardIdn',
                    'params': {
                        'cardIdn': po['app']['cardIdn']
                    }
                })
            
            dea = execObjectMethod({
                'object': 'loan',
                'method': 'issueLoan',
                'params': {
                    'dep_id': pv['dea']['dep_id'],
                    'id': pv['dea']['id'],
                    'issueAccountNo': issueAccount['accountNo'],
                }
            })
        if dea.get('log'):
            token.save_vars({'issueLoanLog': dea['log']})
    else:
        with User('COLVIR') as au:
            dea = execObjectMethod({
                'object': 'loan',
                'method': 'getState',
                'params': {
                    'dep_id': pv['dea']['dep_id'],
                    'id': pv['dea']['id'],
                }
            })
        
    pv['dea']['state'] = dea['state']
    pv['dea']['stateName'] = dea['stateName']

except Exception as e:
    raise UserException({
        'message': 'Ошибка проверки состояния договоа {deaNo} по заявке {appNo}\n{message}'.format(
            deaNo = pv['dea']['code'],
            appNo = po['app']['code'],
            message = e
        )
    })

]]>
    </script>
    <split id="fa44bd79-1c3a-4213-b301-eb91c061fffd" name="Договор зарегистрирован">
        <condition id="bff5fcbb-3f8b-4791-94cb-061b7a9c36a2" name="Да" expression="pv.get(&apos;issueLoan&apos;, False) == False and pv[&apos;dea&apos;][&apos;state&apos;] in (&apos;REGISTERED&apos;, &apos;ACTUAL&apos;) or pv.get(&apos;issueLoan&apos;, False) and pv[&apos;dea&apos;][&apos;state&apos;] in (&apos;ACTUAL&apos;)">
            <script id="eea1fc55-9e67-42d3-8323-838a9592ee73" name="Установка результата: зарегистрирован">
                <journal time="leave">
                    <![CDATA[Договор {{process_vars.dea.code}} зарегистрирован]]>
                </journal>
                <![CDATA[process_vars['result'] = {
    'status': 'registered',
}]]>
            </script>
        </condition>
        <condition id="36f94110-266b-4998-b9fc-2a177e22f168" name="Нет">
            <script id="af10ec15-51c5-48b7-b6be-9b312b3351d6" name="Расчет времени ожидания">
                <![CDATA[import traceback
from datetime import time, datetime, timedelta
from django.utils import timezone
from apng_core.json import WebJSONEncoder

#
# Общая настройка времени повторения проверок
#
pv['delays'] = [
    # До 1 часа проверяем 1 раз в минуту
    {'max': {'hours': 1}, 'delay': {'minutes': 1}},
    # До 4-х часов проверяем 1 раз в 5 минут
    {'max': {'hours': 4}, 'delay': {'minutes': 5}},
    # 3 дня проверям 1 раз в час
    {'max': {'days': 3}, 'delay': {'hours': 1}},
    # Остальное время проверяем 1 раз в 6 часов
    {'delay': {'hours': 6}},
]

#
# Время ожидания
#
if po['product']['options'].get('waitRegDea') :
    waitValue = po['product']['options']['waitRegDea']
else:

    waitValue = AO.product.getProductParameterValue({
        'productCode': po['app']['productCode'],
        'parameterCode': 'L_WAIT_REGDEA'
    })
        
if waitValue is None:
    process_vars['waitDea'] = {'days': 30}
else:
    try:
        j = json.loads(waitValue)
        if not ('days' in j or 'hours' in j):
            raise Exception('Отстутсвуют атрибуты days и hours')
        process_vars['waitDea'] = j
    except Exception as e:
        raise UserException({
            'message': 'Ошибка обработки параметра продукта L_WAIT_REGDEA.\nФормат значения должен соответствовать {"days": 0, "hours": 0}\nТекущее значение: %s\n%s' % (waitValue, e),
            'trace': traceback.format_exc(),
        })

def duration(startTime, endTime):
    d = endTime - startTime
    return {
        'days': d.days,
        'hours': d.seconds//3600,
        'minutes': (d.seconds//60)%60,
    }
    
def resolveDelay(delays, duration):
    from datetime import timedelta
    if isinstance(duration, timedelta):
        dd = duration
    else:
        dd = timedelta(**duration)
        
    for d in delays:
        minValue = d.get('min')
        maxValue = d.get('max')
        delay = d['delay']
        if minValue:
            if timedelta(**minValue) <= dd:
                return timedelta(**delay)
        elif maxValue:
            if timedelta(**maxValue) >= dd:
                return timedelta(**delay)
        else:
            return timedelta(**delay)
    
    return timedelta()
                    
    
delay = resolveDelay(process_vars['delays'], timezone.now() - token.process.created)
wt = token.process.created + timedelta(**process_vars['waitDea'])

process_vars['waitTime'] = wt
process_vars['needStop'] = timezone.now() >= wt


# raise Exception(json.dumps(xx, indent=4, cls=WebJSONEncoder))

process_vars['next'] = datetime.now() + delay

]]>
            </script>
            <split id="dc63d63f-826b-463a-9e99-561b1bae88fd" name="Требуется ожидание">
                <condition id="f7de3ea7-fc50-4edc-a135-36eac042625f" name="Да" expression="process_vars[&apos;needStop&apos;] == False">
                    <timer id="90089b25-9a17-45ea-89ce-4a0ef88fbc7d" name="Ожидание регистрации договора" description="{% load functions %}Ожидание регистрации договора {{process_vars.dea.code}} до {{process_vars.waitTime|isoToDate|date:&quot;d.m.Y H:i:s&quot;}}, {{process_vars.dea.stateName}}" duration="process_vars[&apos;next&apos;]" errorDuration="00:05:00" action="continue"/>
                    <jump id="e354feaa-29ff-4c8f-9b8c-81ffe127f710" name="Переход к Проверка состояния договора" target_id="31e1823f-5eb0-483d-b067-c287546b4213"/>
                </condition>
                <condition id="d12527b3-fbcc-4452-8f91-2031d20e054e" name="Нет" expression="process_vars[&apos;needStop&apos;] == True">
                    <timer id="48a18701-8007-4d4e-9a67-faa608301c4c" name="Удаление договора" description="Удаление договора {{process_vars.dea.code}}" duration="00:00:00" errorDuration="00:10:00" action="continue"/>
                    <script id="a2ae6504-7a03-443a-ba87-71daccd2d42c" name="Удаление договора">
                        <journal time="leave">
                            <![CDATA[Удален договор {{process_vars.dea.code}} по истечении срока ожидания подписания клиентом]]>
                        </journal>
                        <![CDATA[from colvir_cbs.auth import AuthenticatedUser

with AuthenticatedUser(user='COLVIR'):
    from colvir_cbs.services import ord
    state = ord.getState({
        'dep_id': process_vars['dea']['dep_id'],
        'id': process_vars['dea']['id'],
    })
    
    if state['state'] not in ['DEL', 'REFUSED', 'REFUSEDEND']:
        ord.delete({
            'dep_id': process_vars['dea']['dep_id'],
            'id': process_vars['dea']['id'],
            'undoOperations': True,
            'unlinkProcess': True,
        })

]]>
                    </script>
                    <script id="2734558d-abb7-4514-8414-c4c8c7633414" name="Установка результата: удален">
                        <![CDATA[process_vars['result'] = {
    'status': 'deleted',
}]]>
                    </script>
                </condition>
            </split>
        </condition>
        <condition id="b65085de-d448-4821-bfb0-de6505314bc2" name="Договор в состоянии отказа" expression="pv[&apos;dea&apos;][&apos;state&apos;] in (&apos;REFUSEDEND&apos;, &apos;REFUSED&apos;, &apos;DEL&apos;)">
            <script id="d4e18551-25de-4955-881b-d39be79a1030" name="Установка результата: отказ">
                <journal time="leave">
                    <![CDATA[Договор {{process_vars.dea.code}}, установлен отказ]]>
                </journal>
                <![CDATA[process_vars['result'] = {
    'status': 'decline',
}]]>
            </script>
        </condition>
    </split>
    <call id="43de4f0c-6015-47be-8156-d1b0f821cb16" name="Обработка событий" call="&apos;APP_EVENT_PROCESS&apos;" condition="po.get(&apos;events&apos;, {}).get(&apos;onWaitDea&apos;, None) is not None">
        <p name="event" expression="&apos;onWaitDea&apos;"/>
        <p name="payload" expression="pv[&apos;result&apos;]"/>
    </call>
</workflow>