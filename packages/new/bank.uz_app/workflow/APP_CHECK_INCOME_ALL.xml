<workflow id="APP_CHECK_INCOME_ALL" name="Проверка занятости заемщиков по заявке">
    <event name="onCandidates">
        <![CDATA[def depIn(dep):
    from colvir_cbs.services import bank
    return po['app']['depCode'] in bank.getDepartmentsCodes(dep)
]]>
    </event>
    <event name="onGetProcessObject">
        <![CDATA[ok = process_vars.get('objectKey')
kv = ok.split(':')
pk = kv[1].split(',')

#
# Загружаем общую информацию по заявке
#
from apng_core.aoa.services import execObjectMethod
token._po = execObjectMethod({
    'object': 'app', 'method': 'getApplication',
    'params': {
        'dep_id': int(pk[0]),
        'id'    : int(pk[1]),
    }
})
]]>
    </event>
    <timer id="36c3195d-ba3d-4b80-8f35-43d4cbfb08cc" name="Проверка занятости заёмщиков" description="Проверка занятости заёмщиков" duration="00:00:00" errorDuration="00:05:00" action="continue"/>
    <script id="d97a4c53-6698-4ba0-9131-2b26eeb35d18" name="Инициализация">
        <![CDATA[ok = process_vars.get('objectKey')

# Из объекта получаем идентификаторы заявки    
kv = ok.split(':')
pk = kv[1].split(',')
pv['dep_id'] = int(pk[0])
pv['id'] = int(pk[1])

#
# Настройки
#
from apng_core.aoa.services import execObjectMethod
appSettings = execObjectMethod({
    'object': 'settings',
    'method': 'get'
}).get('loanapp', {})

# Сценарий получения доходов
if pv.get('checkIncomeWorkflow') is None:
    if po['product'].get('options', {}).get('checkIncomeWorkflow'):
        pv['checkIncomeWorkflow'] = po['product']['options']['checkIncomeWorkflow']
    else:
        pv['checkIncomeWorkflow'] = next(filter(lambda x: x['code']=='checkIncomeWorkflow', appSettings.get('parameters', [])), {}).get('value', 'APP_CHECK_INCOME')

# Запрет запроса доходов, используется при тестировании без сервисов
pv['disableSalaryRequest'] = appSettings.get('ext.requests', {}).get('disableSalaryRequest', False)

clients = []

req = po

pv['lastError'] = None

try:
    # Заёмщик
    if req['income'].get('payments') is None or not req['income'].get('companyInn'):
        
        if req.get('afs') is None:
            raise Exception('Нет данных АФС, продолжение обработки не возможно')
        
        clients.append({
            'type': 'borrower',
            'typeName': 'Заемщик',
            'cli_code': req['client']['code'],
            'code': req['client']['code'],
            'cli_name': req['client']['name'],
            'name': req['client']['name'],
            'appId': req['app']['appId'],
            'pinfl': req['client']['pinfl'],
            'inn': req['client']['inn'],
            'nibbd': req['client']['nibbd'],
            'idDocument': req['client'].get('idDocument'),
            'income': req['income'],
            'afs': {
                'method': req['afs']['method'],
                'schema': 'Z_ALOQA_NS',
                'sheet': req['afs']['sheet'],
                'key': ','.join([str(process_vars['dep_id']), str(process_vars['id'])])
            }
        })
    
    # Созаёмщики
    if req.get('coborrowers'):
        for coborrower in req['coborrowers']:
            if coborrower['income'].get('payments') is None or not coborrower['income'].get('companyInn'):
                if 'nord' in coborrower:
                    # Старый формат записи созаёмщиков
                    afs_key = ','.join([str(pv['dep_id']), str(pv['id']), str(coborrower['nord'])])
                else:
                    afs_key = ','.join([str(pv['dep_id']), str(pv['id']), coborrower['customer']['code']])
                    
                clients.append({
                    'type': 'coborrower',
                    'typeName': 'Созаемщик',
                    'cli_code': coborrower['customer']['code'],
                    'code': coborrower['customer']['code'],
                    'cli_name': coborrower['customer']['name'],
                    'name': coborrower['customer']['name'],
                    'appId': req['app']['appId'],
                    'pinfl': coborrower['customer'].get('pinfl'),
                    'inn': coborrower['customer'].get('inn'),
                    'nibbd': coborrower['customer'].get('nibbd'),
                    'idDocument': coborrower['customer'].get('idDocument'),
                    'income': coborrower['income'],
                    'afs': {
                        'method': coborrower['afs']['method'],
                        'schema': 'Z_ALOQA_NS',
                        'sheet': coborrower['afs']['sheet'],
                        'key': afs_key
                    }
                })
    
    # Поручители
    if req.get('pledges'):
        for p in req['pledges']:
            
            if p.get('JSON'):
                # Старый формат залогов
                pledge = p['JSON']
            else:
                pledge = p
                
            if pledge['type']=='SURETY':
                if pledge['owner'].get('code') is None:
                    raise UserException('Не задана карточка клиента поручителя')
                    
                client = execObjectMethod({
                    'object': 'client', 'method': 'getClient',
                    'params': {
                        'code': pledge['owner'].get('code') or pledge['owner'].get('CODE'),
                        'withIdentDocType': '01',
                    }
                })
                if client is None:
                    raise UserException({
                        'message': 'Ошибка проверки доходов по поручителям, заявка {appNo}\n{message}'.format(
                            appNo = req['app']['code'],
                            message = 'Клиент с кодом %s не найден' % pledge['owner'].get('code') or pledge['owner'].get('CODE')
                        )
                    })
    
                # Обрабатываем только физлиц
                if client['isJur'] == False and client['isIE'] == False:
                    surerer = pledge['owner']
                    if surerer.get('income') is not None and surerer['income'].get('hasPayments') is None:
                        surerer['income']['hasPayments'] = True
                    
                    if surerer.get('income') is None or surerer['income'].get('payments') is None:
                        clients.append({
        				    'type': 'guarantor',
        				    'typeName': 'Поручитель',
        				    'cli_code': client['code'],
        				    'code': client['code'],
        				    'cli_name': client['name'],
        				    'name': client['name'],
        				    'appId': req['app']['appId'],
        				    'pinfl': client['pinfl'],
        				    'inn': client['inn'],
        				    'nibbd': '',
        				    'idDocument': client.get('idDocument'),
        				    'income': {
        				        'income': surerer.get('income', {}).get('income'),
        				        'hasPayments': surerer.get('income', {}).get('hasPayments', True),
        				        'hasWork': True,
        				        'companyInn': surerer.get('income', {}).get('companyInn'),
        				        'companyName': surerer.get('income', {}).get('companyName'),
        				    }
        				})
    
    pv['clients'] = clients
    
    #raise Exception(json.dumps(process_vars['request'], indent=4))
    
    # Запрет подтверждения занятости
    pv['disableApproveIncome'] = req['product']['options'].get('disableApproveIncome', False)

except Exception as e:
    import traceback
    pv['lastError'] = {
        'message': 'Ошибка обработки списка заемщиков\n%s' % e,
        "trace": traceback.format_exc()
    }
]]>
    </script>
    <split id="1c47a741-4c70-4523-9c05-84eb528e7574" name="Успешно?">
        <condition id="76df0713-ba9b-49dd-8b26-37f6a2142b00" name="Да" expression="pv[&apos;lastError&apos;] is None"/>
        <condition id="00dd47ed-dae5-4751-a975-80178febc689" name="Ошибка" expression="pv[&apos;lastError&apos;] is not None">
            <task id="6d7174f0-7bb7-41c5-8e73-53633c0f5523" name="Ошибка обработки списка заемщиков" autoStart="false" description="Ошибка обработки списка заемщиков, заявка {{po.app.code}}, {{pv.lastError.message}}">
                <event name="onPrepare">
                    <![CDATA[lv['actions'] = []

lv['actions'].append(
    {'name': 'Повторить', 'value': 'repeat'}
)

lv['actions'].append(
    {'name': 'Отправить в доработку', 'value': 'rework'}
)

]]>
                </event>
                <clientTask path="/easyflow/state-dialog" taskName="{{task.description}}">
                    <p name="caption" expression="task.get(&apos;description&apos;)"/>
                    <p name="message" expression="pv[&apos;lastError&apos;][&apos;message&apos;]"/>
                    <p name="actionVar" expression="&apos;errorAction&apos;"/>
                    <p name="objectKey" expression="pv.get(&apos;objectKey&apos;)"/>
                    <p name="actions" expression="lv[&apos;actions&apos;]"/>
                </clientTask>
            </task>
            <split id="f1092f71-e92f-4488-bcb6-a0785bd7a097" name="Выбор исполнителя">
                <condition id="5ee4d66f-ca3f-4aec-96d5-892467f34e25" name="Повторить" expression="pv[&apos;errorAction&apos;] == &apos;repeat&apos;">
                    <jump id="a7d99c1e-abef-43d6-a7cc-b62fc10ab466" name="Переход к Инициализация" target_id="d97a4c53-6698-4ba0-9131-2b26eeb35d18"/>
                </condition>
                <condition id="58d3e0c5-edba-4441-8334-42b614952c1e" name="В доработку" expression="pv[&apos;errorAction&apos;] == &apos;rework&apos;">
                    <script id="f5e24268-c9ad-409a-9b03-e330be5526bc" name="Направить в доработку">
                        <![CDATA[process_vars['result'] = {
    'status': 'review',
}]]>
                    </script>
                    <terminate id="63d478bd-3e26-4004-a68e-a17ac79eb68d" name="Завершение"/>
                </condition>
            </split>
        </condition>
    </split>
    <script id="ba94d151-4ed0-4be1-b14f-a65cf860575f" name="Выбор клиента">
        <![CDATA[if process_vars.get('index') is None:
    process_vars['index'] = 0
else:
    process_vars['index'] = process_vars['index'] + 1
    ]]>
    </script>
    <split id="5260bfad-3401-44ef-aa82-477fb80d5a41" name="Есть клиенты для запросов">
        <condition id="f56937b7-9779-4330-9bc1-0b80db9a961c" name="Да" expression="len(process_vars[&apos;clients&apos;]) &gt; 0"/>
        <condition id="6ba8325a-ae17-46f2-9103-99ac2e8dbf45" name="Нет" expression="len(process_vars[&apos;clients&apos;]) == 0">
            <script id="118436d1-00ee-4bb9-a237-0f602c5d7182" name="Установка результата">
                <![CDATA[pv['result'] = {
    'status': 'accept',
}]]>
            </script>
            <terminate id="77ec0361-a648-4470-89ab-a22960347680" name="Завершение"/>
        </condition>
    </split>
    <call id="e60b17cd-67a8-49f7-90aa-70c47822bb0d" name="Проверка клиента" call="pv[&apos;checkIncomeWorkflow&apos;]" condition="pv.get(&apos;disableSalaryRequest&apos;) != True" result_from="CHECK_RESULT" result_to="CHECK_RESULT">
        <event name="beforeExecute">
            <![CDATA[lv['req'] = po
]]>
        </event>
        <p name="client" expression="pv[&apos;clients&apos;][pv[&apos;index&apos;]]"/>
    </call>
    <script id="56260106-02c3-4e23-a9c1-614b9bb10f05" name="Сохранение результата проверки">
        <![CDATA[client = pv['clients'][pv['index']]

client['status'] = pv.get('CHECK_RESULT', {}).get('status')

#
# Сортировка по году и месяцу, потому что в ответе ГНК порядок похоже не гарантирован
#
if pv.get('CHECK_RESULT', {}).get('data'):
    data = pv['CHECK_RESULT']['data']
    from operator import itemgetter
    
    if isinstance(data, list):
        #
        # Старый формат сервиса, который сразц вернул список отчислений
        #
        client['income']['payments'] = sorted(
            data,
            key=itemgetter('year', 'period')
        )
    elif isinstance(data, dict):
        if data.get('report', {}).get('sysinfo'):
            # Это отчет 25 из АСОКИ
            client['income']['report_asoki_25'] = data
        else:
            #
            # Новый формат сервиса от DEFEN или Электроннога правительства
            #
            client['income']['payments'] = sorted(
                data['salaries'],
                key=itemgetter('year', 'period')
            )
            
            client['income']['company_info'] = data['company_info']
    else:
        raise UserException('Не предусмотренный результат проверки доходов, обратитесь к разработчику')]]>
    </script>
    <split id="23f7dae5-3bc1-430f-8096-1a0ace6197fc" name="Следующий клиент">
        <condition id="5904f080-0793-4954-99aa-08f943045743" name="Да" expression="pv[&apos;index&apos;] &lt; len(pv[&apos;clients&apos;])-1">
            <jump id="e17ffc7b-9fc5-4770-97f0-f3290014e5a1" name="Переход к Выбор клиента" target_id="ba94d151-4ed0-4be1-b14f-a65cf860575f"/>
        </condition>
        <condition id="18dde607-f668-41e8-9f2a-8e9531074b3b" name="Нет"/>
    </split>
    <script id="93887f5a-0bd9-44de-bd3a-6ac370459f20" name="Обработка результатов запросв в ГНК">
        <![CDATA[#
# Обработка результатов проверки занятости
#
from apng_core.aoa.services import execObjectMethod

s = {'object' : 'loanapp', 'method': 'checkIncomeResult'}

decision = execObjectMethod({
    'object': 'rule', 'method': 'evalRule',
    'params': {
        'rule': 'checkIncomeResult_method',
        'ctx': {'product_code' : po['app']['productCode'] }
    }
})
if decision:
    s = decision['decision']
    
res = execObjectMethod({**s, 'params': {'clients': pv['clients']}})

pv['needAccept'] = res.get('needAccept', False)
pv['needRework'] = res.get('needRework', False)]]>
    </script>
    <split id="132d822b-bd0b-45fb-bfdb-27bacad4c256" name="Требуется доработка заявки">
        <condition id="bfe7edbb-7f79-4129-9617-b7ee70f85357" name="Да" expression="pv[&apos;needRework&apos;] == True and pv.get(&apos;disableApproveIncome&apos;, False) == False">
            <task id="5f4a415b-e797-4fbf-9f76-5e1efab685be" name="Доработка занятости" autoStart="true" description="Доработка занятости по заявке {{po.app.code}}">
                <journal time="leave">
                    <![CDATA[Занятость заемщиков изменена]]>
                </journal>
                <clientTask path="/aoa/ObjectTask" taskName="{{task.description}}">
                    <p name="clients" expression="pv[&apos;clients&apos;]"/>
                    <p name="objectKey" expression="pv[&apos;objectKey&apos;]"/>
                    <p name="actionVar" expression="&apos;clients&apos;"/>
                    <p name="actionName" expression="&apos;Продолжить&apos;"/>
                    <p name="application" expression="{**po}"/>
                    <p name="object" expression="&apos;appLoanfiz&apos;"/>
                    <p name="form" expression="&apos;acceptIncomeTask&apos;"/>
                </clientTask>
            </task>
            <script id="2d63acea-8daf-4a1c-9c0e-73d3453fdfdc" name="Обработка результатов коррекции">
                <![CDATA[pv['needAccept'] = False


for client in pv['clients']:
    # Нужно подтверждение для работающих без отчислений
    if client['income']['hasPayments'] == False and client['income']['hasWork'] == True:
        pv['needAccept'] = True
        
    # Нужно подтверждение для поручителей
    #if client['type'] == 'guarantor':
    #    process_vars['needAccept'] = True
        
#raise Exception(json.dumps(process_vars['clients'], indent=4, ensure_ascii=False))
    ]]>
            </script>
        </condition>
        <condition id="a211fbac-154f-498a-85e0-11ce52f68a7e" name="Нет" expression="pv[&apos;needRework&apos;] == False or pv.get(&apos;disableApproveIncome&apos;, False) == True"/>
    </split>
    <split id="fb385743-280e-4c89-b52e-159c7036e2ae" name="Требуется подтверждение">
        <condition id="cb8dbbfa-643b-46a1-b8c6-87c5c134caaf" name="Да" expression="pv[&apos;needAccept&apos;] == True and  pv.get(&apos;disableApproveIncome&apos;, False) == False">
            <task id="e325fe2b-fead-439a-8ca6-7cd075d10f16" name="Подтвреждение занятости" autoStart="true" description="Подтверждение занятости по заявке {{po.app.code}}">
                <clientTask path="/aoa/ObjectTask" taskName="{{task.description}}">
                    <p name="clients" expression="process_vars[&apos;clients&apos;]"/>
                    <p name="objectKey" expression="process_vars[&apos;objectKey&apos;]"/>
                    <p name="actionVar" expression="&apos;action&apos;"/>
                    <p name="readOnly" expression="True"/>
                    <p name="actions" expression="[  { &apos;name&apos;: &apos;Утвердить&apos;, &apos;value&apos;: &apos;accept&apos; }  ,  { &apos;name&apos;: &apos;Исправить&apos;, &apos;value&apos;: &apos;modify&apos; }, { &apos;name&apos;: &apos;В доработку&apos;, &apos;value&apos;: &apos;review&apos; }, { &apos;name&apos;: &apos;Отказать&apos;, &apos;value&apos;: &apos;decline&apos; }  ]"/>
                    <p name="application" expression="{ &apos;app&apos;: {}, &apos;user&apos;: {}, **po }"/>
                    <p name="object" expression="&apos;appLoanfiz&apos;"/>
                    <p name="form" expression="&apos;acceptIncomeTask&apos;"/>
                </clientTask>
            </task>
            <split id="5cbafdba-2115-4db1-86f8-adf68900ae45" name="Занятость подтвеждена">
                <condition id="ecf145ae-d73a-45d8-be8a-ab7583582dd0" name="Да" expression="process_vars[&apos;action&apos;][&apos;value&apos;] == &apos;accept&apos;">
                    <script id="93ca66f8-ab6d-4705-93a9-509c45befd16" name="Журнализация подтвеждения">
                        <journal time="leave">
                            <![CDATA[Занятость заемщиков подтверждена, {{pv.action.text}}]]>
                        </journal>
                    </script>
                </condition>
                <condition id="441786f3-358d-47ed-81c8-8f25d8cd918f" name="Исправить" expression="process_vars[&apos;action&apos;][&apos;value&apos;] == &apos;modify&apos;">
                    <script id="2b7b1794-4496-4c28-bca5-f5dd9164c644" name="Возврат на коррецию занятости">
                        <journal time="leave">
                            <![CDATA[Возврат на коррекцию занятости, {{process_vars.action.text}}]]>
                        </journal>
                        <![CDATA[
"""
process_vars['result'] = {
    'status': 'decline',
    'text': 'Не подтвеждена знятость заемщика или созаёмщика'
}
"""

process_vars['needRework'] = True

]]>
                    </script>
                    <jump id="9e029793-39e4-4154-9231-92170d445ca1" name="Переход к Требуется дорабтка заявки" target_id="132d822b-bd0b-45fb-bfdb-27bacad4c256"/>
                </condition>
                <condition id="b9e83ab5-326f-476f-b8ca-aba3244ce534" name="В доработку" expression="process_vars[&apos;action&apos;][&apos;value&apos;] == &apos;review&apos;">
                    <script id="c3f925f7-39d1-427c-a75e-dae71c674b20" name="Установка результата: В доработку">
                        <journal time="leave">
                            <![CDATA[Заявка направлена на доработку, {{process_vars.action.text}}]]>
                        </journal>
                        <![CDATA[process_vars['result'] = {
    'status': 'review',
}]]>
                    </script>
                    <terminate id="4ca4dc88-9df4-4d3d-bacb-d538526d7880" name="Завершение"/>
                </condition>
                <condition id="82cdac4d-aacb-43ee-b187-157f41f61d31" name="Отказать" expression="process_vars[&apos;action&apos;][&apos;value&apos;] == &apos;decline&apos;">
                    <script id="56196b2f-e078-484e-9b67-7923051b706f" name="Сохранение данных о занятости в заявку">
                        <![CDATA[from django.db import transaction
from apng_core.db import fetchone

with transaction.atomic(using='bank'):
    with initDbSession(application='bank').cursor() as cursor:
        p = {
            'DEP_ID': pv['dep_id'],
            'ID': pv['id'],
        }
    
        cursor.execute("""
            select JSON from L_REQDEA where DEP_ID=:DEP_ID and ID=:ID
        """, p)
        
        data = fetchone(cursor)
        
        j = json.loads(data['JSON'].read())
        
        for client in process_vars.get('clients'):
            if client['type']=='borrower':
                j['income'] = client['income']
                if client['income'].get('payments'):
                    last_payment = client['income']['payments'][-1]
                    j['income']['companyInn'] = last_payment['company_tin']
                    j['income']['companyName'] = last_payment['company_name']
            elif client['type']=='coborrower':
                for c in j['coborrowers']:
                    if c['customer']['code'] == client['cli_code']:
                        c['income'] = client['income']
                        
                        if client['income'].get('payments'):
                            last_payment = client['income']['payments'][-1]
                            c['income']['companyInn'] = last_payment['company_tin']
                            c['income']['companyName'] = last_payment['company_name']

                        break
        
        p = {**p,
            'JSON': json.dumps(j, ensure_ascii=False)
        }
        cursor.execute("""
            update L_REQDEA set JSON=:JSON where DEP_ID=:DEP_ID and ID=:ID
        """, p)
        
    #raise Exception(json.dumps(j, indent=4, ensure_ascii=False))]]>
                    </script>
                    <script id="db11d9d4-7ccf-41ea-9717-7a1b8edf0b25" name="Установка результата: отказать">
                        <journal time="leave">
                            <![CDATA[Занятость не подтверждена, {{process_vars.action.text}}]]>
                        </journal>
                        <![CDATA[process_vars['result'] = {
    'status': 'decline',
}]]>
                    </script>
                    <terminate id="26aaca21-34bf-4424-814a-c84dec389996" name="Завершение"/>
                </condition>
            </split>
        </condition>
        <condition id="055a00e6-6c97-47cd-82aa-1dfaa068a1ea" name="Нет" expression="process_vars[&apos;needAccept&apos;] == False or process_vars.get(&apos;disableApproveIncome&apos;, False) == True"/>
    </split>
    <script id="bab9b963-1a29-43cd-96c7-19de3285d757" name="Сохранение данных о занятости в заявку">
        <![CDATA[from django.db import transaction
from apng_core.db import fetchone

with transaction.atomic(using='bank'):
    with initDbSession(application='bank').cursor() as cursor:
        p = {
            'DEP_ID': process_vars['dep_id'],
            'ID': process_vars['id'],
        }
    
        cursor.execute("""
            select JSON from L_REQDEA where DEP_ID=:DEP_ID and ID=:ID
        """, p)
        
        data = fetchone(cursor)
        
        j = json.loads(data['JSON'].read())
        
        for client in pv.get('clients'):
            if client['type'] == 'borrower':
                j['income'] = client['income']
                
            elif client['type'] == 'coborrower':
                for c in j['coborrowers']:
                    if c['customer']['code'] == client['cli_code']:
                        c['income'] = client['income']
                        
                        break
                    
            elif client['type'] == 'guarantor':
                for pl in j['pledges']:
                    
                    if pl.get('JSON'):
                        # Старый формат залогов
                        pledge = pl['JSON']
                    else:
                        pledge = pl
                        
                    if pledge['type'] == 'SURETY' and (pledge['owner'].get('code') or pledge['owner'].get('CODE')) == client['cli_code']:
                        pledge['owner']['income'] = client['income']
        
        p = {**p,
            'JSON': json.dumps(j, ensure_ascii=False)
        }
        cursor.execute("""
            update L_REQDEA set JSON=:JSON where DEP_ID=:DEP_ID and ID=:ID
        """, p)
        
    #raise Exception(json.dumps(j, indent=4, ensure_ascii=False))]]>
    </script>
    <split id="952ed36d-b965-4470-8610-453255463f68" name="Сохранять в АФС">
        <condition id="d52a3d11-38e0-4fb9-a0ee-a10018f9a524" name="Да" expression="pv.get(&apos;needUpdateAfs&apos;, False) == True">
            <timer id="8033ce04-14f9-4eb2-9f09-76fd56591acc" name="Передача данных о занятости в АФС" description="Передача данных о занятости в АФС, заявка {{process_vars.application.app.code}}" duration="00:00:00" errorDuration="00:01:00" action="continue"/>
            <script id="04321c97-5307-49dc-a6e2-cfbb1adb2aa8" name="Передача данных о занятости в АФС">
                <journal time="leave">
                    <![CDATA[Сведения о доходах переданы в АФС]]>
                </journal>
                <![CDATA[from apng_core.aoa.services import execObjectMethod
import traceback
from colvir_loanapp.service import mis

pv['last_error'] = None


for client in process_vars['clients']:
    

    try:
        payments = client['income'].get('payments')
        company_info = client['income'].get('company_info')
        
        if not payments:
            payments = []
            
        response = execObjectMethod({
            'object': 'afs',
            'method': 'updateRow',
            'params': {
                'afs': client['afs'],
                'data': {
                    'has_payments': client['income']['hasPayments'],
                    'income': client['income'].get('income'),
                }
            }
        })


        response = execObjectMethod({
            'object': 'afs',
            'method': 'updateRow',
            'params': {
                'afs': client['afs'],
                'data': {
                    'NS': payments,
                }
            }
        })
        
        if company_info:
            response = execObjectMethod({
                'object': 'afs',
                'method': 'updateRow',
                'params': {
                    'afs': client['afs'],
                    'data': {
                        'CI': company_info,
                    }
                }
            })
            


    except UserException as e:
        raise e
    except Exception as e:
        raise UserException({
            'message': 'Ошибка передачи в АФС, заявка %s\n%s' % (po['app']['code'], e),
            'trace': traceback.format_exc()
        })
        

#raise Exception(json.dumps(process_vars['last_error'], indent=4))            
]]>
            </script>
        </condition>
        <condition id="7b846bbe-4829-44c7-8301-3c74c5a1036f" name="Нет" expression="process_vars.get(&apos;needUpdateAfs&apos;, False) == False"/>
    </split>
    <script id="ac836791-df6e-42ae-a754-d1d1ad9b28ee" name="Установка результата">
        <![CDATA[process_vars['result'] = {
    'status': 'accept',
}]]>
    </script>
</workflow>