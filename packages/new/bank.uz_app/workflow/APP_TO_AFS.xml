<workflow id="APP_TO_AFS" name="Передача заявки в АФС">
    <event name="onCandidates">
        <![CDATA[def depIn(dep):
    from colvir_cbs.services import bank
    return po['app']['depCode'] in bank.getDepartmentsCodes(dep)
]]>
    </event>
    <event name="onGetProcessObject">
        <![CDATA[
ok = process_vars.get('objectKey')
kv = ok.split(':')
pk = kv[1].split(',')

req = execObjectMethod({
    'object': 'app', 'method': 'getApplication', 
    'params': {'dep_id': int(pk[0]), 'id' : int(pk[1])}
})
req['parameters'] = {
    'ANNUITY': execObjectMethod({
        'object': 'product', 'method': 'getProductParameterValue',
        'params': {
            'productCode': req['app']['productCode'],
            'parameterCode': 'ANNUITY',
        }
    })
}
token._po = req
]]>
    </event>
    <script id="8c8fa9ba-b6ed-456d-8bdf-96b413a80d33" name="Инициализация">
        <![CDATA[pv['last_error'] = None

ok = pv.get('objectKey')

kv = ok.split(':')
pk = kv[1].split(',')
pv['dep_id'] = int(pk[0])
pv['id'] = int(pk[1])

pv['tax_reports'] = {}
pv['tax_periods'] = None


if not po.get('afs'):
    pv['last_error'] = {
        'message': 'Заявка не содержит информации для АФС',
        'description': 'Что-то не так с оформлением заявки либо с выбором сценария рассмотрения заявки',
    }

from apng_core.aoa.services import execObjectMethod
appSettings = execObjectMethod({'object': 'settings', 'method': 'get'})['loanapp']
pv['disableBalanceRequest'] = appSettings.get('ext.requests', {}).get('disableBalanceRequest', False)]]>
    </script>
    <split id="736a641c-c1a6-4f1d-930c-daf3d2cba250" name="Анализ заявки">
        <condition id="d42f8437-c831-4a23-ac5b-9d523998ece8" name="Пройден" expression="pv[&apos;last_error&apos;] is None"/>
        <condition id="30f9e507-f0ba-4272-9e88-ae23db17a9e1" name="Ошибка" expression="pv[&apos;last_error&apos;] is not None">
            <task id="30ca5b1d-ec74-47bf-b771-1f8346812c18" name="Показ ошибки контроля заявки" autoStart="true" description="Ошибка передачи заявки в АФС, заявка {{po.app.code}}, {{po.client.name}}">
                <clientTask path="/easyflow/error-dialog" taskName="{{task.description}}">
                    <p name="caption" expression="task[&apos;description&apos;]"/>
                    <p name="error" expression="po[&apos;last_error&apos;]"/>
                    <p name="actions" expression="[  { &apos;name&apos;: &apos;Повторить&apos;,  &apos;value&apos;: &apos;repeat&apos;  }  ]"/>
                </clientTask>
            </task>
            <jump id="1c47049f-6f0a-482f-9c81-d293f9b5b3ee" name="Переход к Инициализация" target_id="8c8fa9ba-b6ed-456d-8bdf-96b413a80d33"/>
        </condition>
    </split>
    <timer id="15ab89d3-c36d-437f-bd50-9ebe9401978d" name="Передача заявки в АФС" description="Передача заявки в АФС, {{po.app.code}}, {{po.client.name}}" duration="00:00:00" errorDuration="00:01:00" action="continue"/>
    <split id="ba3c36f0-c251-452c-91ca-6ca8575ea40c" name="Создавать мониторинг">
        <condition id="230e1f85-4244-4b9f-9806-9c616bf67ac1" name="Да" expression="(po[&apos;client&apos;][&apos;isJur&apos;] or po[&apos;client&apos;][&apos;isIE&apos;]) and po[&apos;afs&apos;].get(&apos;needMonitoring&apos;, True)">
            <split id="c19b5076-f9cb-4871-86a9-23bdc0a718bd" name="Запрашивать финотчетность в ГНК">
                <condition id="0b8ced20-c69a-4ca3-b178-ba0a76aa8821" name="Да" expression="pv.get(&apos;disableBalanceRequest&apos;) != True and po[&apos;client&apos;][&apos;isJur&apos;] and po[&apos;app&apos;].get(&apos;newObjectType&apos;, po.get(&apos;loan&apos;, {}).get(&apos;newObjectType&apos;)) != &apos;1&apos;">
                    <timer id="79fa821a-cf65-4190-9bbc-3ad68418c62a" name="Запрос отчета в ГНК" description="Запрос отчета в ГНК, заявка {{po.app.code}}, {{po.client.name}}" duration="00:00:00" errorDuration="00:05:00" action="continue"/>
                    <script id="957eec1f-3173-4567-8852-d282b1dc959e" name="Поиск финансовой отчетности в ГНК">
                        <journal time="leave">
                            <![CDATA[{% if pv.tax_periods %}
    Получена отчетность из ГНК
{% else %}
    Отчетность в ГНК отсутствует
{% endif %}]]>
                        </journal>
                        <![CDATA[import datetime as dt
import math
import traceback

reports = {}
pv['tax_reports'] = reports
pv['tax_periods'] = None
tax_code = po['client']['inn']

def get_report(name, tin, year, period):
    try:
        from apng_core.aoa.services import execObjectMethod
        reportType = {
            '1': 'buxbalans-v1',
            '2': 'finreport-v1'
        }[name]
        service = execObjectMethod({'object': 'defen', 'method': 'getServices'})[reportType]
        request = {
            'lang': 'uz',
            'tin': tin,
            'year': year,
            'period': period
        }
        response = execObjectMethod({
            'object': 'defen',
            'method': 'callApi',
            'params': {
                'path': service['path'],
                'body': request,
            }
        })

        execObjectMethod({
            'object': 'ext.request',
            'method': 'save',
            'params': {
                'applicationId': '{},{}'.format(pv['dep_id'], pv['id']),
                'serviceType': 'defen',
                'serviceRequest': reportType,
                'clientName': po['client']['name'],
                'requestData': request,
                'responseData': response,
                'state': 'processed',
            }
        })
        
        if response.get('success') and response.get('data') is not None:
            try:
                return response['data']
            except Exception as e:
                raise UserException('В ответе ГНК отсутствуют данные\nЗапрос\n%s\nОтвет\n%s' % (json.dumps(request, indent=4, ensure_ascii=False), json.dumps(response, indent=4, ensure_ascii=False)))
        return None
    except Exception as e:
        #return None
        raise UserException('Ошибка получения отчетности ГНК').withError(e)

now = dt.date.today()
year = now.year
period = math.ceil(float(now.month)/3.0)
for i in range(1, 5):
    period -= 1
    if (period < 1):
        year -= 1
        period = 4
    data = get_report("1", tax_code, year, period)
    if not(data is None):
        x = '{}-{}'.format(year, period)
        reports[x] = {}
        reports[x]['F_BS'] = data
        data = get_report("2", tax_code, year, period)
        reports[x]['F_IS'] = data
        break


if len(reports) > 0:
    year -= 1
    period = 4
    x = '{}-{}'.format(year, period)
    data = get_report("1", tax_code, year, period)
    if not(data is None):
        reports[x] = {}
        reports[x]['F_BS'] = data
        data = get_report("2", tax_code, year, period)
        reports[x]['F_IS'] = data

if len(reports) == 1:
    #year -= 1
    #period = 4
    x = '{}-{}'.format(year, period)
    reports[x] = {}

if len(reports)>0:
    pv['tax_periods'] = ','.join(reports.keys())
]]>
                    </script>
                </condition>
                <condition id="dcc5249c-270a-4437-adbd-bea76733eec7" name="Нет" expression="pv.get(&apos;disableBalanceRequest&apos;)==True or po[&apos;client&apos;][&apos;isIE&apos;] or po[&apos;app&apos;].get(&apos;newObjectType&apos;, po.get(&apos;loan&apos;, {}).get(&apos;newObjectType&apos;)) == &apos;1&apos;"/>
            </split>
            <script id="715c516b-23ac-4f7a-a6aa-c06e15b1e10f" name="Проверка корректности данных в ответе ГНК">
                <![CDATA[reports = pv['tax_reports']

for i in reports.keys():
    for s in reports[i].keys():
        data = reports[i].get(s)
        if not(data is None):
            if not (type(data) is dict and len(data) != 0):
                # один из отчетов содержит неверный ответ из ГНК
                pv['tax_reports_currupted'] = pv['tax_reports']
                pv['tax_reports'] = None
                break
    if pv['tax_reports'] is None:
        break

]]>
            </script>
            <split id="5147080c-d449-4949-a4a6-6eccacc1b638" name="Создать мониторинг/запросить периоды">
                <condition id="d034445d-8ea0-4729-b0d1-e6d1336fb8d4" name="Отчеты получены" expression="not pv[&apos;tax_periods&apos;] is None">
                    <script id="3eeb5142-78f2-4ff0-bd07-59487b5fb69c" name="Сохранение результата запроса" comment="TODO: Удалить этот блок совсем ">
                        <journal time="leave">
                            <![CDATA[Результат сохранен успешно]]>
                        </journal>
                    </script>
                </condition>
                <condition id="64445bfe-fa30-44d2-a211-1de4e98062f6" name="Нет данных" expression="pv[&apos;tax_periods&apos;] is None">
                    <task id="d1a19a2b-e066-4e9a-9ea5-a0e43d5ee553" name="Выбор периода мониторинга" autoStart="true" description="Выбор периода мониторинга, заявка {{po.app.code}}">
                        <clientTask path="/afs/mnt-period" taskName="{{task.description}}">
                            <p name="formData" expression="{&apos;period_type&apos;:&apos;Y&apos;}"/>
                        </clientTask>
                    </task>
                    <script id="fc42bfdc-efa1-4f0c-8eb7-f747a87b4038" name="Расчет периодов">
                        <![CDATA[import logging
logger = logging.getLogger('csl.mis')

#logger.debug('process_vars: %s', process_vars)

import datetime
period_type=pv['period_type']
now = datetime.date.today()
if period_type=='Y' or now.month<=3:
    #последний квартла прошлого года+ последний позапрошлого
    periods = str(now.year - 1) + '-4,' + str(now.year - 2) + '-4'
else:
    #последний квартал прошлого + предыдущий квартал этого года
    periods = str(now.year-1)+'-4,'+str(now.year)+'-'+str((now.month-1)//3+1-1)
    
pv['tax_periods'] = periods    ]]>
                    </script>
                </condition>
            </split>
            <timer id="2f7a0422-46ed-4fad-8fb1-29c8ca770376" name="Создание мониторинга в АФС" description="Создание мониторинга в АФС, заявка {{po.app.code}}, {{po.client.name}}" duration="00:00:00" errorDuration="00:02:00" action="continue"/>
            <script id="846aa0fd-435c-4523-a43e-97bc322a7a00" name="Создание мониторинга в АФС">
                <journal time="leave">
                    <![CDATA[Создан мониторинг в АФС]]>
                </journal>
                <![CDATA[from django.db import transaction
import traceback

pv['last_error'] = None
fsa_method = po['afs'].get('method')

with transaction.atomic(using='cbs'):

    num_of_periods_dict = execObjectMethod({
        'object': 'afs', 'method': 'get_num_of_periods'
    })
    num_of_periods = num_of_periods_dict["num_of_periods"]
    num_of_periods_prev = num_of_periods_dict["num_of_periods_prev"]
    
    ap = {
        'cbs_code': po['client'].get('code'),
        'cli_longname': po['client'].get('name'),
        'residfl': '1' if po['client']['isResident'] else '0',
        'mth_code': fsa_method,
        'num_of_periods': num_of_periods,
        'num_of_periods_prev': num_of_periods_prev,
        'periods': pv['tax_periods'],
    }
    
    try:
        from colvir_mis.fsa_views import create_afs_mnt_impl
        logger = logging.getLogger('csl.mis')
        logger.debug('****** ap var: %s', ap)
        monitoring_id = create_afs_mnt_impl(ap)
    except Exception as e:
        raise UserException({
            'message': 'Ошибка сервис создания мониторинга в АФС по заявке {}\n{}'.format(
                po['app']['code'],
                e
            ),
            'description': json.dumps(ap, indent=4),
            'trace': traceback.format_exc()
        })
        

    #
    # Сохарение ссылки на мониторинг в заявку
    #
    po['afs']['monitoringId'] = monitoring_id
    po['afs']['tax_flag'] = 0
    
    execObjectMethod({
        'object': 'app', 'method': 'updateApplicationJson',
        'params': {
            'DEP_ID': pv['dep_id'],
            'ID': pv['id'],
            'JSON': json.dumps({
                'afs': po['afs'],
            }, ensure_ascii=False)
        }
    })

    #операция коррекции/ввода по мониторингу
    from colvir_mis.fsa_views import open_afs_oper_impl
    p = {
        'mnt_proc_id': po['afs']['monitoringId'],
        'periods': pv['tax_periods'],
        'wf_label' :'LOAD_DATA'
    }
    pv['mnt_proc_id'] = p['mnt_proc_id']
    pv['wf_label'] = p['wf_label']

    logger.debug('open_afs_oper_impl %s', p)
    pv['opr_id'] = open_afs_oper_impl(p)
    

    #raise Exception('Тест ошибки создания мониторинга')


]]>
            </script>
            <timer id="d51d9132-127b-4129-8f32-87433815fd6c" name="Сохранение отчетов в АФС" description="Сохранение отчетов в АФС, заявка {{po.app.code}}, {{po.client.name}}" duration="00:00:00" errorDuration="00:02:00" action="continue"/>
            <script id="8be8c277-60ca-4420-9ff2-aa8a46c9325e" name="ГНК - нормальный?">
                <![CDATA[#
# Эта проверка делалась уже раньше
# похоже, тут она уже не нужна
#
reports = pv['tax_reports']
if reports:
    for i in reports.keys():
        for s in reports[i].keys():
            data = reports[i].get(s)
            if not(data is None):
                if not (type(data) is dict and len(data) != 0):
                    # один из отчетов содержит неверный ответ из ГНК
                    pv['tax_reports'] = None
                    break
        if pv['tax_reports'] is None:
            break
                ]]>
            </script>
            <split id="917ade49-cf02-4615-96f7-dbac1c9a01d0" name="split">
                <condition id="59ea5123-06b5-4170-93df-a3c21e31f7d9" name="Данные есть" expression="True" comment="not pv[&apos;tax_reports&apos;] is None"/>
                <condition id="7345527e-90c9-4776-ba9f-96fbe82422d9" name="Данных нет" expression="False" comment="pv[&apos;tax_reports&apos;] is None">
                    <jump id="e6f08674-b534-48a8-bf49-974ae8b6b137" name="Переход к Создавать мониторинг" target_id="ba3c36f0-c251-452c-91ca-6ca8575ea40c"/>
                </condition>
            </split>
            <script id="c830cb42-f98f-4105-bf78-166d18c4bea7" name="Сохранение отчетов в АФС">
                <![CDATA[process_vars['last_error'] = None
reports = pv['tax_reports']

#
# Сохарение флага наличия ГНК в заявку
#
if reports is not None and len(reports) > 0:
    po['afs']['tax_flag'] = 1
    
execObjectMethod({
    'object': 'app', 'method': 'updateApplicationJson',
    'params': {
        'DEP_ID': pv['dep_id'],
        'ID': pv['id'],
        'JSON': json.dumps({
            'afs': po['afs'],
        }, ensure_ascii=False)
    }
})

def save_report(mth_code, sheet, proc_id, period, report):
    from apng_core.csl import Csl
    with Csl('CSL_APP_URL') as csl:
        response = csl.request(
            '/FSAProcessor/Update',
            {
                'path': 'MTH=>%s,SHT=>%s' % (mth_code, sheet), 
                'schema': True,
                'id': proc_id,
                'period': period,
                'data': report
            }        
        )
        if response.status_code != 200:
            raise Exception(str(response.content, 'utf8'))

mth_code = po['afs'].get('method')
mnt_proc_id = po['afs']['monitoringId']
if reports is not None:
    for i in reports.keys():
        for s in reports[i].keys():
            data = reports[i].get(s)
            if not(data is None):
                save_report(mth_code, s, mnt_proc_id, i, data)

#пересчет листов
from colvir_mis.fsa_views import recalc_by_mnt_proc_id
recalc_by_mnt_proc_id(mnt_proc_id)  
    
#raise Exception('test')]]>
            </script>
        </condition>
        <condition id="5ab28745-a8fd-4574-a66e-072033af71a1" name="Нет" expression="(po[&apos;client&apos;][&apos;isJur&apos;] == False and po[&apos;client&apos;][&apos;isIE&apos;] == False) or po[&apos;afs&apos;].get(&apos;needMonitoring&apos;, True) == False"/>
    </split>
    <timer id="b2bd4340-d4fb-4e81-9afe-788ac97b42c3" name="Передача заявки в АФС" description="Передача заявки в АФС, {{po.app.code}}, {{po.client.name}}" duration="00:00:00" errorDuration="00:02:00" action="continue"/>
    <script id="1505a853-4df5-45b9-848c-472231e24adb" name="Построение списка передаваемых объектов">
        <![CDATA[

pv['objects'] = []

minAmount = None
maxAmount = None

product = po['product']

if po['product'].get('constraints'):
    minAmount = po['product']['constraints'].get('minAmount')
    maxAmount = po['product']['constraints'].get('maxAmount')
    
duration = None
durationUnit = None
if product.get('options') is None or product['options'].get('durationMethod') is None or product['options']['durationMethod'] == 'duration':
    duration = po['app'].get('duration')
    durationUnit = po['app'].get('durationUnit')
elif product['options'].get('durationMethod') == 'endDate':
    import datetime
    d1 = datetime.datetime.fromisoformat(po['app'].get('registrationDate')[:10])
    if not po['app'].get('durationEndDate'):
        raise UserException('Не задана дата окончания договора')
    d2 = datetime.datetime.fromisoformat(po['app'].get('durationEndDate')[:10])
    
    duration = (d2-d1).days
    durationUnit = 'D'
elif product['options'].get('durationMethod') == 'dateRange':
    import datetime
    d1 = datetime.datetime.fromisoformat(po['app'].get('fromDate')[:10])
    if not po['app'].get('toDate'):
        raise UserException('Не задана дата окончания договора')
    d2 = datetime.datetime.fromisoformat(po['app'].get('toDate')[:10])
    
    duration = (d2-d1).days
    durationUnit = 'D' 
else:
    raise UserException({
        'message': 'Не определен срок договора'
    })
    
#
# Зачитывание параметров продукта
#
from apng_core.db import fetchone

pp = execObjectMethod({
    'object': 'product', 'method': 'getAllProductParameters',
    'params': {'productCode': po['app'].get('productCode')}
})
pc = execObjectMethod({
    'object': 'product', 'method': 'getAllProductClassifiers',
    'params': {'productCode': po['app'].get('productCode')}
})

with initDbSession(application='bank').cursor() as cursor:
    cursor.execute("""
        select
            n.RATETYPE,
            v.code val_code,
            n.value/power(10, v.MULTIPLIER) value
        from t_val_std v, q_lim_rate n
        where v.id=n.val_id
            and n.RATETYPE = :ratetype
    """, {'ratetype': 'BV'})
    d = fetchone(cursor)
    
    CLC_BV = d['VALUE']

# Формирование объекта для заёмщика
borrower = {
    # Сумма заявки
    'sum': po['app'].get('amount'),
    
    # Срок
    'term': duration,
    # Размерность срока
    'term_dim': durationUnit,
    
    # Дата окончания
    'duarationEndDate': po['app'].get('duarationEndDate'),
    
    # Ставка по кредиту
    'rate': po['app'].get('interest'),
    
    # Вид кредита
    'vid': po['app'].get('typeOfLending'),
    
    # Параметры заявки
    'appParameters': po['app'].get('parameters'),
    
    # Код продукта
    'product': po['app'].get('productCode'),
    
    # Параметры продукта
    'productParameters': pp,
    
    # Классификаторы продукта
    'productClassifiers': pc,
    
    # Номер заявки
    'code': po['app'].get('code'),
    
    # Дата заявки
    'dord': po['app'].get('registrationDate'),
    
    # Минимальная сумма по продукту
    'min_sum': minAmount,
    # Максимальная сумма по продукту
    'max_sum': maxAmount,
    
    # Код клиента
    'cli_code': po['client'].get('code'),
    
    # Наименование клиента
    'cli_name': po['client'].get('name'),
    
    'annuity': po['parameters']['ANNUITY'],
    
    # Признак кредита по решению правительства
    'governmentDecision': po.get('government', {}).get('hasDecision') == True if po.get('government') else False,    
    
    # Код пользователя изменяющего заявку
    'user_code'   : po['user'].get('code') if po.get('user') else None,
    # Имя пользователя
    'user_name'   : po['user'].get('name') if po.get('user') else None,
    
    # Базовая величина
    'BV': CLC_BV,
    
    # Канал поступления заявки
    'CHANNEL': po['app'].get('inputChannel'),
    
    # Стоимость объекта кредитования по договору к-п
    'CR_OBJ_COST' : po['objectOfCredit'].get('cost') if po.get('objectOfCredit') else None,
}

if not (po['client']['isJur'] or po['client']['isIE']):
    # Атрибуты физических лиц
    borrower = {
        **borrower,
        # PINFL
        'pinfl': po['client'].get('pinfl'),
        
        # Дата рождения клиента
        'birthday': po['client'].get('birthday'),
        
        # Отчисления в ГНК
        'has_payments': po['income'].get('hasPayments'),
        # Среднемесячный доход по справке
        'income': po['income'].get('income'),
        
        # Выплаты по данным ГНК
        'payments': po['income'].get('payments'),
        'company_info': po['income'].get('company_info'),
        
        # Отчет АСОКИ 25
        'report_asoki_25': po['income'].get('report_asoki_25'),
        
    }
    
    if po.get('overdraft'):
        # Овердрафт
        borrower['income'] = po['overdraft']['card']['averageIncome']['AVRMONTH']
        borrower['card_incomes'] = po['overdraft']['card']['averageIncome']
    
    misObj = '{},{}'.format(pv['dep_id'], pv['id'])
else:
    # Атрибуты юридического лица
    if po['afs'].get('needMonitoring', True):
        misObj = po['client'].get('code')
    else:
        misObj = '{},{}'.format(pv['dep_id'], pv['id'])
    
# Добавляем параметры продукта по льготному переиоду
# TODO: Переданы appParameters, эти можно было бы и убрать но нужны изменения в методике
if po['app'].get('parameters'):
    ps = po['app']['parameters']
    if ps.get('L_PNTGRACEOD') is not None:
        borrower['gracePeriodDebt'] = ps['L_PNTGRACEOD']
    if ps.get('L_PNTGRACEPRC') is not None:
        borrower['gracePeriodInterest'] = ps['L_PNTGRACEPRC']
        
    # Сумма первоначального взноса (депозита?)
    if ps.get('L_PAYFIRST') is not None:
        # По автокредиту
        borrower['PAYFIRST'] = ps['L_PAYFIRST']
    elif ps.get('L_PAYFIRST_R') is not None:
        # По иппотеке
        borrower['PAYFIRST'] = ps['L_PAYFIRST_R']

# Добавляем анкету АФС если она есть
borrower = {
    **borrower,
    **po['afs'].get('data'),
}

obj =  {
    'type': 'borrower',
    'key': '{},{}'.format(pv['dep_id'], pv['id']),
    'method': po['afs'].get('method'),
    'sheet': po['afs'].get('sheet'),
    'schema': 'Z_ALOQA_NS',
    'description': '{}, {}'.format(po['app']['code'], po['app']['registrationDate']),
    'misObj': misObj,
    'data': borrower,
    'isJur': po['client']['isJur'],
    'isIE': po['client']['isIE'],
}




pv['objects'].append(obj)

#
# Созаёмщики
#
if po.get('coborrowers'):
    for cb in po['coborrowers']:
        coborrower = {

            # Код клиента
            'cli_code': cb['customer'].get('code'),
            
            # Наименование клиента
            'cli_name': ' '.join(filter(None, [cb['customer'].get('lastname'), cb['customer'].get('firstname'), cb['customer'].get('secondname')])),
            
            # PINFL
            'pinfl': cb['customer'].get('pinfl'),

            # Отчисления в ГНК
            'has_payments': cb['income'].get('hasPayments'),
            # Среднемесячный доход по справке
            'income': cb['income'].get('income'),
            
            # Выплаты по данным ГНК
            'payments': cb['income'].get('payments'),
            'company_info': cb['income'].get('company_info'),
            
            # Отчет АСОКИ 25
            'report_asoki_25': cb['income'].get('report_asoki_25'),
            
        }
        
        if 'nord' in cb:
            # Старый способ сохранения созаёмщиков
            afs_key = '{},{},{}'.format(pv['dep_id'], pv['id'], cb['nord'])
        else:
            afs_key = '{},{},{}'.format(pv['dep_id'], pv['id'], cb['customer']['code'])
            
        pv['objects'].append({
            'type': 'coborrower',
            'key': afs_key,
            'method': cb['afs'].get('method'),
            'sheet': cb['afs'].get('sheet'),
            'schema': 'Z_ALOQA_NS',
            'description': '{}, {}'.format(po['app']['code'], po['app']['registrationDate']),
            'misObj': '{},{}'.format(pv['dep_id'], pv['id']),
            'data': coborrower,
            'isJur': cb['customer']['isJur'],
            'isIE': cb['customer']['isIE'],
        })

pv['index'] = 0

#raise Exception('%s' % (json.dumps(process_vars['objects'], indent=4, ensure_ascii=False)))

]]>
    </script>
    <script id="46add423-d175-4a78-952a-ed2857334fa6" name="Начало обработки объектов"/>
    <split id="4eac3746-af95-4b50-b99e-93b81c5453fa" name="Есть объекты для передачи">
        <condition id="b09de1e0-b928-4b82-9451-cbf16a966398" name="Да" expression="pv[&apos;index&apos;] &lt; len(pv[&apos;objects&apos;])">
            <script id="04c2c0ed-e8a3-4d6e-af08-982838476905" name="Выбор объекта">
                <![CDATA[pv['object'] = pv['objects'][pv['index']]
]]>
            </script>
            <timer id="8a311133-727a-4ff9-821f-6cbe79db7c34" name="Передача объекта в АФС" description="Передача объекта в АФС, {{po.app.code}} {{pv.object.data.cli_name}}" duration="00:00:00" errorDuration="00:02:00" action="continue"/>
            <script id="9022e80f-df8d-4158-9645-c0986961d4fa" name="Сохранение объекта в АФС">
                <journal time="leave">
                    <![CDATA[Клиент {{pv.object.data.cli_name}} зарегистрирован в АФС]]>
                </journal>
                <![CDATA[
obj = pv['object']

pv['last_error'] = None

#raise Exception(json.dumps(process_vars['object'], indent=4, ensure_ascii=False))

try:
    afs = {
        'method': obj['method'],
        'sheet': obj['sheet'],
        'key': obj['key']
    }
    
    if obj['type'] == 'borrower' and (not obj.get('isJur') and not obj.get('isIE') or po['afs'].get('needMonitoring', True) == False):
        response = execObjectMethod({
            'object': 'afs',
            'method': 'updateEntity',
            'params': {
                'method': obj['method'],
                'key': obj['key'],
                'value': obj['description'],
            }
        })
        
    response = execObjectMethod({
        'object': 'afs',
        'method': 'updateRow',
        'params': {
            'afs': afs,
            'data': {
                **obj['data'],
                'OBJ': obj['misObj']
            },
        }
    })

    if obj['data'].get('has_payments') == True:
        if obj['data'].get('payments'):
            # Есть отчисления в ГНК
            response = execObjectMethod({
                'object': 'afs',
                'method': 'updateRow',
                'params': {
                    'afs': afs,
                    'data': {
                        'NS': obj['data']['payments'],
                    },
                }
            })
        
        if obj['data'].get('company_info'):
            response = execObjectMethod({
                'object': 'afs',
                'method': 'updateRow',
                'params': {
                    'afs': afs,
                    'data': {
                        'CI': obj['data']['company_info'],
                    },
                }
            })
        
        if obj['data'].get('report_asoki_25'):
            response = execObjectMethod({
                'object': 'afs',
                'method': 'updateRow',
                'params': {
                    'afs': afs,
                    'data': {
                        'INPS': obj['data']['report_asoki_25'],
                    },
                }
            })
            
                    
        
        
except UserException as e:
    raise

except Exception as e:
    raise Exception('Ошибка вызова метода АФС, заявка %s\n%s' % (
        po['app']['code'], e
    ))
    
token.save_vars({
    'object': pv['object']
})

#
# Выбор следующего объекта
#
pv['index'] = pv['index'] + 1
]]>
            </script>
            <jump id="dcf6c67d-d7d1-4413-a134-5b5762768374" name="Переход к Начало обработки объектов" target_id="46add423-d175-4a78-952a-ed2857334fa6"/>
        </condition>
        <condition id="2b1d8d4d-c1a2-4a61-be13-512c0029dd30" name="Нет"/>
    </split>
</workflow>