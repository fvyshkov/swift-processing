<workflow id="APP_ASOKI_REPORT" name="ASOKI Requests">
    <event name="onGetProcessObject">
        <![CDATA[ok = pv.get('objectKey')

kv = ok.split(':')
pk = kv[1].split(',')


from colvir_cbs.auth import AuthenticatedUser
with AuthenticatedUser() as au:
    from apng_core.aoa.services import execObjectMethod
    token._po = execObjectMethod({
        'object': 'app', 'method': 'getApplication',
        'params': {
            'dep_id': int(pk[0]),
            'id'    : int(pk[1]),
        }
    })

]]>
    </event>
    <context>
        <![CDATA[{}]]>
    </context>
    <script id="4f1ee461-effa-4266-a506-98eef7b4c785" name="Инициализация">
        <![CDATA[ok = process_vars.get('objectKey')


kv = ok.split(':')
pk = kv[1].split(',')
pv['dep_id'] = int(pk[0])
pv['id'] = int(pk[1])

]]>
    </script>
    <timer id="967c43db-ed81-45cc-a053-5c001bddeac5" name="Таймер, 0сек" description="Выполнение запросов в АСОКИ, заявка {{po.app.code}}" duration="00:00:00" errorDuration="00:01:00" action="continue"/>
    <script id="54f4c3bc-8d4c-4267-974a-85003a337044" name="Подготовка списка запросов">
        <![CDATA[from colvir_cbs.auth import AuthenticatedUser
from colvir_cbs import oracle

# Список запросов которые нужно обработать
pv['requests'] = []

schema = 'Z_ALOQA_R022'

# Заёмщик, заявка
pv['requests'].append({
    'type': 'borrower',
    'client': {
        'code': po['client']['code'],
        'name': po['client']['name'],
    },
    'claimId': po['app']['appId'],
    'report': 22,
    'afs': {
        'method': po['afs']['method'],
        'sheet': po['afs']['sheet'],
        'schema': schema,
        'key': '%s,%s' % (pv['dep_id'], pv['id']),
    },
})


# Созаёмщики
if po.get('coborrowers'):
    for coborrower in po['coborrowers']:
        
        if not coborrower.get('appId'):
            raise Exception('Для созаёмщика не сформирован номер заявки (при регистрации)')
        
        if 'nord' in coborrower:
            # Старый способ сохранения созаёмщиков
            afs_key = '%s,%s,%s' % (pv['dep_id'], pv['id'], coborrower['nord'])
        else:
            afs_key = '%s,%s,%s' % (pv['dep_id'], pv['id'], coborrower['customer']['code'])
            
        
        pv['requests'].append({
            'type': 'coborrower',
            'client': {
                'code': coborrower['customer']['code'],
                'name': coborrower['customer']['name'],
            },
            'parentClaimId': po['app']['appId'],
            'claimId': coborrower['appId'],
            'report': 22,
            'afs': {
                'method': coborrower['afs']['method'],
                'sheet': coborrower['afs']['sheet'],
                'schema': schema,
                'key': afs_key
            },
        })
        
process_vars['index'] = 0
        
#raise Exception(json.dumps(process_vars['requests'], ensure_ascii=False, indent=4))

#
# Исключение запросов, выполненных ранее
#
reviewProcess = token.getTopProcess()
asokiRequests = reviewProcess.vars_dict.get('asoki_requests')
if asokiRequests is not None:
    found = []
    for r in asokiRequests:
        for r2 in pv['requests']:
            if r['claimId'] == r2['claimId']:
                found.append(r2)

    for f in found:
        pv['requests'].remove(f)

]]>
    </script>
    <split id="8df03ceb-7e8a-4244-8eb5-8aedec3dc5aa" name="Следующий запрос">
        <condition id="47ddfa39-a370-427b-9eb5-9de92da8594b" name="Да" expression="len(pv[&apos;requests&apos;]) &gt; pv[&apos;index&apos;]">
            <call id="d72a2fe6-4be8-432a-88f8-434871858a7f" name="Выполнение запроса в АСОКИ" call="&apos;APP_ASOKI_REPORT_REQUEST&apos;" result_from="response" result_to="response">
                <p name="objectKey" expression="pv[&apos;objectKey&apos;]"/>
                <p name="request" expression="pv[&apos;requests&apos;][process_vars[&apos;index&apos;]]"/>
            </call>
            <script id="cfa44793-0fbd-4119-ab23-022c70ca056c" name="Выбор следующего запроса">
                <![CDATA[# Сохранение результата
pv['requests'][pv['index']]['response'] = pv['response']

# Следующий
pv['index'] = pv['index'] + 1]]>
            </script>
            <jump id="1749ec95-fe43-4667-af62-1578a44511bf" name="Переход к Следующий запрос" target_id="8df03ceb-7e8a-4244-8eb5-8aedec3dc5aa"/>
        </condition>
        <condition id="1a775037-4c70-48e6-9b27-7bfe0acac865" name="Нет"/>
    </split>
    <script id="d6bd9bf0-d31d-4ef1-ba61-b7e42e539ea2" name="Подготовка к отмене заявок по созаёмщикам">
        <![CDATA[
pv['cancelClaims'] = []

for request in pv['requests']:
    if request['type'] == 'coborrower':
        pv['cancelClaims'].append({
            'claimId': request['claimId'],
            'client': request['client'],
        })
        
pv['index'] = 0

]]>
    </script>
    <split id="56d5131d-86b8-494d-bf6b-f966288f54ac" name="Есть заявки для отмены">
        <condition id="80f189ba-188b-43e3-97a4-ebbcc4ba4b30" name="Да" expression="len(pv[&apos;cancelClaims&apos;]) &gt; 0">
            <timer id="8b518d39-b3c3-4308-a06d-ee67877fbf99" name="Отмена заявок по созаёмщикам" description="Отмена заявок по созаёмщикам" duration="00:00:00" errorDuration="00:01:00" action="continue"/>
            <split id="c0ccebf4-0a35-40b5-b2a0-5855313efe66" name="Следующий запрос">
                <condition id="7b879970-29fd-4043-a1d2-6f439550e86a" name="Да" expression="len(pv[&apos;cancelClaims&apos;]) &gt; pv[&apos;index&apos;]">
                    <call id="d65c9124-cac3-4fab-8203-6f31215790a1" name="Отмена заявки в АСОКИ" call="&apos;KATM_CANCEL&apos;">
                        <p name="claim_id" expression="pv[&apos;cancelClaims&apos;][pv[&apos;index&apos;]][&apos;claimId&apos;]"/>
                    </call>
                    <script id="034269dc-4006-476b-8bce-50cdedcb568f" name="Следующий запрос">
                        <![CDATA[pv['index'] = pv['index']+1]]>
                    </script>
                    <jump id="e5d19160-5038-4878-a709-7f995d1aa6ed" name="Переход к Следующий запрос" target_id="c0ccebf4-0a35-40b5-b2a0-5855313efe66"/>
                </condition>
                <condition id="0f84dfa5-d46a-4863-a507-6a801b84affb" name="Нет"/>
            </split>
        </condition>
        <condition id="4768d642-ca81-43da-996d-599568b0b774" name="Нет"/>
    </split>
    <split id="e26e78af-0df0-4662-981f-d0fe88ae2c48" name="Есть отчеты для передачи в АФС">
        <condition id="5712635d-1c7f-41b6-b77c-db263f876f7a" name="Да" expression="len(pv[&apos;requests&apos;]) &gt; 0">
            <timer id="e05740cb-85d7-4f3d-8107-c4c4714982f3" name="Передача отчетов в АФС" description="Передача отчетов в АФС" duration="00:00:00" errorDuration="00:01:00" action="continue"/>
            <script id="cb237d46-16a9-489b-bff6-67c0af708ce5" name="Передача отчетов в АФС">
                <![CDATA[import traceback
import json

from apng_core.csl import Csl

pv['last_error'] = None

try:

    for r in pv['requests']:
        # Если не было ответа, то ничего не отправляем. Иначе АФС падает с ошибкой
        if r.get('response') is None:
            continue
        
        with Csl('CSL_APP_URL') as csl:
            response = csl.request(
                '/ESInputData/UpdateRow',
                {
                    'header': {
                        'path'      : 'MTH=>%s,SHT=>%s' % (r['afs']['method'], r['afs']['sheet']), 
                        'key'       : r['afs']['key'],
                    },
                    'data': {'KATM': r['response']},
                }        
            )
            if response.status_code != 200:
                raise UserException({
                    'message': 'Ошибка отправки отчета в АФС, заявка %s' % po['app']['code']
                }).withError(csl.extractLastError())
            
except UserException as e:
    raise e
    
except Exception as e:
    raise UserException({
        'message': 'Ошибка передачи информации в АФС\n%s' % e,
        'trace': traceback.format_exc()
    })
                
            ]]>
            </script>
            <script id="680f658a-1b40-4e30-b541-2824cd015ea4" name="Журнализация передачи в АФС">
                <journal time="leave">
                    <![CDATA[Отчеты АСОКИ переданы в АФС]]>
                </journal>
            </script>
        </condition>
        <condition id="8c35fba1-2384-43b4-a7c8-f8694c73a0d5" name="Нет" expression="len(process_vars[&apos;requests&apos;]) == 0"/>
    </split>
    <script id="6d9cc894-b8c1-48aa-a1fe-841df71cc0e3" name="Сохранение запросов при основном процессе">
        <![CDATA[
reviewProcess = token.getTopProcess()
asokiRequests = reviewProcess.vars_dict.get('asoki_requests')

if asokiRequests is None:
    raise StopScriptExecution()
    
for r in pv['requests']:
    asokiRequests.append({
        'claimId': r['claimId']
    })

reviewProcess.save_vars({
    'asoki_requests': asokiRequests,
})

]]>
    </script>
</workflow>