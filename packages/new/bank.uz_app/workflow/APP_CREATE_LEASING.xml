<workflow id="APP_CREATE_LEASING" name="Создание договора лизинга">
    <event name="onCandidates">
        <![CDATA[def depIn(dep):
    from colvir_cbs.services import bank
    return po['app']['depCode'] in bank.getDepartmentsCodes(dep)
]]>
    </event>
    <script id="efa33d21-f49f-44bd-926a-f4b0b7e0b3ca" name="Инициализация">
        <![CDATA[
ok = process_vars.get('objectKey')
if not ok:
    ok = 'loanapp: 2992,23217121'
    process_vars['objectKey'] = ok

kv = ok.split(':')
pk = kv[1].split(',')
process_vars['dep_id'] = int(pk[0])
process_vars['id'] = int(pk[1])

if process_vars.get('req') is None:
    from colvir_cbs.auth import AuthenticatedUser
    from loanapp.services.application import getApplication
    with AuthenticatedUser():
        process_vars['req'] = getApplication({
            'dep_id': process_vars['dep_id'],
            'id'    : process_vars['id'],
        })
    

    ]]>
    </script>
    <timer id="71997255-281c-4ec5-869f-c00d31325d31" name="Создание договора лизинга" description="Создание договора лизинга, заявка {{process_vars.req.app.code}}, {{process_vars.req.client.name}}" duration="00:00:00" action="continue"/>
    <script id="1685f8d9-61f7-463e-be2a-cce25ffb3c59" name="Создание договора лизинга">
        <![CDATA[from django.db import transaction, connections
from colvir_cbs.auth import AuthenticatedUser
from apng_core.aoa.services import execObjectMethod
import traceback

process_vars['last_error'] = None

with AuthenticatedUser() as au:
    try:
        with transaction.atomic(using='cbs'):
            
            # Создание договора
            try:
                
                pv['dea'] = execObjectMethod({
                    'object': 'loanapp',
                    'method': 'createLeasing',
                    'params': {
                        'req_dep_id': process_vars['dep_id'],
                        'req_id': process_vars['id'],
                    }
                })
            except UserException as e:
                raise UserException({
                    'message': 'Ошибка создания договора лизинга по заявке %s\n%s' % (process_vars['req']['app']['code'], e)
                }).withError(e.getError())
            except Exception as e:
                raise UserException({
                    'message': 'Ошибка создания договора лизинга по заявке %s\n%s' % (process_vars['req']['app']['code'], e),
                    'trace': traceback.format_exc()
                })
            
            
            # Сохранение ссылки на договор при заявке        
            from colvir_cbs.services.application import updateApplicationJson
            updateApplicationJson({
                'DEP_ID': process_vars['dep_id'],
                'ID': process_vars['id'],
                'JSON': json.dumps({
                    'dea': {
                        'dep_id': process_vars['dea']['dep_id'],
                        'id': process_vars['dea']['id'],
                        'code': process_vars['dea']['code'],
                    },
                }, ensure_ascii=False)
            })    
    
            #
            # Сохранение объектов лизинга
            #
            from loanapp.services import leasing
            leasing.saveLeasingObjects({
                'dea_dep_id': process_vars['dea']['dep_id'],
                'dea_id': process_vars['dea']['id'],
                'objects': process_vars['req']['leasing']['objectList']
            })
            
            # Сохраняем обеспечение при договоре
            execObjectMethod({
                'object': 'cbsPledge',
                'method': 'saveAppPledges',
                'params': {
                    'dep_id': process_vars['dea']['dep_id'],
                    'id': process_vars['dea']['id'],
                    'pledges': process_vars['req'].get('pledges'),
                    'forceNew': True,
                }
            })
            
            
            #raise Exception('OK')
            
    except Exception as e:
        raise UserException({
            'message': 'Ошибка создания договора лизинга, заявка %s\n%s' % (process_vars['req']['app']['code'], e),
            'trace': traceback.format_exc()
        })
    
    ]]>
    </script>
    <split id="cf85ab12-c440-47f7-9922-4d7032205c59" name="Результат создания договора лизинга">
        <condition id="f2e22149-b31c-412b-9fbe-e13371d72b9e" name="Успешно">
            <script id="d63c942f-73a1-4f9b-8612-4cca90ae3fb9" name="Журнализация результата">
                <journal time="leave">
                    <![CDATA[По заявке {{process_vars.req.app.code}} создан договор лизинга {{process_vars.dea.code}}]]>
                </journal>
                <![CDATA[
                
            ]]>
            </script>
        </condition>
        <condition id="32954907-f10c-4ad9-9bc6-39c77716f865" name="Ошибка" expression="False">
            <task id="e97f6bd4-222e-4e6e-97a3-1a5bdb3ea91a" name="Показ ошибки создания договора лизинга" autoStart="true" description="Показ ошибки создания договора лизинга {{process_vars.req.app.code}}">
                <clientTask path="/easyflow/error-dialog" taskName="{{task.description}}">
                    <p name="error" expression="process_vars[&apos;last_error&apos;]"/>
                    <p name="actionVar" expression="&apos;action&apos;"/>
                    <p name="actions" expression="[{ &apos;name&apos;: &apos;Повторить&apos;, &apos;value&apos;: &apos;repeat&apos;},  ]"/>
                    <p name="objectKey" expression="process_vars.get(&apos;objectKey&apos;)"/>
                </clientTask>
            </task>
            <jump id="3d92f771-67f1-44ad-8857-4d84c227d2ab" name="Переход к Создание договора лизинга" target_id="1685f8d9-61f7-463e-be2a-cce25ffb3c59"/>
        </condition>
    </split>
</workflow>