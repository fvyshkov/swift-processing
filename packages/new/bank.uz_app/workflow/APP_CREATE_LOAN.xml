<workflow id="APP_CREATE_LOAN" name="Создание договора по заявке">
    <event name="onGetProcessObject">
        <![CDATA[
ok = process_vars.get('objectKey')

    
kv = ok.split(':')
pk = kv[1].split(',')


token._po = execObjectMethod({
    'object': 'app', 'method': 'getApplication',
    'params': {
        'dep_id': int(pk[0]),
        'id'    : int(pk[1]),
    }
})
]]>
    </event>
    <script id="init" name="Инициализация">
        <![CDATA[
ok = process_vars.get('objectKey')

kv = ok.split(':')
pk = kv[1].split(',')
pv['dep_id'] = int(pk[0])
pv['id'] = int(pk[1])

    ]]>
    </script>
    <timer id="3b68db97-e766-44ed-b0de-94a0f58db53f" name="Создание договора" description="Создание договора по заявке {{po.app.code}}, {{po.client.name}}" duration="00:00:00" errorDuration="00:05:00" action="continue"/>
    <script id="a489c4d5-370e-45bd-8731-f5380fa02ed7" name="Подготовка заявки к созданию договора">
        <![CDATA[from apng_core.db import fetchone
from django.db import transaction

import logging
logger = logging.getLogger('loanapp')

with initDbSession(application='bank').cursor() as cursor:

    # Определение вида договора по сценарию продукта
    p = {
        'DCL_CODE' : po['app']['productCode'], 
    }
        
    cursor.execute("""
        select 
            b.code bscode
        from t_bop_dscr b, t_deacls c 
        where c.code=:DCL_CODE
            and b.id(+)=c.bop_id
        """,
        p
    )
    
    d = fetchone(cursor)
    
    if d['BSCODE'] == 'CS_CRED':
        process_vars['docType'] = 'loan'
    elif d['BSCODE'] == 'CS_CR_LIN':
        process_vars['docType'] = 'loanline'
    else:
        raise Exception('Сценарий предназначен для создания договора кредита/линии. %s не поддерживается' % d['BSCODE'])

]]>
    </script>
    <split id="fd7207bc-bce8-4e88-a71c-9422e153f875" name="Вид договора">
        <condition id="f271b58b-85da-42cd-a71d-e127cb42b2f4" name="Кредит" expression="process_vars[&apos;docType&apos;] == &apos;loan&apos;">
            <script id="38b68a08-d58b-4f73-a4be-1bcd0eb663f4" name="Создание договора кредита">
                <![CDATA[import traceback
from django.db import transaction, connections
from django.conf import settings
from datetime import date

pv['last_error'] = None


try:


    with transaction.atomic(using=settings.APPS_DB['bank']):

        # Создание договора
        try:
            
            pv['dea'] = execObjectMethod({
                'object': 'loanapp',
                'method': 'createLoan',
                'params': {
                    'req_dep_id': pv['dep_id'],
                    'req_id': pv['id'],
                }
            })
        except UserException as e:
            raise UserException({
                'message': 'Ошибка создания договора по заявке %s\n%s' % (po['app']['code'], e)
            }).withError(e.getError())
        except Exception as e:
            raise UserException({
                'message': 'Ошибка создания договора по заявке %s\n%s' % (po['app']['code'], e),
                'trace': traceback.format_exc()
            })
            
        # Установка счета выдачи и пошаения
        if False and po['app'].get('cardIdn'):
            try:
                account = execObjectMethod({
                    'object': 'card',
                    'method': 'getAccountByCardIdn',
                    'params': {
                        'cardIdn': po['app']['cardIdn']
                    }
                })
                pv['issueAcccount'] = account
                
                setAccountResult = execObjectMethod({
                    'object': 'loanapp',
                    'method': 'setClientAccount',
                    'params': {
                        'dep_id': pv['dea']['dep_id'],
                        'id': pv['dea']['id'],
                        'accountNo': account['accountNo']
                    }
                })
                if setAccountResult.get('log'):
                    token.save_vars({'setClientAccountLog': setAccountResult['log']})
            except UserException as e:
                raise UserException({
                    'message': 'Ошибка установки счета клиента по договору, заявка {appNo}, договор {deaNo}\n{message}'.format(
                        appNo = po['app']['code'],
                        deaNo = pv['dea']['code'],
                        message = e
                    )
                }).withError(e.getError())
    
        # Сохранение ссылки на договор при заявке
        execObjectMethod({
            'object': 'app', 'method': 'updateApplicationJson',
            'params': {
                'DEP_ID': pv['dep_id'],
                'ID': pv['id'],
                'JSON': json.dumps({
                    'dea': {
                        'dep_id': pv['dea']['dep_id'],
                        'id': pv['dea']['id'],
                        'code': pv['dea']['code'],
                        'refer': pv['dea']['refer']
                    },
                }, ensure_ascii=False)
            }
        })
            
            
        # Сохраняем обеспечение при договоре
        execObjectMethod({
            'object': 'bank_pledge',
            'method': 'saveAppPledges',
            'params': {
                'dep_id': pv['dea']['dep_id'],
                'id': pv['dea']['id'],
                'pledges': po['pledges'],
                'forceNew': True,
            }
        })
        
        # Сохраняем созаёмщиков
        if po.get('coborrowers'):
            execObjectMethod({
                'object': 'loan',
                'method': 'saveCoborrowers',
                'params': {
                    'dep_id': pv['dea']['dep_id'],
                    'id': pv['dea']['id'],
                    'coborrowers': [x['customer'] for x in po['coborrowers']],
                }
            })
        
        # Сохранение досье при договоре
        execObjectMethod({
            'object': 'app', 'method': 'attachDocumentsToDea',
            'params': {
                'req_dep_id': pv['dep_id'],
                'req_id': pv['id'],
                'dea_dep_id': pv['dea']['dep_id'],
                'dea_id': pv['dea']['id'],
            }
        })

except UserException as e:
    raise
except Exception as e:
    raise UserException({
        'message': 'Ошибка создания кредитного договора по заявке {appNo}\n{message}'.format(
            appNo=po['app']['code'],
            message=e
        ),
        'trace': traceback.format_exc()
    })

]]>
            </script>
        </condition>
        <condition id="5842d5f4-ff99-4de6-9f62-27bcf3e89398" name="Линия" expression="process_vars[&apos;docType&apos;] == &apos;loanline&apos;">
            <script id="3f87c54a-3771-4660-98d3-26007b11970e" name="Создание договора линии">
                <![CDATA[import traceback
from django.db import transaction, connections
from colvir_cbs.auth import AuthenticatedUser
from apng_core.aoa.services import execObjectMethod

pv['last_error'] = None


with AuthenticatedUser() as au:

    with transaction.atomic(using='cbs'):
        try:
            pv['dea'] = execObjectMethod({
                'object': 'loanapp', 'method': 'createLine',
                'params': {
                    'req_dep_id': pv['dep_id'],
                    'req_id': pv['id'],
                }
            })
        except Exception as e:
            raise UserException({
                'message': 'Ошибка создания договора кредитной линии по заявке %s' % po['app']['code'],
                'description': '%s' % e,
            }).withError(e)
        

            
        # Сохранение ссылки на договор при заявке
        execObjectMethod({
            'object': 'app', 'method': 'updateApplicationJson',
            'params': {
                'DEP_ID': pv['dep_id'],
                'ID': pv['id'],
                'JSON': json.dumps({
                    'dea': {
                        'dep_id': pv['dea']['dep_id'],
                        'id': pv['dea']['id'],
                        'code': pv['dea']['code'],
                    },
                }, ensure_ascii=False)
            }
        })

        # Сохраняем обеспечение при договоре
        execObjectMethod({
            'object': 'cbsPledge',
            'method': 'saveAppPledges',
            'params': {
                'dep_id': pv['dea']['dep_id'],
                'id': pv['dea']['id'],
                'pledges': po['pledges'],
                'forceNew': True,
            }
        })

        # Сохранение досье при договоре
        execObjectMethod({
            'object': 'app', 'method': 'attachDocumentsToDea',
            'params': {
                'req_dep_id': pv['dep_id'],
                'req_id': pv['id'],
                'dea_dep_id': pv['dea']['dep_id'],
                'dea_id': pv['dea']['id'],
            }
        })
        



    

]]>
            </script>
        </condition>
    </split>
    <script id="app_create_loan_result" name="Журнализация номера договора">
        <journal time="leave">
            <![CDATA[Создан кредитный договор номер {{process_vars.dea.code}}]]>
        </journal>
    </script>
    <timer id="5be869a6-4dd3-47f4-b1a4-4e7ddf6d4d92" name="Выполнение операций по договору" description="Выполнение операций по договору, заявка {{po.app.code}}, договор {{pv.dea.code}}" duration="00:00:00" errorDuration="00:05:00" action="continue"/>
    <script id="1295350a-7fdf-4379-b077-a428e9ccba3b" name="Выполнение операций по договору">
        <![CDATA[import traceback
from django.db import transaction
from django.conf import settings

pv['last_error'] = None

if po['client']['isJur'] or po['client']['isIE']:
    raise StopScriptExecution()

try:
    with transaction.atomic(using=settings.APPS_DB['bank']):
        
        with initDbSession(application='bank').cursor() as cursor:
            p = {
                'DEP_ID': process_vars['dea']['dep_id'],
                'ID': process_vars['dea']['id'],
            }
            
            cursor.execute("""
                declare
                    bopCode varchar2(60);
                begin
                
                    -- Определяем вид сценария договора
                    bopCode := T_PkgProcess.fGetBopCodeByMainOrd(:DEP_ID, :ID);
                
                    if bopCode in ('CS_CRED') then
                        -- Расчет графика
                        --if T_PkgRunOprUtl.fOprAvailable(:DEP_ID, :ID, 'CALCSHD') = 2 then
                            if T_PkgRunOprUtl.fOprExist(T_PkgProcess.fGetIdByMainOrd(:DEP_ID, :ID), 'CALCSHD') = 0 then
                                T_PkgRunOprUtl.pRunOprByMainOrd(:DEP_ID, :ID, 'CALCSHD', '');
                            end if;
                        --end if;
                        
                        
                        -- Расчет эффективной ставки                                
                        --if T_PkgRunOprUtl.fOprAvailable(:DEP_ID, :ID, 'CREDITRATE') = 2 then
                            if T_PkgRunOprUtl.fOprExist(T_PkgProcess.fGetIdByMainOrd(:DEP_ID, :ID), 'CREDITRATE') = 0 then
                                T_PkgRunOprUtl.pRunOprByMainOrd(:DEP_ID, :ID, 'CREDITRATE', 
                                    'REASON=>''Выдача займа'', REASON_VALUE=>1'
                                );
                            end if;
                        --end if;
                    end if;
                    
                end;
            /""", p)
    
except Exception as e:
    raise Exception(
        'Ошибка актуализации договора по завке %s, договор %s\n%s' % (po['app']['code'], pv['dea']['code'], e)
    )
]]>
    </script>
    <split id="7d0824c1-91b9-43ab-894e-5bbfbc19e4f6" name="Требуется актуализация">
        <condition id="d5fa275b-3824-4147-ae08-8228ad7d72d9" name="Да" expression="process_vars.get(&apos;needActual&apos;, False)">
            <script id="0d0ba172-e3f9-4507-9007-e2160c340ad5" name="Актуализация договора">
                <![CDATA[from colvir_cbs.auth import AuthenticatedUser
]]>
            </script>
        </condition>
        <condition id="45dbce01-0649-4004-8f67-e13a56844701" name="Нет" expression="not process_vars.get(&apos;needActual&apos;, False)"/>
    </split>
</workflow>