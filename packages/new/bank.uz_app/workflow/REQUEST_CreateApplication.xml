<workflow id="REQUEST_CreateApplication" name="API. Создание заявки Онлайнмикрозайм">
    <script id="fab4d418-318b-44d4-93e3-3c1cb44071a3" name="Инициализация">
        <![CDATA[
request = process_vars.get('request')
if not request:
    process_vars['error'] = {
        'error_text': 'Не описан запрос к методу'
    }
    raise StopScriptExecution()

if not request.get('clientId'):
    process_vars['error'] = {
        'error_text': 'Не передан clientId'
    }
    raise StopScriptExecution()
    
if not request.get('product_code'):
    process_vars['error'] = {
        'error_text': 'Не передан product_code'
    }
    raise StopScriptExecution()
    
if not request.get('amount'):
    process_vars['error'] = {
        'error_text': 'Не передан amount'
    }
    raise StopScriptExecution()
    
# Нужен только для онлайн микро займа
if not request.get('cardIdn'):
    process_vars['error'] = {
        'error_text': 'Не передан cardIdn'
    }
    raise StopScriptExecution()


#
# Запрет одновременной обработки запросов по одному клиенту
#
import uwsgi
pv['lockKey'] = 'app_client_%s' % request['clientId']
clientInWork = uwsgi.cache_exists(pv['lockKey'])
if clientInWork:
    process_vars['error'] = {
        'error_text': 'По клиенту есть запросы в обработке, повторите позже',
        'description': 'Клиент id: %s' % request['clientId'],
    }
    raise StopScriptExecution()
    
uwsgi.cache_set(pv['lockKey'], '1'.encode(), 120)



from colvir_cbs.auth import AuthenticatedUser
from apng_core.db import fetchall


with AuthenticatedUser(user='COLVIR') as au:
    with au.getConnection().cursor() as cursor:
        r = None
        
        if request.get('product_code'):
            p = {
                'DCL_CODE' : request.get('product_code'), 
            }
                
            cursor.execute("""
                SELECT 
                    T_PkgDea.fDclId(:DCL_CODE, 0) DCL_CODE
                FROM DUAL
                """,
                p
            )
    
            data = fetchall(cursor)
            r = data[0]
            if not (r['DCL_CODE']):
                process_vars['error'] = {
                    'error_text': 'Код продукта не существует',
                    'error_description': 'Передайте правильный код проукта, product_code',
                }
                raise StopScriptExecution()
                
    from colvir_cbs.services.client import getClient
    client = getClient({'code': process_vars['request']['clientId']})
    
    if client is None:
        process_vars['error'] = {
            'error_text': 'Карточка клиента не существует',
            'error_description': 'Передайте правильный код карточки клиента, clientId',
        }
        raise StopScriptExecution()

    if not client['isResident']:
        process_vars['error'] = {
            'error_text': 'Запрещено выдавать кредиты нерезидентам',
            'error_description': 'Обратитесь в банк',
        }
        raise StopScriptExecution()

    if client.get('isClosed'):
        process_vars['error'] = {
            'error_text': 'Карточка клиента закрыта',
            'error_description': 'Обратитесь в банк',
        }
        raise StopScriptExecution()
        
    
    if client.get('registrationAddress') is None or len(client['registrationAddress'].keys())==0:
        process_vars['error'] = {
            'error_text': 'В карточке клиента не задан адрес регистрации',
            'error_description': 'Исправьте данные в карточке клиента',
        }
        raise StopScriptExecution()
        
    if client['registrationAddress'].get('region') is None:
        process_vars['error'] = {
            'error_text': 'В адресе регистрации клиента не указана область',
            'error_description': 'Исправьте данные в карточке клиента',
        }
        raise StopScriptExecution()

    if client['registrationAddress'].get('district') is None:
        process_vars['error'] = {
            'error_text': 'В адресе регистрации клиента не указан район',
            'error_description': 'Исправьте данные в карточке клиента',
        }
        raise StopScriptExecution()
    
    ]]>
    </script>
    <split id="9b606c04-dfce-4498-89c5-36dc76b9b3f1" name="Контроль атрибутов">
        <condition id="79363433-f400-4793-9fdf-2ee75e61d48c" name="Пройден" expression="process_vars.get(&apos;error&apos;) is None"/>
        <condition id="a1bce1dd-2a6e-4500-9371-89b5b40df7e5" name="Ошибки">
            <terminate id="25247872-0dd8-4609-b35c-d757fb830d11" name="Завершение"/>
        </condition>
    </split>
    <script id="cb902d75-b21c-42ba-9780-24dcb3650cde" name="Поиск незавершенной заявки">
        <![CDATA[from colvir_cbs.auth import AuthenticatedUser
from apng_core.db import fetchall

with AuthenticatedUser(user='COLVIR') as au:
    con = au.getConnection()
    with con.cursor() as cursor:
        p = {
            'CLI_CODE': process_vars['request']['clientId'],
            'DCL_CODE': process_vars['request']['product_code'],
        }
        
        cursor.execute("""
            select
               d.DEP_ID,
               d.ID,
               o.CODE,
               to_date(substr(json_value(r.json, '$.app.registrationDate'),1,10), 'YYYY-MM-DD') REGISTRATION_DATE
            from T_ORD o, T_DEA d, L_REQDEA r, L_REQDEA_EXT re
            where d.dep_id=r.dep_id and d.id=r.id
                and re.dep_id=r.dep_id and re.id=r.id
                and d.dcl_id = T_PkgDea.fDclId(:DCL_CODE)
                and (d.cli_dep_id, d.cli_id) = (select dep_id, id from g_cli where code=:CLI_CODE) 
                and re.state in ('START', 'ON_REVIEW', 'CREDEA')
                and o.dep_id = d.dep_id and o.id = d.id
                and json_value(r.json, '$.app.isImported') is null
        """, p)
        
        reqs = fetchall(cursor)

        if len(reqs) > 0:
            process_vars['req'] = reqs[0]
            
]]>
    </script>
    <split id="0992b414-5b0a-41bb-936b-d27251dda18f" name="Заявки отсутствуют">
        <condition id="bd43b28d-0fc6-4826-a3ae-99be15fd3b12" name="Да" expression="process_vars.get(&apos;req&apos;) is None"/>
        <condition id="76f5127f-d76e-471a-9435-399fd5004177" name="Нет">
            <script id="bf949451-45cc-49aa-ab56-d92df6e8d839" name="Установка отказа">
                <![CDATA["""
process_vars['error'] = {
    'error_code': '101',
    'error_text': 'Пожалуйста дождитесь выдачи микрокредита. Предыдущая заявка № %s от %s еще на рассмотрении.' % (
        process_vars['req']['CODE'], process_vars['req'].get('REGISTRATION_DATE').strftime('%d.%m.%Y')
    ),
}
"""
process_vars['error'] = {
    'error_code': '101',
    'error_text': token.evalTemplate(
        '{% load wfj %}Пожалуйста дождитесь выдачи микрокредита. Предыдущая заявка № {{process_vars.req.CODE}} от {{process_vars.req.REGISTRATION_DATE|date}} еще на рассмотрении.'
    ),
}
]]>
            </script>
            <terminate id="72326873-3095-48a8-83c7-0da5fa28ace1" name="Завершение"/>
        </condition>
    </split>
    <script id="0df610cf-ed62-4f9c-952d-9cbbf9d260f2" name="Поиск действующего договора">
        <![CDATA[from colvir_cbs.auth import AuthenticatedUser
from apng_core.db import fetchall

with AuthenticatedUser(user=token.initiator) as au:
    con = au.getConnection()
    with con.cursor() as cursor:
        p = {
            'CLI_CODE': process_vars['request']['clientId'],
            'DCL_CODE': process_vars['request']['product_code'],
        }
        
        cursor.execute("""
            select
               d.DEP_ID,
               d.ID,
               o.CODE,
               d.REFER,
               T_BSDEAPAY.fNoExecPntPay(d.dep_id, d.id) DEBT_EXIST 
            from T_ORD o, T_DEA d, L_LDEA ld
            where d.dep_id=ld.dep_id and d.id=ld.id
                and d.dcl_id = T_PkgDea.fDclId(:DCL_CODE)
                and (d.cli_dep_id, d.cli_id) = (select dep_id, id from g_cli where code=:CLI_CODE) 
                and T_PkgProcess.fGetStatCodeByMainOrd(d.DEP_ID, d.ID) = 'ACTUAL'
                and o.dep_id = d.dep_id and o.id = d.id
            order by T_BSDEAPAY.fNoExecPntPay(d.dep_id, d.id) DESC
        """, p)
        
        loans = fetchall(cursor)

        if len(loans) > 0:
            process_vars['loan'] = loans[0]
            
]]>
    </script>
    <split id="28f61f69-b5dc-43cf-83b5-775256ac4825" name="Действующий договор">
        <condition id="a14c7e0f-b0ab-470c-8a63-799c591a8363" name="Да" expression="process_vars.get(&apos;loan&apos;) is not None">
            <split id="048e61f0-94b2-44d5-9e2d-b42c90172fef" name="Задолженность">
                <condition id="391bb738-c14f-4b33-90d4-f32da27e1bb6" name="Есть" expression="process_vars[&apos;loan&apos;][&apos;DEBT_EXIST&apos;] == 1">
                    <script id="bf737160-fa69-4647-ba21-31462da9701b" name="Установка отказа">
                        <![CDATA[process_vars['error'] = {
    'error_code': '100',
    'error_text': 'Имеется действующий договор с непогашенной задолженностью',
}]]>
                    </script>
                    <terminate id="f75c3e9a-e7b5-45c8-8ccd-33d3293177ae" name="Завершить обработку"/>
                </condition>
                <condition id="7d01e633-8448-453f-b4bb-19ce5754b41d" name="Нет" expression="process_vars[&apos;loan&apos;][&apos;DEBT_EXIST&apos;] == 0">
                    <script id="65f05312-40a3-4acb-9237-f584ab5b64f7" name="Выдать транш">
                        <![CDATA[from colvir_cbs.auth import AuthenticatedUser
from colvir_cbs import oracle
from colvir_cbs.services.log import readLog

from django.db import transaction
import traceback

import logging
logger = logging.getLogger('loanapp.api')

process_vars['last_error'] = None

try:
    with AuthenticatedUser(user=token.initiator) as au:
        con = au.getConnection()
        with con.cursor() as cursor:
            r = None
            
              
            try:
                with transaction.atomic(using='cbs'):
                    params = {
                        'DEP_ID' : process_vars['loan']['DEP_ID'], 
                        'ID'   : process_vars['loan']['ID'],
                        'lineCode': process_vars['loan']['CODE'],
                        'lineRefer': process_vars['loan']['REFER'],
                        'nAMOUNT': process_vars['request']['amount']/100,
                        'CARD_IDN': process_vars['request']['cardIdn'],
                        'REQ_DEP_ID': cursor.var(int),
                        'REQ_ID': cursor.var(int),
                        'REQ_CODE': cursor.var(str),
                    }
                    
                    #logger.debug('NEWDEA: %s', params)
                    
                    cursor.execute("""
                        declare
                            tdea colvir.T_DEA%%rowtype;
                            accbln colvir.G_ACCBLN%%rowtype;
                            line_state varchar2(30);
                            cParams varchar2(4000);
                            idReqDep number;
                            idReq number;
                            sReqCode varchar2(600);
                        begin
                            colvir.t_log.penable; colvir.t_log.clean;
                            
                            -- Ищем номер счета по карте
                            begin
                                select ab.*
                                into accbln
                                from colvir.g_accbln ab, colvir.s_deaacc da, colvir.n_crd c
                                where c.cardidn = :CARD_IDN
                                  and da.dep_id=c.deaacc_dep_id and da.id=deaacc_id
                                  and ab.dep_id = da.acc_dep_id and ab.id = da.acc_id
                                ;
                            exception when no_data_found then
                                raise_application_error(-20000, colvir.LocalFrmt(
                                    'Номер счета по карте %%0:s не найден',
                                    colvir.vargs(:CARD_IDN)
                                ));
                            end;

                            select * into tdea from colvir.T_DEA where DEP_ID=:DEP_ID and ID=:ID;
                            --colvir.T_PkgDeaPrm.pSetPrm(:ID, :DEP_ID, 'DLASTLOAN', to_date(tdea.TODATE-1));
                            
                            cParams := 'DOP$=>'||P_OPERDAY||', AMOUNT=>'||to_char(:nAMOUNT)||', ACC_CODE=>'||accbln.CODE;
                            --raise_application_error(-20000, cParams);
                            T_PkgRunOprUtl.pRunOprByMainOrd(:DEP_ID, :ID, 'NEWDEA', cParams);
                            
                            -- Поиск заявки по договору
                            begin
                                select
                                    app_mem.dep_id,
                                    app_mem.ord_id,
                                    o.code
                                into idReqDep, idReq, sReqCode
                                from t_ord o, t_procmem dea_mem, t_procmem app_mem, l_reqdea r
                                where dea_mem.dep_id=:DEP_ID and dea_mem.ord_id=:ID and dea_mem.mainfl='0'
                                  and app_mem.id=dea_mem.id and app_mem.mainfl='1'
                                  and r.dep_id=app_mem.dep_id and r.id=app_mem.ord_id
                                  and o.dep_id=app_mem.dep_id and o.id=app_mem.ord_id
                                ;
                            exception 
                                when no_data_found then
                                    raise_application_error(-20000, localfrmt(
                                        'Не найдена заявка для договора линии %%0:s (%%1:s)',
                                        vargs(:lineCode, :lineRefer)
                                    ));
                                when too_many_rows then
                                    raise_application_error(-20000, localfrmt(
                                        'Невозможно однозначно определить заявку по линии %%0:s (%%1:s)',
                                        vargs(:lineCode, :lineRefer)
                                    ));
                            end;
    
                            :REQ_DEP_ID := idReqDep;
                            :REQ_ID := idReq;
                            :REQ_CODE := sReqCode;

                        end;/""",
                        params
                    )
                    
                    process_vars['REQ_DEP_ID'] = params['REQ_DEP_ID'].getvalue()
                    process_vars['REQ_ID'] = params['REQ_ID'].getvalue()
                    process_vars['REQ_CODE'] = params['REQ_CODE'].getvalue()
                    
                    
                    process_vars['response'] = {
                        'applicationId': '%s,%s' % (process_vars['REQ_DEP_ID'],  process_vars['REQ_ID']),
                        'applicationNo': process_vars['REQ_CODE'],
                        'loanId': '%s,%s' % (process_vars['loan']['DEP_ID'], process_vars['loan']['ID']),
                        'loanNo': process_vars['loan']['CODE']
                    }
                    
                    logger.debug('Выдан транш по договору %s' % (
                        process_vars['response']['loanNo']
                    ));
                    
            except Exception as e:
                cbs_log = readLog()
                raise UserException({
                    'message': 'Ошибка выдачи транша по договору %s' % (process_vars['loan']['CODE']),
                    'description': '%s' % e,
                    'trace': '%s\n%s' % (traceback.format_exc(), cbs_log),
                })
except UserException as e:
    raise e
    
except Exception as e:
    tb = traceback.format_exc()
    process_vars['last_error'] = {
        'message': '%s' % e,
        'trace': tb,
    }


if process_vars['last_error']:
    raise Exception(process_vars['last_error']['message'])
    
]]>
                    </script>
                </condition>
            </split>
        </condition>
        <condition id="51a00478-f174-47b4-8207-72fed9439e97" name="Нет" expression="process_vars.get(&apos;loan&apos;) is None">
            <script id="4c4c8fd8-9937-465f-a5a7-665873c6ce19" name="Запрет создания новой заявки">
                <![CDATA[
if process_vars['request']['clientId'] == 'x000001127423':
    raise StopScriptExecution()

]]>
            </script>
            <script id="94b05fb9-d632-4b2b-9f28-e3c538b116f8" name="Создание заявки">
                <![CDATA[from django.db import transaction
from django.utils import timezone
from colvir_cbs.auth import AuthenticatedUser
from loanapp.services.application import getApplication, generateId
from colvir_cbs.services.client import getClient
from colvir_web import WebJSONEncoder


class RollbackException(Exception):
    None

pay_amount = process_vars['request']['amount'] / 100

try:
    with transaction.atomic(using='cbs'):
        with AuthenticatedUser(user=token.initiator) as au:
            con = au.getConnection()
            
            client = getClient({
                'code': process_vars['request']['clientId'],
                'withIdentDocType': None,
                'withRegistrationAddress': True,
                'withLiveAddress': True,
            })
            if process_vars['request'].get('phone'):
                client['phone'] = process_vars['request']['phone']
                client['mobilePhone'] = process_vars['request']['phone']
                
            
            from loanapp.services.application.prepare import getApplicationDistrict
            from colvir_cbs.services.application import calculateInterest
            from colvir_cbs.services.code_rule import generateCode
            from colvir_cbs.services.product import getProductSetup, getPurposesOfLoan, getMaxAmount
            from colvir_cbs.services import card
            
            req_amount = getMaxAmount({
                'productCode': process_vars['request']['product_code']
            })
            

            if not req_amount:
                raise Exception('Не настроена сумма по продукту %s' % process_vars['request']['product_code'])
            
            #interest = None
            
            interest = calculateInterest({
                'clientCode': process_vars['request']['clientId'],
                'productCode': process_vars['request']['product_code'],
                'amount': req_amount['amount'],
                'currency': 'UZS',
                'duration': 12,
                'durationUnit': 'M',
            })
            
            
            code = generateCode('L_REQDEACODE', {})
            appId = generateId()
            
            product = getProductSetup({
                'productCode': process_vars['request']['product_code'],
                'currency': 'UZS',
                'withClassifiers': True,
                'withProduct': True,
                'withOptions': True,
                'withConstraints': True,
            })
            
            purposes = getPurposesOfLoan({'productCode': process_vars['request']['product_code']})
            purpose = purposes[0]
            
            purposeOfLoan = None
            purposeOfLoanName = None
            if purpose:
                purposeOfLoan = purpose['code']
                purposeOfLoanName = purpose['name']
                
            depCode = process_vars['request'].get('depCode') if process_vars['request'].get('depCode') else ''
            applicationDisctrict = getApplicationDistrict({'depCode' : depCode})

            #
            # Проверка настройки адреса подразделения
            #
            if applicationDisctrict['region'] is None or applicationDisctrict['district'] is None:
                process_vars['error'] = {
                    'error_code': 100,
                    'error_text': 'Не задан код области или код района подразделения %s' % depCode,
                }
                raise Exception(process_vars['error']['error_text'])
            
            app = {
                **applicationDisctrict,
                'depCode' : depCode,
                'reviewWorkflow': 'APP_REVIEW_ONLINE_MICRO',
                'code': code,
                'appId': appId,
                'registrationDate': au.operday,
                'amount': req_amount['amount'],
                'currency': 'UZS',
                'interest': interest,
                
                'productCode': process_vars['request']['product_code'],
                'productName': product.get('name'),
                
                'duration': 12,
                'durationUnit': 'M',
                
                'purposeOfLoan': purposeOfLoan,
                'purposeOfLoanName': purposeOfLoanName,

                'purpose112OfLoan': product['classifiers']['UZ_PURPCRED_112']['value'] if product['classifiers'].get('UZ_PURPCRED_112') else None,
                'purpose112OfLoanName': product['classifiers']['UZ_PURPCRED_112']['name'] if product['classifiers'].get('UZ_PURPCRED_112') else None,
                
                'legalAct': product['classifiers']['UZ_NPA']['value'],
                'legalActName': product['classifiers']['UZ_NPA']['name'],
                
                'typeOfLending': product['classifiers']['UZ_VIDCRED']['value'],
                'typeOfLendingName': product['classifiers']['UZ_VIDCRED']['name'],

                'typeOfLending110': product['classifiers']['UZ_TYPECRED_110']['value'] if product['classifiers'].get('UZ_TYPECRED_110') else None,
                'typeOfLending110Name': product['classifiers']['UZ_TYPECRED_110']['name'] if product['classifiers'].get('UZ_TYPECRED_110') else None,
                
                'objectOfLoan': 'Онлайн-микрозайм',
                
                'withoutPledge': True,
                'cardIdn': process_vars['request']['cardIdn'],
                'payAmount': pay_amount,
                'access_code': process_vars['request'].get('access_code'),
                'inputChannel': process_vars['request'].get('inputChannel'),
            }

            client = {
                **client,
                'clientType': product['classifiers']['UZ_TZ']['value'],
                'clientTypeName': product['classifiers']['UZ_TZ']['name'],
            }            
            
            retirementAccount = client.get('retirementAccount')
            if not retirementAccount:
                retirementAccount = client.get('pinfl')
                
            income = {
                'hasWork': True,
                'retirementAccount': retirementAccount,
                'retirementBnkCode': '01125',
            }
            
            employer = card.getEmployerByCard({'cardIdn': process_vars['request']['cardIdn']})
            if employer:
                income['companyName'] = employer['name']
                income['companyInn'] = employer['inn']
            else:
                pv['error'] = {
                    'error_code': 102,
                    'error_text': 'Не найден зарплатный договор для карты cardIdn: %s' % pv['request']['cardIdn'],
                }
                raise UserException('Не найден зарплатный договор для карты cardIdn: %s' % pv['request']['cardIdn'])
            

            with con.cursor() as cursor:
                p = {
                    'CLI_CODE': process_vars['request']['clientId'],
                    'DCL_CODE': process_vars['request']['product_code'],
                    'AMOUNT': req_amount['amount'],
                    'REQ_DEP_ID': cursor.var(int),
                    'REQ_ID': cursor.var(int),
                    'json': json.dumps({
                        'baseComponent': '/loanapp/app-loan-fiz',
                        'app': app,
                        'product': product,
                        'client': client,
                        'income': income,
                        'user': {
                            'code': 'ALOQAMOBILE',
                            'name': 'Мобильное приложение',
                            'modified': timezone.now(),
                        },
                        'agreement': True,
                        'isExternal': True,
                    }, ensure_ascii=False, cls=WebJSONEncoder),
                }
                
                cursor.execute("""
                    declare
                        codeReqDep varchar2(60);
                        cligrp varchar2(60);
                        idReqDep number;
                        idReq number;
                        sSelDep colvir.C_DEP.CODE%%type;
                        idPerAvailable number;
                        sAutoRunWorkflow varchar2(250);
                        idCli colvir.G_CLI.ID%%type;
                        IdCliDep colvir.G_CLI.DEP_ID%%type;
                        idDcl number;
                        
                        type rAddress is record (
                            OBL_CODE varchar2(30),
                            OBL_NAME varchar2(500),
                            RN_CODE varchar2(30),
                            RN_NAME varchar2(250),
                            ADDRESS varchar2(4000)
                        );
                        
                        regAddress rAddress;
            
                        -- Получение адреса из карточки клиента
                        function getAddressByType(idDep in number, idCli in number, cadrType in varchar2) return rAddress is
                            r rAddress;
                        begin
                            select 
                                g_pkgaddress_uz.fgetObl(a.ID) OBL_CODE,
                                U_PKGUNIREF_UZ.fgetOblNameByCode(g_pkgaddress_uz.fgetObl(a.ID)) OBL_NAME,
                                g_pkgaddress_uz.fgetRn(a.ID) RN_CODE,
                                U_PKGUNIREF_UZ.fgetRnNameByCode(g_pkgaddress_uz.fgetRn(a.ID)) RN_NAME,
                                g_pkgaddress.fGetFullAddr(a.ID, G_ADDR_CNTR) ADDRESS
                            into r
                            from colvir.G_ADDRESS a, colvir.G_CLIADDRESS ca
                            where ca.dep_id=idDep and ca.id=idCli
                              and ca.adrtype=cadrType
                              and a.id=ca.adr_id and ca.arcfl='0'
                            ;
                            return r;
                        end;
                        
                        -- Получение срока по прдукту
                        function getDurationCode(pNum in number, pDim in varchar2, pDclCode in varchar2) return varchar is
                          sDurationCode colvir.T_DEAPRD_STD.CODE%%type;
                        begin
                            select
                                (select p.code 
                                from colvir.T_DEALNKPRD m, colvir.T_DEAPRD_STD p, colvir.T_DEACLS_STD t
                                where m.PRD_ID = p.ID and m.DCL_ID = t.ID and t.code=pDclCode
                                  and p.time_type = pDim and p.time_unit = pNum
                                )
                            into sDurationCode
                            from dual;
                        
                            if sDurationCode is null then
                                raise_application_error(-20000, colvir.LocalFrmt(
                                    'Для продукта %%0:s не настроен срок договора %%1:s %%2:s', 
                                    colvir.vargs(pDclCode, pNum, pDim)
                                ));
                            end if;
                        
                            return sDurationCode;
                        
                        end;
        
                        -- Получение цели использования по прдукту
                        function getPurposeCode(pDclCode in varchar2) return varchar2 is
                            sPurCode colvir.L_PURDSC_STD.CODE%%type;
                        begin
                            select 
                                (select d.CODE 
                                from colvir.L_DEAPUR l, colvir.L_PURDSC_STD d, colvir.T_DEACLS_STD t
                                where l.PUR_ID=d.ID and l.DCL_ID=t.ID and t.CODE=pDclCode
                                and rownum=1)
                            into sPurCode from dual;
                                
                            if sPurCode is null then
                                raise_application_error(-20000, colvir.LocalFrmt(
                                    'Для продукта %%0:s не задана цель использования', 
                                    colvir.vargs(pDclCode)
                                ));
                            end if;
                            return sPurCode;
                            
                        end;
        
        
                    begin
        
                        --
                        -- Поиск подразделения заявки через группу обслуживания
                        --
                        select
                            nvl(ag.dep_id, g.dep_id),
                            C_PkgDep.fGetCodeDep(nvl(ag.dep_id, g.dep_id)),
                            ag.code
                        into idReqDep, codeReqDep, cligrp
                        from t_accgrp ag, g_clihst gh, g_cli g
                        where gh.dep_id=g.dep_id and gh.id=g.id and p_operday between gh.fromdate and gh.todate
                            and ag.id(+)=gh.aut_id
                            and g.code=:CLI_CODE
                        ;
                        
                        begin
                            select
                                d.id,
                                d.code
                            into idReqDep, codeReqDep
                            from c_dep_std d where d.code = regexp_substr(cligrp, '[0-9]*');
                        exception
                            when no_data_found then
                                raise_application_error(-20000, LocalFrmt(
                                    'Не определено подразделение для группы обслуживания %%0:s, клиент %%1:s',
                                    vargs(cligrp, :CLI_CODE )
                                ));
                            when too_many_rows then
                                raise_application_error(-20000, LocalFrmt(
                                    'Не однозначно определено подразделение для группы обслуживания %%0:s, клиент %%1:s',
                                    vargs(cligrp, :CLI_CODE )
                                ));
                        end;
    
                        if codeReqDep = '00401' then
                            idReqDep := c_pkgdep.fGetIdDep('10576');
                        end if;

                        sSelDep := C_PkgDep.fGetCodeDep(idReqDep);
                        
                        G_PkgCli.pGetCliId(:CLI_CODE, idCliDep, idCli);                
                        idDcl := T_PkgDea.fDclId(:DCL_CODE);
        
        
                        L_BSREQDEA.pSave(
                            nDEP_ID         => idReqDep,
                            nID             => idReq,
                            
                            -- номер заявки
                            sCODE            => json_value(:json, '$.app.code'),
                            
                            sSell_Dep_Code  => sSelDep,
                            sCli_Code       => :CLI_CODE,
                            sDcl_Code       => :DCL_CODE,
                            nAmount         => :AMOUNT,
                            
                            nReq_Type_Id    => 2,
                            sPrd_Code       => getDurationCode(12, 'M', :DCL_CODE),
                            sPur_Code       => json_value(:json, '$.app.purposeOfLoan'),
                            
                            sPrim           => 'online mikroqarz',
                            sExternalfl     => case when json_value(:json, '$.isExternal') = 'true' then '1' else '0' end
                    
                        );
                        
                        :REQ_DEP_ID := idReqDep;
                        :REQ_ID := idReq;
                        
                        UPDATE L_REQDEA set
                            JSON=:json
                        WHERE DEP_ID=idReqDep and ID=idReq;
                    

                        -- Период доступности
                        idPerAvailable := T_PkgDeaPer.fID(
                            T_pkgDeaPrm.fClsParByCode(idDcl, 'LL_AUTOPRDLAST')
                        );
                        update L_REQDEA set 
                            REQ_PRD2_ID=idPerAvailable
                        where DEP_ID=idReqDep and ID=idReq;
        
                        insert into L_REQDEA_EXT (
                            DEP_ID, ID,
                            -- Идентификатор заявки
                            APPID,
                            -- Номер заявки
                            APPNO,
                            -- Состояние заявки
                            STATE
                        ) values (
                            idReqDep, idReq,
                            -- Идентификатор заявки
                            json_value(:json, '$.app.appId'),
                            -- Номер заявки
                            json_value(:json, '$.app.code'),
                            -- Состояние заявки
                            'START'
                        );


                    end;
                /""", p)
                
                pv['req'] = getApplication({
                    'dep_id': p['REQ_DEP_ID'].getvalue(),
                    'id': p['REQ_ID'].getvalue(),
                })
                

        if pv['request'].get('test') == True:
            raise RollbackException()
        
except RollbackException:
    None
    ]]>
            </script>
            <script id="d3c3da9a-8343-4749-b8ab-9db7565ff262" name="Запуск процесса рассмотрения">
                <![CDATA[from apng_core.easyflow.services import RuntimeService
from apng_core.easyflow.models import Token

#
# Проверим, есть ли сценарии по заявке
#
ok = 'loanapp:{},{}'.format(process_vars['req']['DEP_ID'], process_vars['req']['ID'])
keyvalue = json.dumps(ok)
processes = Token.objects.filter(objectKey=ok)

isProcessExists = processes.count() > 0

if not isProcessExists:
    RuntimeService.startProcessByCode(
        process_vars['req']['SCN'],
        {
            'objectKey': ok,
            'requestProcessId': token.process.id.__str__()
        }
    )
]]>
            </script>
            <script id="e085cd35-188e-48ef-afa9-144ad59202e9" name="Подготовка ответа">
                <![CDATA[process_vars['response'] = {
    'applicationId': '%s,%s' % (process_vars['req']['DEP_ID'],  process_vars['req']['ID']),
    'applicationNo': process_vars['req']['CODE']
}
]]>
            </script>
        </condition>
    </split>
</workflow>