<workflow id="APP_CREATE_CARD" name="Создание карты">
    <script id="da71a089-1764-4866-9090-061b0e883ea9" name="Инициализация">
        <journal time="leave">
            Начало обработки заявки {{process_vars.req.CODE}}, {{process_vars.req.CLI_NAME}}
        </journal>
        <![CDATA[

ok = process_vars.get('objectKey')
if not ok:
    # Если запустили без параметров, то обрабатываем тестовую заявку
    ok = 'loanapp:1855,4971056'
    process_vars['objectKey'] = ok

kv = ok.split(':')
pk = kv[1].split(',')
process_vars['dep_id'] = int(pk[0])
process_vars['id'] = int(pk[1])
    
        

#
# Загружаем общую информацию по заявке
#
from colvir_cbs.auth import AuthenticatedUser
with AuthenticatedUser():
    from loanapp.services.application import getApplication
    with AuthenticatedUser():
        process_vars['req'] = getApplication({
            'dep_id': process_vars['dep_id'],
            'id'    : process_vars['id'],
        })
        ]]>
    </script>
    <timer id="7395e943-1a6f-4d78-aca9-b774f57631f0" name="Создание договора счета" description="Создание договора счета, заявка {{process_vars.req.app.code}}" duration="00:00:00" errorDuration="00:01:00" action="continue"/>
    <script id="3eb9167f-c10f-48ac-b82e-31fc8af206cd" name="Создание договора счета">
        <![CDATA[from colvir_loanapp.service import mis
from datetime import datetime

r = mis.request(
    '/extreq/applications',
    {
        'object': {
            'type': 'CLI',
            'code': process_vars['req']['client']['code']
        },
        'application': {
            'department': process_vars['req']['app']['depCode'],
            'type': 'CRECRDCLIACC',
            'date': datetime.now().isoformat(),
            'description': 'Создание карточного счета из кредитной заявки',
            'parameters': [
                {
                    'code': 'clientCode',
                    'value': process_vars['req']['client']['code'],
                },
                {
                    'code': 'cardType',
                    'value': process_vars['req']['product']['options']['issueCardProduct'],
                },
                {
                    'code': 'cardVal',
                    'value': process_vars['req']['app']['currency'],
                }
            ]
                
            
        }
    }
)

if r.status_code != 200:
    raise UserException({
        'message': 'Ошибка создания договора карточного счета, заявка %s' % pv['req']['app']['code']
    }).withError(mis.extractResponseError(r))

process_vars['createAccResponse'] = json.loads(r.content)

#if (process_vars['createAccResponse'].get('error')):
#    raise UserException(
#        'Ошибка создания договора карточного счета, заявка %s\n%s' % (process_vars['req']['app']['code'], process_vars['createAccResponse']['error']['message'])
#    )
#    
#if (process_vars['createAccResponse']['status']['code'] != 'FIN'):
#    raise UserException({
#        'message': 'Заявка на создание счета не исполнена',
#        'description': json.dumps(process_vars['createAccResponse'], indent=4, ensure_ascii=False)
#    })
#
#process_vars['accountNo'] = next(filter(lambda x: x['code']=='ACCCODE', process_vars['createAccResponse']['parameters']), None)['value']

]]>
    </script>
    <split id="924ed317-3a8c-4c28-a10e-ca20d9bbf591" name="Результат создания договора">
        <condition id="983bed9a-d60b-46c4-bfc0-fcaad238370e" name="Договор создан" expression="process_vars[&apos;createAccResponse&apos;][&apos;status&apos;][&apos;code&apos;] == &apos;FIN&apos;">
            <script id="faed88ea-7bb1-48c2-b105-0d8d9aecfbcc" name="Обработка результата создания договора">
                <journal time="leave">
                    Создан договор карточного счета {{pv.account.ACCCODE}}
                </journal>
                <![CDATA[#process_vars['accountNo'] = next(filter(lambda x: x['code']=='ACCCODE', process_vars['createAccResponse']['parameters']), None)['value']

pv['account'] = {}
for p in process_vars['createAccResponse']['parameters']:
    pv['account'][p['code']] = p['value']


]]>
            </script>
        </condition>
        <condition id="a87724b8-e81a-4738-ae25-50b4279d3a81" name="Не создан" expression="process_vars[&apos;createAccResponse&apos;][&apos;status&apos;][&apos;code&apos;] != &apos;FIN&apos;">
            <script id="ba5015c4-9557-46e2-a65f-23693b81d75b" name="Установка ошибки">
                <![CDATA[process_vars['lastError'] = {
    'message': 'Заявка на договора СКС не обработана\n%s' % process_vars['createAccResponse'].get('error')
}]]>
            </script>
            <timer id="b3078152-457e-4014-8fa1-acda9faec7e1" name="Ожидание создания договора СКС" description="" duration="00:01:00" errorDuration="00:01:00" action="continue"/>
            <script id="681c49d6-1d8c-4a8e-8109-3e69bf9c4fd0" name="Опрос состояния завки на создание договора СКС">
                <![CDATA[from colvir_loanapp.service import mis

r = mis.request(
    '/extreq/applications/status',
    {
        "colvirReferenceId": process_vars['createAccResponse']['colvirReferenceId']
    }
)

if r.status_code != 200:
    raise UserException('Ошибка получения состояния заявки на договор СКС').withError(mis.extractResponseError(r))

process_vars['statusAccResponse'] = json.loads(r.content)

if process_vars['createAccResponse']['status']['code'] != 'FIN':
    raise UserException(json.dumps(process_vars['statusAccResponse'], indent=4, ensure_ascii=False))



]]>
            </script>
            <jump id="4b364168-4ebe-40ad-a9b3-5f759e7e29f4" name="Переход к Результат создания договора" target_id="924ed317-3a8c-4c28-a10e-ca20d9bbf591"/>
        </condition>
    </split>
    <timer id="f18a1e17-0069-42e7-8dc3-1f3babf2535b" name="Создание карты" description="" duration="00:00:00" errorDuration="00:01:00" action="continue"/>
    <script id="5bf71d1d-7a56-40e4-ad21-80068556ec01" name="Создание карты">
        <![CDATA[from colvir_loanapp.service import mis
from datetime import datetime

#accCode = next(filter(lambda x: x['code']=='ACCCODE', process_vars['createAccResponse']['parameters']), None)['value']

r = mis.request(
    '/extreq/applications',
    {
        'object': {
            'type': 'CLI',
            'code': process_vars['req']['client']['code']
        },
        'application': {
            'department': process_vars['req']['app']['depCode'],
            'type': 'CRECRD',
            'date': datetime.now().isoformat(),
            'description': 'Создание карты из кредитной заявки',
            'parameters': [
                {
                    'code': 'clientCode',
                    'value': process_vars['req']['client']['code'],
                },
                {
                    'code': 'cardType',
                    'value': process_vars['req']['product']['options']['issueCardProduct'],
                },
                {
                    'code': 'cardVal',
                    'value': process_vars['req']['app']['currency'],
                },
                {
                    'code': 'accCode',
                    'value': pv['account']['ACCCODE'],
                }
            ]
        }
    }
)

if r.status_code != 200:
    raise UserException('Ошибка создания карты').withError(mis.extractResponseError(r))

process_vars['createCardResponse'] = json.loads(r.content)

#if (process_vars['createCardResponse'].get('error')):
#    raise UserException(
#        'Ошибка создания карты\n%s' % process_vars['createCardResponse']['error']['message']
#    )
    
#if (process_vars['createCardResponse']['status']['code'] != 'FIN'):

#raise UserException({
#    'message': 'Заявка на создание счета не исполнена',
#    'description': json.dumps(process_vars['createAccResponse'], indent=4, ensure_ascii=False)
#})


]]>
    </script>
    <split id="8dd4a26c-e5ea-42d9-a880-eae400d78967" name="Результат создания карты">
        <condition id="026fb526-ca5a-4499-8bdb-d0d667f878d0" name="Обработана" expression="process_vars[&apos;createCardResponse&apos;][&apos;status&apos;][&apos;code&apos;] == &apos;FIN&apos;"/>
        <condition id="aeb0553d-120a-45c8-9637-deacbb478e04" name="Не обработана" expression="process_vars[&apos;createCardResponse&apos;][&apos;status&apos;][&apos;code&apos;] != &apos;FIN&apos;">
            <script id="c7d06719-7b82-43df-a560-cdf816e23299" name="Установка ошибки">
                <![CDATA[process_vars['lastError'] = {
    'message': 'Заявка не обработана\n%s' % process_vars['createCardResponse'].get('error')
}]]>
            </script>
            <timer id="1a2dccdc-da99-41ef-917e-d63180528893" name="Ожидание создания карты" description="" duration="00:01:00" errorDuration="00:01:00" action="continue"/>
            <script id="a2612c0a-3fec-4a75-b754-d21df3a28cbc" name="Опрос состояния завки на создание карты">
                <![CDATA[from colvir_loanapp.service import mis

r = mis.request(
    '/extreq/applications/status',
    {
        "colvirReferenceId": process_vars['createCardResponse']['colvirReferenceId']
    }
)

if r.status_code != 200:
    raise UserException('Ошибка получения состояния заявки на карту').withError(mis.extractResponseError(r))

process_vars['statusCardResponse'] = json.loads(r.content)

if process_vars['createCardResponse']['status']['code'] != 'FIN':
    raise UserException(json.dumps(process_vars['statusCardResponse'], indent=4, ensure_ascii=False))


]]>
            </script>
            <jump id="49819037-aed9-459d-8eff-a898b809f84d" name="Переход к Результат создания карты" target_id="8dd4a26c-e5ea-42d9-a880-eae400d78967"/>
        </condition>
    </split>
    <script id="f4997860-7589-465e-a674-3934ad826ebb" name="Журнализация">
        <journal time="leave">
            Создана карта
        </journal>
        <![CDATA[
        
    ]]>
    </script>
    <timer id="d1a84cfe-a25b-49b7-83b8-c2f0ecfa60fb" name="Создание овердрафта" description="Создание овердрафта по счету {{process_vars.account.ACCCODE}} {% if token.vars_dict.error %}{{token.vars_dict.error.message}}{% else %}{{pv.wait_sca_message}}{% endif %}" duration="pv.get(&apos;wait_sca_dea&apos;) or &apos;00:00:00&apos;" errorDuration="00:01:00" action="continue"/>
    <script id="92721a24-e00c-4482-8be8-3826019904fb" name="Проверка состояния договора СКС">
        <![CDATA[from apng_core.aoa.services import execObjectMethod
pv['wait_sca_available'] = execObjectMethod({
    'object': 'cbs.oper',
    'method': 'isOperationAvailable',
    'params': {
        'dep_id': pv['account']['SCA_DEP_ID'],
        'id': pv['account']['SCA_ID'],
        'operation': 'SETLIMOVRDR'
    }
})]]>
    </script>
    <split id="66a5bbd1-68c3-4491-86d3-23290af02d36" name="Операция установки лимита доступна?">
        <condition id="357440d3-ff3d-44cb-8779-cfb8fc318dce" name="Да" expression="pv[&apos;wait_sca_available&apos;] == True"/>
        <condition id="ba96e5d0-86e2-4087-a7ec-8b6e554fb506" name="Нет" expression="pv[&apos;wait_sca_available&apos;] == False">
            <script id="df34cfd9-7e48-419a-ad57-8158df853ea5" name="Установка времени ожидания">
                <![CDATA[pv['wait_sca_dea'] = '00:01:00'
pv['wait_sca_message'] = 'Не доступна установка лимита овердрафта']]>
            </script>
            <jump id="5cb9d75c-d5af-4177-8092-afebd8e70118" name="Переход к Создание овердрафта" target_id="d1a84cfe-a25b-49b7-83b8-c2f0ecfa60fb"/>
        </condition>
    </split>
    <script id="3c4321c1-1d7c-4649-8a86-a7d727474cca" name="Создание овердрафта">
        <journal time="leave">
            Создан договора овердрафта {{process_vars.dea.code}}
        </journal>
        <![CDATA[from django.db import transaction
from django.conf import settings
from apng_core.aoa.services import execObjectMethod


with transaction.atomic(using=settings.APPS_DB['colvir_cbs']):

    r = execObjectMethod({
        'object': 'card',
        'method': 'createOverdraft',
        'params': {
            'accountNo': pv['account']['ACCCODE'],
            'amount': process_vars['req']['app']['amount'],
            'currency': process_vars['req']['app']['currency'],
            'depCode': process_vars['req']['app']['depCode'],
            'productCode': process_vars['req']['app']['productCode'],
            'app': process_vars['req']['app']
        }
    })
    
    # Сохраним диагностику создания овердрафта
    if 'log' in r:
        pv['createOverdraftLog'] = r['log']
        del r['log']
        
    process_vars['dea'] = r
    
    # Установка атрибутов договора
    execObjectMethod({
        'object': 'loanapp',
        'method': 'setLoanAttributes',
        'params': {
            'dea': process_vars['dea'],
            'app': process_vars['req']
        }
    })
    
    # Присоединение договора к заявке
    execObjectMethod({
        'object': 'cbs.oper',
        'method': 'connectMember',
        'params': {
            'dep_id': pv['dep_id'],
            'id': pv['id'],
            'mem_dep_id': pv['dea']['dep_id'],
            'mem_id': pv['dea']['id'],
            'pos_code': 'DEA'
        }
    })
    
    # Сохранение ссылки на договор при заявке        
    from colvir_cbs.services.application import updateApplicationJson
    updateApplicationJson({
        'DEP_ID': process_vars['dep_id'],
        'ID': process_vars['id'],
        'JSON': json.dumps({
            'dea': {
                'dep_id': process_vars['dea']['dep_id'],
                'id': process_vars['dea']['id'],
                'code': process_vars['dea']['code'],
            },
        }, ensure_ascii=False)
    })    
    
    # Перенос досье на договор
    from loanapp.services import dossier
    dossier.attachDocumentsToDea({
        'req_dep_id': process_vars['dep_id'],
        'req_id': process_vars['id'],
        'dea_dep_id': process_vars['dea']['dep_id'],
        'dea_id': process_vars['dea']['id'],
    })

    # Сохраняем обеспечение при договоре
    from loanapp.services.application import savePledges
    savePledges({
        'dep_id': process_vars['dea']['dep_id'],
        'id': process_vars['dea']['id'],
        'pledges': process_vars['req']['pledges'],
        'forceNew': True,
    })

]]>
    </script>
    <timer id="b6793b96-4f2c-4da4-9c00-8e85a56b1ae9" name="Актуализация договора" description="" duration="00:00:00" errorDuration="00:01:00" action="continue"/>
    <script id="7b0cc764-19da-4389-af4f-c94542ed88fb" name="Актуализация созданного договора">
        <![CDATA[from apng_core.aoa.services import execObjectMethod

r = execObjectMethod({
    'object': 'loan',
    'method': 'actualizeLoan',
    'params': {
        'dep_id': process_vars['dea']['dep_id'],
        'id': process_vars['dea']['id'],
    }
})

process_vars['dea']['state'] = r['state']

]]>
    </script>
    <split id="73171606-cf8d-4f20-a2fa-2bb019848326" name="Договор актуален">
        <condition id="8d6cdcab-6cf5-446e-a65d-944b138185e0" name="Да" expression="process_vars[&apos;dea&apos;][&apos;state&apos;] == &apos;ACTUAL&apos;"/>
        <condition id="52908d14-b693-4a6b-9dca-61f2094ed061" name="Нет" expression="process_vars[&apos;dea&apos;][&apos;state&apos;] != &apos;ACTUAL&apos;">
            <timer id="5811614a-c4b6-4691-b069-7e694d4531f2" name="Ожидание актуализации договора" description="" duration="00:01:00" errorDuration="00:05:00" action="continue"/>
            <jump id="3807e6d3-8e38-4143-97e5-cdae9c1ffd56" name="Переход к Актуализация договора" target_id="b6793b96-4f2c-4da4-9c00-8e85a56b1ae9"/>
        </condition>
    </split>
</workflow>