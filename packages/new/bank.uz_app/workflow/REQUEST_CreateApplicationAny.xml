<workflow id="REQUEST_CreateApplicationAny" name="API. Создание заявки на кредит">
    <script id="aefa1c06-3887-48de-a314-53a86cf19f73" name="Инициализация">
        <![CDATA[
request = process_vars.get('request')

if request.get('applicationId'):
    pk = request['applicationId'].split(',')
    if len(pk) != 2:
        process_vars['error'] = {
            'error_text': 'Неправильный формат applicationId, передайте в формате NNN,NNNNN'
        }
        raise StopScriptExecution()
        

if not request:
    process_vars['error'] = {
        'error_text': 'Не описан запрос к методу'
    }
    raise StopScriptExecution()

if not request.get('clientId'):
    process_vars['error'] = {
        'error_text': 'Не передан clientId'
    }
    raise StopScriptExecution()
    
if not request.get('productCode'):
    process_vars['error'] = {
        'error_text': 'Не передан код продукта, productCode'
    }
    raise StopScriptExecution()
    
if not request.get('amount'):
    process_vars['error'] = {
        'error_text': 'Не передан amount'
    }
    raise StopScriptExecution()
request['amount'] = request['amount']/100

if not request.get('currency'):
    request['currency'] = 'UZS'
    #process_vars['error'] = {
    #    'error_text': 'Не передана валюта, currency'
    #}
    #raise StopScriptExecution()

if not request.get('duration'):
    process_vars['error'] = {
        'error_text': 'Не передан срок кредита, duration'
    }
    raise StopScriptExecution()

if not request.get('durationUnit'):
    process_vars['error'] = {
        'error_text': 'Не передана размерность срока кредита, durationUnit (D/M/Y)'
    }
    raise StopScriptExecution()

#
# Временный контроль номера карты
#
if request.get('productCode') == 'T.FL.ONLINE MIC' and request.get('cardIdn') is None:
    process_vars['error'] = {
        'error_text': 'Отсутствует идентификатор карты'
    }
    raise StopScriptExecution()


if not request.get('objectOfLoan'):
    process_vars['error'] = {
        'error_text': 'Не передан объект ссуды, objectOfLoan'
    }
    raise StopScriptExecution()

if not request.get('income'):
    process_vars['error'] = {
        'error_text': 'Не переданы данные о занятости, раздел income: {}'
    }
    raise StopScriptExecution()
    
if request['income'].get('hasWork') == None:
    pv['error'] = {
        'error_text': 'Не передан признак работающего, income.hasWork: true/false'
    }
    raise StopScriptExecution()

"""
if request['income']['hasWork']:
    
    if not request['income'].get('companyInn'):
        process_vars['error'] = {
            'error_text': 'Не передан ИНН организации где работает заемщик, income.companyInn'
        }
        raise StopScriptExecution()
    
    if not request['income'].get('companyName'):
        process_vars['error'] = {
            'error_text': 'Не передано наименование организации где работает заемщик, income.companyName'
        }
        raise StopScriptExecution()


    if not request['income'].get('retirementAccount'):
        process_vars['error'] = {
            'error_text': 'Не передан номер пенсионного счета, income.retirementAccount'
        }
        raise StopScriptExecution()

    if not request['income'].get('retirementBnkCode'):
        process_vars['error'] = {
            'error_text': 'Не передан код банка пенсионного счета, income.retirementBnkCode'
        }
        raise StopScriptExecution()
"""

#
# Запрет одновременной обработки запросов по одному клиенту
#
import uwsgi
pv['lockKey'] = 'app_client_%s' % request['clientId']
clientInWork = uwsgi.cache_exists(pv['lockKey'])
if clientInWork:
    pv['error'] = {
        'error_text': 'По клиенту есть запросы в обработке, повторите позже',
        'description': 'Клиент id: %s' % request['clientId'],
    }
    raise StopScriptExecution()
    
uwsgi.cache_set(pv['lockKey'], '1'.encode(), 120)
if not uwsgi.cache_exists(pv['lockKey']):
    import logging
    logger = logging.getLogger('loanapp.api')
    logger.critical('Кэш uwsgi переполнен\n%s', json.dumps(request))
    raise UserException('Кэш uwsgi переполнен')

from colvir_cbs.auth import AuthenticatedUser
from apng_core.db import fetchall


with AuthenticatedUser(user='COLVIR') as au:
    with au.getConnection().cursor() as cursor:
        r = None
        
        if request.get('product_code'):
            p = {
                'DCL_CODE' : request.get('product_code'), 
            }
                
            cursor.execute("""
                SELECT 
                    T_PkgDea.fDclId(:DCL_CODE, 0) DCL_CODE
                FROM DUAL
                """,
                p
            )
    
            data = fetchall(cursor)
            r = data[0]
            if not (r['DCL_CODE']):
                process_vars['error'] = {
                    'error_text': 'Код продукта не существует',
                    'error_description': 'Передайте правильный код проукта, product_code',
                }
                raise StopScriptExecution()


]]>
    </script>
    <split id="0bf025bc-d699-4297-86e0-81e22c53fcc7" name="Контроль атрибутов">
        <condition id="dc4e50fe-0ffc-44c7-99a9-27a00df4333b" name="Пройден" expression="process_vars.get(&apos;error&apos;) is None"/>
        <condition id="0f632f08-2765-446f-bfd6-79d90d17a58d" name="Ошибка">
            <script id="efbde450-420a-4fc1-af62-d9160e81eb09" name="Завершение">
                <![CDATA[pv['error'] = {
    'error_code': '101',
    'error_text': process_vars.get('error').get('error_text'),
    'error_description': process_vars.get('error').get('error_description'),
    }

if pv.get('lockKey'):
    import uwsgi
    uwsgi.cache_del(pv['lockKey'])
]]>
            </script>
            <terminate id="17568b5a-1fd8-4076-92d5-8ce575de9c86" name="Завершение"/>
        </condition>
    </split>
    <script id="151e8432-49a6-4455-8121-f7552d887391" name="Поиск незавершенной заявки">
        <![CDATA[from colvir_cbs.auth import AuthenticatedUser
from apng_core.db import fetchall

with AuthenticatedUser(user='COLVIR') as au:
    con = au.getConnection()
    with con.cursor() as cursor:
        p = {
            'CLI_CODE': process_vars['request']['clientId'],
        }
        
        cursor.execute("""
            select
               d.DEP_ID,
               d.ID,
               o.CODE,
               to_date(substr(json_value(r.json, '$.app.registrationDate'),1,10), 'YYYY-MM-DD') REGISTRATION_DATE
            from T_ORD o, T_DEA d, L_REQDEA r, L_REQDEA_EXT re
            where d.dep_id=r.dep_id and d.id=r.id
                and re.dep_id=r.dep_id and re.id=r.id
                and (d.cli_dep_id, d.cli_id) = (select dep_id, id from g_cli where code=:CLI_CODE) 
                and re.state in ('START', 'ON_REVIEW', 'CREDEA')
                and o.dep_id = d.dep_id and o.id = d.id
                and json_value(r.json, '$.app.isImported') is null
        """, p)
        
        reqs = fetchall(cursor)

        if len(reqs) > 0:
            process_vars['req'] = reqs[0]
            
]]>
    </script>
    <split id="7fee50ac-bb76-4308-9707-a73a33199b4f" name="Заявки отсутствуют">
        <condition id="0313ddac-fea1-411f-bbed-2716dc56690a" name="Да" expression="process_vars.get(&apos;req&apos;) is None"/>
        <condition id="05d463fe-ad75-42aa-b363-3f46aeee312f" name="Нет">
            <script id="932adb24-2fbf-4657-86df-2c5623f34044" name="Установка отказа">
                <![CDATA[
process_vars['error'] = {
    'error_code': '101',
    'error_text': token.evalTemplate(
        '{% load wfj %}Пожалуйста дождитесь выдачи кредита. Предыдущая заявка № {{pv.req.CODE}} от {{pv.req.REGISTRATION_DATE|date}} еще на рассмотрении.'
    ),
}

import uwsgi
uwsgi.cache_del(pv['lockKey'])

]]>
            </script>
            <terminate id="36c1ad85-abc2-49e8-9eaf-0443115fef36" name="Завершение"/>
        </condition>
    </split>
    <script id="231eee65-0c70-4c28-877a-95e6159307a1" name="Зачитывание продукта">
        <![CDATA[from apng_core.aoa.services import execObjectMethod
pv['product'] = execObjectMethod({
    'object': 'product', 'method': 'getProductSetup',
    'params': {
        'productCode': pv['request']['productCode'],
        'withProduct': True,
        'withParameters': True,
        'withClassifiers': True,
        'withOptions': True,
    }
})

]]>
    </script>
    <script id="d196676b-df82-4c7f-9141-424c0692ea2e" name="Контроли по продукту">
        <![CDATA[from colvir_cbs.auth import AuthenticatedUser
from apng_core.db import fetchall
import datetime

pv['lastError'] = None

if pv['product']['parameters'].get('L_DELAYAFTERDECLINE'):
    #
    # Проверка наличия отказанных заявок за последние дни
    #
    with AuthenticatedUser(user='COLVIR') as au:
        con = au.getConnection()
        with con.cursor() as cursor:
            p = {
                'CLI_CODE': pv['request']['clientId'],
                'dt': datetime.datetime.now().date(),
                'delay': pv['product']['parameters']['L_DELAYAFTERDECLINE']['value']
            }
            
            cursor.execute("""
                select
                   d.DEP_ID,
                   d.ID,
                   o.CODE,
                   to_date(substr(json_value(r.json, '$.app.registrationDate'),1,10), 'YYYY-MM-DD') REGISTRATION_DATE
                from T_ORD o, T_DEA d, L_REQDEA r, L_REQDEA_EXT re
                where d.dep_id=r.dep_id and d.id=r.id
                    and re.dep_id=r.dep_id and re.id=r.id
                    and (d.cli_dep_id, d.cli_id) = (select dep_id, id from g_cli where code=:CLI_CODE) 
                    and re.state in ('REFUSAL_BANK')
                    and o.dep_id = d.dep_id and o.id = d.id
                    and to_date(substr(json_value(r.json, '$.app.registrationDate'),1,10), 'YYYY-MM-DD') >= :dt - :delay
            """, p)
            
            reqs = fetchall(cursor)
    
            if len(reqs) > 0:
                pv['lastError'] = {
                    'message': 'Наличие отказанных заявок'
                }
                raise StopScriptExecution()
]]>
    </script>
    <split id="fb587e22-8cb7-4c86-8018-a663026caf5d" name="Контроли пройдены">
        <condition id="dca9b7ca-d51e-43e9-8916-7a6401403ee3" name="Да" expression="pv[&apos;lastError&apos;] is None"/>
        <condition id="fd47e29b-5ea0-4b6a-9e57-d8df7853650c" name="Нет" expression="pv[&apos;lastError&apos;] is not None">
            <script id="6569e84b-3842-46b5-9e84-7d930acb427c" name="Установка отказа">
                <![CDATA[
pv['error'] = {
    'error_code': '101',
    'error_text': pv['lastError']['message'],
}

import uwsgi
uwsgi.cache_del(pv['lockKey'])
]]>
            </script>
            <terminate id="539d0610-1b2f-417c-83fc-3c55825ef96b" name="Завершение"/>
        </condition>
    </split>
    <script id="210981f9-9dd4-4d3b-b0b8-a6e8ccc7de65" name="Контроль повторных заявок">
        <![CDATA[from colvir_cbs.auth import AuthenticatedUser
from apng_core.db import fetchone
import datetime

pv['onlineAppLockDays'] = 2

with AuthenticatedUser(user='COLVIR') as au:
    con = au.getConnection()
    with con.cursor() as cursor:
        p = {
            'CLI_CODE': pv['request']['clientId'],
            'dt': datetime.datetime.now().date(),
            'ld': pv['onlineAppLockDays']
        }
        
        cursor.execute("""
            select
               d.DEP_ID,
               d.ID,
               o.CODE,
               to_date(substr(json_value(r.json, '$.app.registrationDate'),1,10), 'YYYY-MM-DD') "registrationDate",
               re.state
            from T_ORD o, T_DEA d, L_REQDEA r, L_REQDEA_EXT re
            where d.dep_id=r.dep_id and d.id=r.id
                and re.dep_id=r.dep_id and re.id=r.id
                and (d.cli_dep_id, d.cli_id) = (select dep_id, id from g_cli where code=:CLI_CODE) 
                and re.state in ('DEA_REGISTERED', 'REFUSAL_BANK', 'REFUSAL_CLI')
                and o.dep_id = d.dep_id and o.id = d.id
                and to_date(substr(json_value(r.json, '$.app.registrationDate'),1,10), 'YYYY-MM-DD') >= :dt - :ld
            order by json_value(r.json, '$.app.registrationDate') desc
        """, p)
        
        pv['req'] = fetchone(cursor)

]]>
    </script>
    <split id="9d0ace63-8827-4c38-86f1-6a5b0c02b727" name="Были заявки?">
        <condition id="cb0fd76d-6778-4b5b-b0cb-1b47147ff716" name="Нет" expression="process_vars.get(&apos;req&apos;) is None"/>
        <condition id="5547d593-2ae4-47d6-ac7d-a6271ec040e1" name="Да">
            <script id="6062f2af-557c-4874-aa2f-a09159f752cc" name="Установка отказа">
                <![CDATA[from datetime import datetime, timedelta

#print(type(pv['req']['registrationDate']))

nextDate = (datetime.fromisoformat(pv['req']['registrationDate']).date() + timedelta(days=1+pv['onlineAppLockDays'])).strftime('%d.%m.%Y')

pv['error'] = {
    'error_code': '101',
    'error_text': f'Следующую заявку можно будет подать {nextDate}' ,
}

import uwsgi
uwsgi.cache_del(pv['lockKey'])

]]>
            </script>
            <terminate id="f23144f1-cb3e-4056-ac62-5a2d4def46a6" name="Завершение"/>
        </condition>
    </split>
    <script id="0edafdf4-e965-4d82-b754-71af9ab7f497" name="Определение процентной ставки">
        <![CDATA[req = process_vars['request']

if not req.get('interest'):
    from colvir_cbs.auth import AuthenticatedUser

    with AuthenticatedUser(user='COLVIR') as au:
        p = {
            'clientCode': req['clientId'],
            'productCode': req['productCode'],
            'amount': req['amount'],
            'currency': req.get('currency'),
            'duration': req['duration'],
            'durationUnit': req['durationUnit'],
        }
    
        #try:
        req['interest'] = execObjectMethod({
            'object': 'loanapp', 'method': 'calculateInterest',
            'params': p
        })
        #except Exception as e:
        #    raise UserException({
        #        'message': 'Ошибка расчета процентной ставки по параметрам\n%s' % json.dumps(p, indent=4),
        #        'description': '%s' % e
        #    })
        ]]>
    </script>
    <script id="fd6c550d-77c2-4173-9fd3-0af916b22a45" name="Создание заявки">
        <![CDATA[import datetime
from django.db import transaction

from apng_core.auth import getUser
from colvir_cbs.auth import AuthenticatedUser

req = pv['request']

with AuthenticatedUser(user=token.initiator) as au:
    
    pv['doper'] = au.operday
    
    with transaction.atomic(using='cbs'):
    
        client = execObjectMethod({
            'object': 'client', 'method': 'getClient',
            'params': {
                'code': req['clientId'],
                'withIdentDocType': None,
                'withRegistrationAddress': True,
                'withLiveAddress': True,
            }
        })
        
        if client is None:
            raise UserException({
                'message': 'Карточка клиента %s не существует' % (req['clientId'])
            })
        
        if client.get('idDocument') is None:
            raise UserException({
                'message': 'Карточка клиента не содержит документа удостоверяющего личность'
            })
        
        if req.get('phone'):
            client['phone'] = req['phone']
    
        product = execObjectMethod({
            'object': 'product', 'method': 'getProductSetup',
            'params': {
                'productCode': req['productCode'],
                'withProduct': True,
                'withParameters': True,
                'withClassifiers': True,
                'withOptions': True,
                'withConstraints': True,
                'currency': req['currency'],
            }
        })

        client = {
            **client,
            'clientType': product['classifiers']['UZ_TZ']['value'] if product['classifiers'].get('UZ_TZ') else None,
            'clientTypeName': product['classifiers']['UZ_TZ']['name'] if product['classifiers'].get('UZ_TZ') else None,
        }
        
        income = req.get('income', {})
        if not income.get('retirementAccount'):
            if client.get('retirementAccount'):
                income['retirementAccount'] = client['retirementAccount']
            elif client.get('pinfl'):
                income['retirementAccount'] = client['pinfl']
        
        if req.get('disableDossierCheck'):
            product['options']['disableDossierCheck'] = req['disableDossierCheck']
        
        purposes = execObjectMethod({
            'object': 'product', 'method': 'getPurposesOfLoan',
            'params': {'productCode': req['productCode']}
        })

        if len(purposes)==0:
            raise UserException({
                'message': 'По продукту %s не заданы цели использования' % req['productCode']
            })
        purpose = purposes[0]
        
        afs = execObjectMethod({
            'object': 'afs', 'method': 'getAfsMethodAndDescription',
            'params': {
                'productCode': req['productCode'],
                'CLI_TYPE': '1', # физлицо
                'CRE_TYPE': product['classifiers']['UZ_VIDCRED']['value'],
                'sheet': 'OBJ',
            }
        })
        afs['data'] = {}
        
        idReqDep = None
        idReq = None
        
        if req.get('applicationId'):
            pk = req.get('applicationId').split(',')
            idReqDep = int(pk[0])
            idReq = int(pk[1])
            
            app = execObjectMethod({
                'object': 'app', 'method': 'getApplication',
                'params': {
                    'dep_id': idReqDep,
                    'id'    : idReq,
                }
            })

            appId = app['app']['appId']
            appCode = app['app']['code']
        else:    

            appId = execObjectMethod({'object': 'app', 'method': 'generateId'})

            #
            # Генерация номера заявки
            #
            appCode = execObjectMethod({
                'object': 'cbs.coderule', 'method': 'newCode',
                'params': {
                    'rule': 'L_REQDEACODE',
                    'params': {}
                }
            })


            # Определяем подразделение клиента
            
            import re
            clientDepCode = re.search(r'[0-9]*', client['maintenanceGroup'] or '').group()
            if not clientDepCode:
                raise UserException('Не задана группа обслуживания клиента (неправильное значение)')
                
            if clientDepCode == '00446':
                clientDepCode = '10725'
                
            clientDep = execObjectMethod({
                'object': 'cbs.bank', 'method': 'getDepartmentCardInfo',
                'params': {
                    'code': clientDepCode
                }
            })
            if not clientDep:
                raise UserException({'message': 'Не найдено подразделение %s, проверьте группу обслуживания клиента' % clientDepCode})
                
            if clientDep['virtualBalanceDep'] and clientDep['virtualBalanceDep'] != clientDepCode:
                # Скорее всего это касса, учитываем подразделение виртуального баланса
                clientDep = execObjectMethod({
                    'object': 'cbs.bank', 'method': 'getDepartmentCardInfo',
                    'params': {
                        'code': clientDep['virtualBalanceDep']
                    }
                })
                if not clientDep:
                    raise UserException({'message': 'Не найдено подразделение %s, проверьте настройку виртуального баланса для подразделения %s' % (clientDep['virtualBalanceDep'], clientDepCode)})
            
            idReqDep = clientDep['id']
            
            
        depCode = req.get('depCode')
        if depCode :
            from colvir_cbs.services import bank
            appDep = bank.getDepartmentInfo({'code': depCode})
            if not appDep:
                raise UserException({'message': 'Не найдено подразделение %s, проверьте выбранное клиентом подразделение обслуживания ' % depCode})
            
            idReqDep = appDep['id']
            
            
        applicationDisctrict = execObjectMethod({'object': 'app', 'method': 'prepareApplicationDistrict', 'params': {'depCode' : depCode}})
        
        registrationDate = pv['doper'].isoformat()[:10]

        if product['options'].get('appType'):
            # Вид заявки задан через справочник
            appType = {
                'appType': product['options']['appType']
            }
        else:
            raise UserException('Не настроен тип продукта для %s. Параметр L_APP_TYPE' % (product['options']['appType']))
        
        user = getUser()
        r = {
            'dep_id': idReqDep,
            'id': idReq,
            'application': {
                **appType,
                'app': {
                    **applicationDisctrict,
                    'depCode' : depCode,
                    'appId': appId,
                    'code': appCode,
                    'registrationDate': registrationDate,
                    'productCode': req['productCode'],
                    'productName': product['name'],
                    'duration': req['duration'],
                    'durationUnit': req['durationUnit'],
                    'amount': req['amount'],
                    'currency': req['currency'],
                    'interest': req['interest'],
                    
                    'purposeOfLoan': purpose['code'],
                    'purposeOfLoanName': purpose['name'],
                    
                    'purpose112OfLoan': product['classifiers']['UZ_PURPCRED_112']['value'] if product['classifiers'].get('UZ_PURPCRED_112') else None,
                    'purpose112OfLoanName': product['classifiers']['UZ_PURPCRED_112']['name'] if product['classifiers'].get('UZ_PURPCRED_112') else None,

                    'legalAct': product['classifiers']['UZ_NPA']['value'],
                    'legalActName': product['classifiers']['UZ_NPA']['name'],
                    
                    'typeOfLending': product['classifiers']['UZ_VIDCRED']['value'],
                    'typeOfLendingName': product['classifiers']['UZ_VIDCRED']['name'],
                    
                    'typeOfLending110': product['classifiers']['UZ_TYPECRED_110']['value'] if product['classifiers'].get('UZ_TYPECRED_110') else None,
                    'typeOfLending110Name': product['classifiers']['UZ_TYPECRED_110']['name'] if product['classifiers'].get('UZ_TYPECRED_110') else None,
                    
                    
                    'reviewWorkflow': product['options']['reviewWorkflow'],
                    
                    'objectOfLoan': req['objectOfLoan'],
                    
                    'inputChannel': req.get('inputChannel'),
                    
                },
                'product': product,
                'client': client,
                'income': income,
                'pledges': req['pledges'] if req.get('pledges') else [],
                'afs': afs,
                'isExternal': True,
                'agreement': req.get('agreement'),
                'user': {
                    'code': user.code,
                    'name': user.name,
                    'modified': datetime.datetime.now(),
                },
            }
        }
        
        # Для кредитов выдаваемых на карту
        if 'cardIdn' in pv['request']:
            r['application']['app']['cardIdn'] = pv['request']['cardIdn']
        
        if req.get('objectOfCredit'):
            r['application']['objectOfCredit'] = req['objectOfCredit']
            
            # Добавяем обновленное описание объекта залога
            if req['objectOfCredit']['isPledge']:
                from colvir_cbs.services.application import makePledgeFromObjectOfCredit
                pl = makePledgeFromObjectOfCredit(req['objectOfCredit'])
                r['application']['pledges'] = [{
                        'isObjectOfCredit': True,
                        **pl,
                }]
    
        if req.get('parameters'):
             r['application']['app']['parameters'] = req['parameters']
    

        pv['r'] = execObjectMethod({
            'object': 'app', 'method': 'saveApplication',
            'params': {
                'dep_id': idReqDep,
                'id': idReq,
                'app': r['application']
            }
        })
        
        # Сохранение документов досье
        if req.get('dossier'):
            execObjectMethod({
                'object': 'app', 'method': 'saveDossierFiles',
                'params': {
                    'dep_id': pv['r']['dep_id'],
                    'id': pv['r']['id'],
                    'files': [
                        {
                            'docType': x.get('docType') or x.get('doctype'),
                            'fileName': x.get('fileName') or x.get('filename'),
                            'fileData': x.get('fileData'),
                            'base64Data': x.get('base64Data') or x.get('bdata')
                        }
                        for x in req['dossier']
                    ]
                }
            })
    
        pv['req'] = execObjectMethod({
            'object': 'app', 'method': 'getApplication',
            'params': {
                'dep_id': pv['r']['dep_id'],
                'id'    : pv['r']['id'],
            }
        })

]]>
    </script>
    <script id="da726c2c-c59b-4dfc-b7b2-ed8155344b6b" name="Запуск процесса рассмотрения">
        <![CDATA[from apng_core.easyflow.services import RuntimeService
from apng_core.easyflow.models import Token

#
# Проверим, есть ли сценарии по заявке
#
ok = 'loanapp:{},{}'.format(pv['r']['dep_id'], pv['r']['id'])
processes = Token.objects.filter(objectKey=ok)

isProcessExists = processes.count() > 0

if not isProcessExists:
    RuntimeService.startProcessByCode(
        process_vars['req']['app']['reviewWorkflow'],
        {
            'objectKey': ok,
            'requestProcessId': token.process.id.__str__()
        }
    )
]]>
    </script>
    <script id="64174552-a3ab-478e-93ea-d5617b3f9e6c" name="Формирование ответа сервиса">
        <![CDATA[process_vars['response'] = {
    'applicationId': '%s,%s' % (pv['r']['dep_id'],  pv['r']['id']),
    'applicationNo': pv['r']['code'],
    'appId': pv['req']['app']['appId'],
}

import uwsgi
uwsgi.cache_del(pv['lockKey'])
]]>
    </script>
</workflow>