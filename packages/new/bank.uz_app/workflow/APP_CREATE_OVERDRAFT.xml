<workflow id="APP_CREATE_OVERDRAFT" name="Создание овердрафта по карте">
    <event name="onGetProcessObject">
        <![CDATA[ok = process_vars.get('objectKey')
kv = ok.split(':')
pk = kv[1].split(',')

from colvir_cbs.auth import AuthenticatedUser
with AuthenticatedUser() as au:
    from apng_core.aoa.services import execObjectMethod
    token._po = execObjectMethod({
        'object': 'app', 'method': 'getApplication',
        'params': {
            'dep_id': int(pk[0]),
            'id'    : int(pk[1]),
        }
    })

]]>
    </event>
    <event name="onCandidates">
        <![CDATA[def depIn(dep):
    from colvir_cbs.services import bank
    return po['app']['depCode'] in bank.getDepartmentsCodes(dep)
]]>
    </event>
    <script id="171a74b6-bf79-48d9-8f15-74338e3dea00" name="Инициализация">
        <![CDATA[
ok = pv.get('objectKey')

kv = ok.split(':')
pk = kv[1].split(',')
pv['dep_id'] = int(pk[0])
pv['id'] = int(pk[1])
]]>
    </script>
    <timer id="dc346f80-21ba-4d55-9e83-2ebd011bb6fb" name="Создание овердрафта" description="Создание овердрафта, заявка {{po.app.code}}, {{po.client.name}}" duration="00:00:00" errorDuration="00:01:00" action="continue"/>
    <script id="921ae76f-a3e3-4e18-ba69-da303b2e9400" name="Подготовка к созданию договора">
        <![CDATA[from colvir_cbs.auth import AuthenticatedUser
from django.db import transaction

import logging
logger = logging.getLogger('loanapp')

if False:
    with AuthenticatedUser() as au:
        with au.getConnection().cursor() as cursor:
            r = None
            
            params = {
                'DEP_ID' : process_vars['req']['DEP_ID'], 
                'ID'   : process_vars['req']['ID'], 
            }
                
            with transaction.atomic(using='cbs'):
                # Переносим срок во второй атрибут, нужен для создания линии
                # чтобы не заталкивать его в решение по заявке
                cursor.execute("""
                    begin 
                        update colvir.L_REQDEA set 
                            REQ_PRD2_ID=REQ_PRD_ID
                        where DEP_ID=:DEP_ID and ID=:ID;
                    end;/""",
                    params
                )
                

    
]]>
    </script>
    <script id="05ae9126-4dcf-46d6-a9d9-88086c7770d1" name="Установка овердрафта по карте">
        <![CDATA[import traceback
from django.db import transaction
from colvir_cbs.auth import AuthenticatedUser
from colvir_cbs.services import log

pv['last_error'] = None

with AuthenticatedUser() as au:
    try:
        with au.getConnection().cursor() as cursor:
            
            try:
                with transaction.atomic(using='cbs'):
                
                    p = {
                        'REQ_DEP_ID': po['dep_id'],
                        'REQ_ID': po['id'],
                        'CKC_DEP_ID': po['overdraft']['card']['agreement']['dep_id'],
                        'CKC_ID': po['overdraft']['card']['agreement']['id'],
                        'accountNo': po['overdraft']['card']['agreement']['accountNo'],
                        'amount': po['app']['amount'],
                        'DCL_CODE': po['app']['productCode'],
                        'LN_DEP_ID': po['dep_id'],
                        'OVR_DEP_ID': cursor.var(int),
                        'OVR_ID': cursor.var(int),
                        'OVR_CODE': cursor.var(str),
                    }
                    
                    cursor.execute("""
                        declare
                            oprParams varchar2(4000);
                            prmOut c_PkgStr.TPrmTBlLst;
                            ab G_ACCBLN%%rowtype;
                            a T_ACC%%rowtype;
                            idOvr number;
                            idOvrDep number;
                            sOvrCode varchar2(60);
                            req L_REQDEA%%rowtype;
                            pm T_PROCMEM%%rowtype;
                        begin
                            t_log.penable; t_log.clean;
                            
                            select * into req from L_REQDEA where DEP_ID=:REQ_DEP_ID and ID=:REQ_ID;
                            select * into pm from T_PROCMEM where DEP_ID=:REQ_DEP_ID and ORD_ID=:REQ_ID and MAINFL='1';
                            select * into ab from G_ACCBLN where CODE=:accountNo;
                            select * into a from T_ACC where DEP_ID=ab.DEP_ID and ID=ab.ID;
                        
                            oprParams := 
                                'PARAMSFL=>1'||
                                ',ACC_CODE=>'||ab.CODE||
                                ',ACC_DEP_ID=>'||ab.DEP_ID||
                                ',ACC_ID=>'||ab.ID||
                                ',AMOUNT=>'||:amount||
                                ',CLI_CODE=>'||substr(G_PkgCli.fGetCliCodeAcc(ab.CODE, ab.DEP_ID, P_OPERDAY), 1, 30)||
                                ',CLI_NAME=>'||substr(G_PkgCli.fGetCliNameAcc(ab.CODE, ab.DEP_ID, P_OPERDAY, 1), 1, 96)||
                                ',VAL_CODE=>'||substr(T_PkgVal.fGetISOCode(nvl(a.VAL_ID, P_NATVAL)), 1, 3)||
                                ',DCL_CODE=>'||:DCL_CODE||
                                -- подразделения создаваемой линии:
                                ',DEPID=>'||:LN_DEP_ID||
                                ',LN_BAL_DEP_ID=>'||P_DEPBAL(:LN_DEP_ID)||
                                ',LN_SRV_DEP_ID=>'||:LN_DEP_ID||
                                ',LN_SELL_DEP_ID=>'||:LN_DEP_ID
                            ;
                            
                            prmOut := T_PkgRunOprUtl.fRunOprByMainOrd(:CKC_DEP_ID, :CKC_ID, 'SETLIMOVRDR', oprParams);
                            
                            idOvrDep := C_PkgStr.fGetPrmVal(prmOut, 'OVR_DEP_ID');
                            idOvr := C_PkgStr.fGetPrmVal(prmOut, 'OVR_ID');
                            select CODE into sOvrCode from T_ORD where DEP_ID=idOvrDep and ID=idOvr;
                            
                            :OVR_DEP_ID := idOvrDep;
                            :OVR_ID := idOvr;
                            :OVR_CODE := sOvrCode;
                            
                            -- Добавление участника в процесс заявки
                            declare
                                op BS_OPERATION.SelfAttr;
                            begin
                                BS_OPERATION.read_process(op, pm.id);
                                BS_OPERATION.add_mem(op, P_IDDEP=>idOvrDep, p_idord=>idOvr, p_nmem=>BS_BOP.fGetPosId(pm.BOP_ID, 'DEA'));
                            end;
                            
                            
                            -- id заявки
                            T_PkgDeaPrm.pSetPrm(idOvr, idOvrDep,
                                'L_UNNUMBER', 
                                json_value(req.json, '$.app.appId')
                            );
                            
                            -- День погашения процентов
                            if json_value(req.json, '$.app.parameters.LPAYDAY') is not null then
                                T_PkgDeaPrm.pSetPrm(idOvr, idOvrDep,
                                    'LPAYDAY', 
                                    json_value(req.json, '$.app.parameters.LPAYDAY')
                                );
                            end if;

                        end;
                        
                        
                    /""",p)
                    
                    pv['overdraft'] = {
                        'dep_id': p['OVR_DEP_ID'].getvalue(),
                        'id': p['OVR_ID'].getvalue(),
                        'code': p['OVR_CODE'].getvalue(),
                    }
            
                # Сохранение ссылки на договор при заявке        
                execObjectMethod({
                    'object': 'app', 'method': 'updateApplicationJson',
                    'params': {
                        'DEP_ID': pv['dep_id'],
                        'ID': pv['id'],
                        'JSON': json.dumps({
                            'dea': {
                                'dep_id': pv['overdraft']['dep_id'],
                                'id': pv['overdraft']['id'],
                                'code': pv['overdraft']['code'],
                            },
                        }, ensure_ascii=False)
                    }
                })

                # Сохраняем обеспечение при договоре
                from loanapp.services.application import savePledges
                savePledges({
                    'dep_id': pv['overdraft']['dep_id'],
                    'id': pv['overdraft']['id'],
                    'pledges': po['pledges'],
                    'forceNew': True,
                })
            
            except Exception as e:
                cursor.execute("""
                    select * from table(colvir.t_log.fGetLog())
                """)
    
                log_text = log.readLog()
                pv['last_error'] = {
                    'message': 'Ошибка установки лимита овердрафта\n%s' % e,
                    'description': traceback.format_exc(),
                    'trace': log_text,
                }
                
    except Exception as e:
        pv['last_error'] = {
            'message': 'Ошибка установки лимита овердрафта\n%s' % e,
            'trace': traceback.format_exc()
        }
    
    
    ]]>
    </script>
    <split id="01f1ca08-7f86-42e1-b42b-5e832e082e51" name="Результат установки лимита">
        <condition id="5ba94942-81f1-4834-9534-d1e59735a763" name="Успешно" expression="pv[&apos;last_error&apos;] is None">
            <script id="434aadee-175d-4c15-be4d-378af0a6810b" name="Журнализация созданного договора">
                <journal time="leave">
                    <![CDATA[Создан договор овердрафта {{pv.overdraft.code}}]]>
                </journal>
            </script>
            <script id="43967b02-94ed-4041-9371-5345da471105" name="Актуализация созданного договора">
                <![CDATA[from colvir_cbs.auth import AuthenticatedUser
from colvir_cbs.services import log
from django.db import transaction
import traceback

import logging
logger = logging.getLogger('loanapp')

pv['last_error'] = None

pv['overdraft']['state'] = 'ACTUAL'

raise StopScriptExecution()

try:
    with AuthenticatedUser() as au:
        con = au.getConnection()
        with con.cursor() as cursor:
            r = None
            
              
            try:
                with transaction.atomic(using='cbs'):
                    params = {
                        'DEP_ID' : pv['overdraft']['dep_id'], 
                        'ID'   : pv['overdraft']['id'],
                        'STATE': cursor.var(str)
                    }
                    # Регистрация договора
                    cursor.execute("""
                        declare
                            tdea colvir.T_DEA%%rowtype;
                            accbln colvir.G_ACCBLN%%rowtype;
                            line_state varchar2(30);
                        begin
                            colvir.t_log.penable; colvir.t_log.clean;
                            
                            line_state := colvir.c_fprm('N_CHECK_SCADPS_FL');
                            
                            if line_state = 0 then
                                -- Регистрация договора
                                if T_PkgRunOprUtl.fOprAvailable(:DEP_ID, :ID, 'REG') = 2 then
                                    T_PkgRunOprUtl.pRunOprByMainOrd(:DEP_ID, :ID, 'REG', '');
                                end if;

                                -- Расчет эффективной ставки                                
                                if T_PkgRunOprUtl.fOprAvailable(:DEP_ID, :ID, 'CREDITRATE') = 2 then
                                    if T_PkgRunOprUtl.fOprExist(T_PkgProcess.fGetIdByMainOrd(:DEP_ID, :ID), 'CREDITRATE') = 0 then
                                        T_PkgRunOprUtl.pRunOprByMainOrd(:DEP_ID, :ID, 'CREDITRATE', '');
                                    end if;
                                end if;
                                
                                -- Актуализация
                                if T_PkgRunOprUtl.fOprAvailable(:DEP_ID, :ID, 'RUN') = 2 then
                                    T_PkgRunOprUtl.pRunOprByMainOrd(:DEP_ID, :ID, 'RUN', '');
                                end if;
                            end if;
                            
                            -- Получаем состояние договора чтобы решить что делать дальше
                            :STATE := T_PkgProcess.fGetStatCodeByMainOrd(:DEP_ID, :ID);
                        end;/""",
                        params
                    )
                    
                #
                # Если договор стал актуален, можно идти дальше
                #
                pv['overdraft']['state'] = params['STATE'].getvalue()
                    
                    
                    
            except Exception as e:
                log_text = log.readLog()
                pv['last_error'] = {
                    'message': 'Ошиюка актуализации договора \n%s' % e,
                    'trace': log_text,
                }
        
except Exception as e:
    tb = traceback.format_exc()
    pv['last_error'] = {
        'message': 'Ошибка актуализации договора %s' % e,
        'trace': tb,
    }

# Стандартный результат в dea
pv['dea'] = pv['overdraft']
    
    ]]>
            </script>
            <split id="fac0be44-7418-4138-a731-a8fc81693cbd" name="Результат актуализации">
                <condition id="6dae44ff-f2c6-4c3c-b7ba-eeded3351614" name="Успешно" expression="pv[&apos;last_error&apos;] is None and pv[&apos;overdraft&apos;].get(&apos;state&apos;) == &apos;ACTUAL&apos;"/>
                <condition id="bccb219e-9592-4692-93cf-a186c69519ce" name="Ошибка актуализации" expression="pv[&apos;last_error&apos;] is not None">
                    <task id="4fbeb45f-7352-4d64-bf73-d73c2c3859c9" name="Показ ошибки актуализации" autoStart="true" description="Ошибка актуализации договора овердрафта {{pv.overdraft.code}} по заявке {{po.app.code}}, {{po.client.name}}">
                        <clientTask path="/easyflow/error-dialog" taskName="{{task.description}}">
                            <p name="caption" expression="task[&apos;description&apos;]"/>
                            <p name="error" expression="pv[&apos;last_error&apos;]"/>
                            <p name="actionVar" expression="&apos;action&apos;"/>
                            <p name="actions" expression="[{ &apos;name&apos;: &apos;Повторить&apos;, &apos;value&apos;: &apos;repeat&apos;},  ]"/>
                            <p name="objectKey" expression="pv.get(&apos;objectKey&apos;)"/>
                        </clientTask>
                    </task>
                    <jump id="eb90fb88-959d-478a-93d5-b9013113eb3c" name="Переход к Актуализация созданного договора" target_id="43967b02-94ed-4041-9371-5345da471105"/>
                </condition>
                <condition id="a66498e1-7635-49d9-a89f-ae825051a303" name="Ожидание" expression="pv[&apos;last_error&apos;] is None and pv[&apos;overdraft&apos;].get(&apos;state&apos;) != &apos;ACTUAL&apos;">
                    <timer id="9135ae1f-0da0-48d8-8684-5607e05085a8" name="Ожидание актуализации" description="Ожидание актуализации договора {{pv.overdraft.code}}" duration="00:00:30" errorDuration="00:01:00" action="continue"/>
                    <jump id="3b4d5389-bde2-496f-abe6-dcac51690622" name="Переход к Актуализация созданного договора" target_id="43967b02-94ed-4041-9371-5345da471105"/>
                </condition>
            </split>
        </condition>
        <condition id="a4bab40c-58e9-41e3-9373-177210ab2928" name="Ошибка" expression="process_vars[&apos;last_error&apos;] is not None">
            <task id="c11f8214-e637-4f87-a4ba-28937f3b0ab3" name="Показ ошибки установки лимита" autoStart="true" description="Ошибка установки лимита овердрафта по заявке {{po.app.code}}, {{po.client.name}}">
                <clientTask path="/easyflow/error-dialog" taskName="{{task.description}}">
                    <p name="caption" expression="task[&apos;description&apos;]"/>
                    <p name="error" expression="pv[&apos;last_error&apos;]"/>
                    <p name="actionVar" expression="&apos;action&apos;"/>
                    <p name="actions" expression="[{ &apos;name&apos;: &apos;Повторить&apos;, &apos;value&apos;: &apos;repeat&apos;},  ]"/>
                    <p name="objectKey" expression="pv.get(&apos;objectKey&apos;)"/>
                </clientTask>
            </task>
            <jump id="b7eb2703-dafd-483d-86df-3b806acd226b" name="Переход к Установка овердрафта по карте" target_id="05ae9126-4dcf-46d6-a9d9-88086c7770d1"/>
        </condition>
    </split>
</workflow>