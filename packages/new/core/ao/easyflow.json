{
    "forms": {
        "activeTimersTask": {
            "title": "Active timers",
            "className": "vertical task task-panel",
            "style": {
                "height": "100%",
                "overflow": "hidden"
            },
            "$": {
                "@taskBar": {
                    "className": "horizontal",
                    "$": {
                        ".ap": {
                            "control": "ActionPanel",
                            "style": {
                                "padding": "8px"
                            },
                            "controlProps": {
                                "actions": [
                                    {
                                        "title": "Refresh",
                                        "icon": "refresh",
                                        "mini": true,
                                        "action": {
                                            "js": "task.events.fire('onRefreshTimers');"
                                        }
                                    },
                                    {
                                        "title": "View",
                                        "icon": "view",
                                        "mini": true,
                                        "action": {
                                            "js": "frontend.dialog({object: 'easyflow', form: 'tokenInfoDialog', params: {id: context.selectedToken.id}})"
                                        },
                                        "disabled$": "!context.selectedToken"
                                    }
                                ]
                            }
                        },
                        ".spacer": {
                            "style": {
                                "flexGrow": 1
                            }
                        },
                        ".btnFilter": {
                            "label": "Filter",
                            "style": {
                                "padding": "8px"
                            },
                            "control": "Button",
                            "controlOpts": {
                                "startIcon": "tune",
                                "badge": {
                                    "content$": "Object.keys(mem.filter||{}).length"
                                }
                            },
                            "controlProps": {
                                "variant": "outlined",
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "context.filterVisible =  !context.filterVisible;"
                                },
                                {
                                    "name": "refresh"
                                }
                            ]
                        }
                    }
                },
                "@filterPortal": {
                    "style": {
                        "position": "relative"
                    },
                    "visible$": "context.filterVisible || false",
                    "$": {
                        "@filterForm": {
                            "className": "vertical",
                            "style": {
                                "position": "absolute",
                                "minHeight": "100px",
                                "width": "320px",
                                "top": 0,
                                "right": 0,
                                "zIndex": 1,
                                "backgroundColor": "rgb(255, 255, 255)",
                                "borderRadius": "4px",
                                "boxShadow": "rgba(0, 0, 0, 0.32) 0px 3px 6px 0px",
                                "padding": "4px"
                            },
                            "$": {
                                "@form": {
                                    "$": {
                                        "filter": {
                                            "className": "vertical",
                                            "$": {
                                                "id": {
                                                    "label": "id",
                                                    "control": "TextEdit"
                                                },
                                                "process_id": {
                                                    "label": "process Id",
                                                    "control": "TextEdit"
                                                },
                                                "flow_id": {
                                                    "label": "flow Id",
                                                    "control": "TextEdit"
                                                },
                                                "description__icontains": {
                                                    "label": "Contains",
                                                    "control": "TextEdit"
                                                },
                                                "errorsOnly": {
                                                    "label": "Errors only",
                                                    "control": "Checkbox"
                                                }
                                            }
                                        }
                                    }
                                },
                                "@buttons": {
                                    "className": "horizontal",
                                    "style": {
                                        "justifyContent": "start"
                                    },
                                    "$": {
                                        "btnClean": {
                                            "label": "Clear",
                                            "control": "Button",
                                            "controlProps": {
                                                "variant": "outlined",
                                                "color": "primary"
                                            },
                                            "action": [
                                                {
                                                    "js": "mem.filter = {}"
                                                },
                                                {
                                                    "name": "refreshFilter"
                                                }
                                            ]
                                        },
                                        "btnApply": {
                                            "label": "Apply",
                                            "control": "Button",
                                            "controlProps": {
                                                "variant": "contained",
                                                "color": "primary"
                                            },
                                            "action": [
                                                {
                                                    "name": "onApplyFilter"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "events": {
                        "refreshFilter": {
                            "js": ";"
                        }
                    }
                },
                "|timers": {
                    "style": {
                        "flex": 1,
                        "overflow": "hidden"
                    },
                    "control": "ListTable",
                    "controlProps": {
                        "rowModelType": "infinite",
                        "id": "id",
                        "compact": true,
                        "style": {
                            "height": "100%"
                        },
                        "refreshEvent": "onRefreshTimers",
                        "context$": "context.listContext",
                        "columns!": {
                            "id": {
                                "label": "id",
                                "compact": true,
                                "width": 277,
                                "fields": {
                                    "workflow_id": {},
                                    "id": {}
                                }
                            },
                            "created": {
                                "label": "Created",
                                "width": 150,
                                "format": "datetimesec"
                            },
                            "started": {
                                "label": "Execution",
                                "width": 150,
                                "fields": {
                                    "started": {
                                        "format": "datetimesec"
                                    },
                                    "scheduled": {
                                        "format": "datetimesec"
                                    }
                                }
                            },
                            "wait_time": {
                                "label": "Wait Time",
                                "width": 150,
                                "format": "duration"
                            },
                            "initiator": {
                                "label": "Initiaior",
                                "width": 140
                            },
                            "description": {
                                "label": "Description",
                                "flex": 1,
                                "cellStyle": {
                                    "whiteSpace": "normal !important",
                                    "lineHeight": 1.4,
                                    "display": "flex",
                                    "alignItems": "center"
                                }
                            }
                        },
                        "gridOptions": {
                            "domLayout": "normal",
                            "getRowStyle$": "(function(p){return p?.data?.task_state=='error' && {color: '#f44336'}})"
                        }
                    },
                    "events": {
                        "onGetRows": {
                            "js": "backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'getActiveTimerList', params: {request: {...params.request, filterModel2: mem.filter}}}).then(r=>onSuccess(r))"
                        },
                        "onSelectionChanged": [
                            {
                                "js": "context.selectedToken = selectedRow;"
                            },
                            {
                                "name": "refresh"
                            }
                        ]
                    }
                }
            },
            "events": {
                "onTaskCreated": {
                    "js": "context.listContext = {listRequestCache: []};"
                },
                "onApplyFilter": [
                    {
                        "js": "task.events.fire('onRefreshTimers')"
                    },
                    {
                        "js": "context.filterVisible=false;"
                    }
                ],
                "refresh": {
                    "js": ";"
                }
            }
        },
        "journalTask": {
            "title": "Process journal",
            "className": "task-panel vertical",
            "$": {
                "@processFilter": {
                    "$": {
                        "objectKey": {
                            "label": "Object Key",
                            "control": "TextEdit"
                        },
                        ".btnApply": {
                            "label": "Apply",
                            "control": "Button",
                            "action": {
                                "name": "refresh"
                            }
                        }
                    }
                },
                "@journal": {
                    "style": {
                        "overflowY": "auto"
                    },
                    "$": {
                        ".state": {
                            "control": "ModuleComponent",
                            "controlProps": {
                                "componentPath": "/easyflow/state",
                                "objectKey$": "mem.objectKey",
                                "lastUpdate$": "context.lastUpdate"
                            }
                        }
                    },
                    "params": {
                        "objectKey$": "mem.objectKey"
                    }
                }
            },
            "events": {
                "refresh": {
                    "js": "context.lastUpdate = +new Date(); forceUpdate();"
                }
            }
        },
        "objectJournalTask": {
            "title": "Object journal",
            "className": "task-panel vertical",
            "$": {
                "@buttons": {
                    "style": {
                        "margin": "8px"
                    },
                    "$": {
                        ".btnRefresh": {
                            "label": "Refresh",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "name": "refresh"
                            }
                        }
                    }
                },
                "@journal": {
                    "style": {
                        "flex": 1,
                        "overflowY": "auto"
                    },
                    "$": {
                        ".journal": {
                            "control": "ObjectJournal",
                            "controlProps": {
                                "objectKey$": "task.params.objectKey",
                                "refreshEvent": "onRefreshJournal"
                            },
                            "events": {
                                "onGetRows": {
                                    "js": "backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'getObjectJournal', params: {objectKey: task.params.objectKey}}).then(r=>onSuccess(r))"
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "refresh": {
                    "js": "task.events.fire('onRefreshJournal')"
                }
            }
        },
        "objectJournalForm": {
            "className": "vertical",
            "style": {
                "height": "100%",
                "overflow": "hidden"
            },
            "$": {
                "@buttons": {
                    "style": {
                        "margin": "8px"
                    },
                    "$": {
                        ".btnRefresh": {
                            "label": "Refresh",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "name": "refresh"
                            }
                        }
                    }
                },
                "@journal": {
                    "style": {
                        "flex": 1,
                        "overflowY": "auto"
                    },
                    "$": {
                        ".journal": {
                            "control": "ObjectJournal",
                            "controlProps": {
                                "objectKey$": "params.objectKey",
                                "refreshEvent": "onRefreshJournal"
                            },
                            "events": {
                                "onGetRows": {
                                    "js": "backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'getObjectJournal', params: {objectKey: params.objectKey}}).then(r=>onSuccess(r))"
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "refresh": {
                    "js": "task.events.fire('onRefreshJournal')"
                }
            }
        },
        "createDiagramCopyDialog": {
            "title": "Create workflow copy",
            "style": {
                "width": "600px"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "padding": "4px 0px 8px 0px"
                    },
                    "$": {
                        "code": {
                            "label": "Code",
                            "control": "TextEdit"
                        },
                        "name": {
                            "label": "Name",
                            "control": "TextEdit"
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "flexDirection": "row-reverse"
                    },
                    "$": {
                        ".btnAppy": {
                            "label": "Create",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "contained"
                            },
                            "action": [
                                {
                                    "js": "console.log('eval context', arguments);"
                                },
                                {
                                    "js": "return backend.post('/easyflow/deployment/getDeploymentById', {deploymentId: params.id}).then((r)=>{context.xmlText = r.data})"
                                },
                                {
                                    "js": "context.xmlDoc = (new DOMParser()).parseFromString(context.xmlText, 'application/xml');"
                                },
                                {
                                    "js": "context.xmlDoc.documentElement.setAttribute('id', mem.code); context.xmlDoc.documentElement.setAttribute('name', mem.name);"
                                },
                                {
                                    "js": "context.walker = context.xmlDoc.createTreeWalker(context.xmlDoc.documentElement, NodeFilter.SHOW_ELEMENT, {acceptNode: node => !!node.id,});"
                                },
                                {
                                    "js": "while (context.walker.nextNode()) {context.walker.currentNode.setAttribute('id', uuidv4());}"
                                },
                                {
                                    "js": "context.targetXmlText = (new XMLSerializer()).serializeToString(context.xmlDoc);"
                                },
                                {
                                    "js": "tm.newTask({path: '/easyflow/diagram-graphics-edit', title: mem.name, data: {deployment: {data: context.targetXmlText}, isModified: true, loaded: true,}})"
                                }
                            ]
                        },
                        ".btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close();",
                                "params": {
                                    "disableUpdate": true
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onDialogCreated": {
                    "js": "mem.code = 'copy_'+params.code; mem.name = _('Copy of')+' '+params.name"
                }
            }
        },
        "tokenInfoDialog": {
            "title": "Token details",
            "className": "vertical",
            "style": {
                "width": "900px",
                "height": "800px",
                "overflow": "hidden"
            },
            "$": {
                "@form": {
                    "object": "easyflow",
                    "form": "tokenInfoForm",
                    "style": {
                        "flex": 1,
                        "overflow": "hidden"
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "justifyContent": "end"
                    },
                    "$": {
                        ".btnClose": {
                            "label": "Close",
                            "control": "Button",
                            "controlProps": {
                                "variant": "text",
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close()",
                                "disableUpdate": true
                            }
                        }
                    }
                }
            },
            "events": {
                "onFormCreated": [
                    {
                        "js": "delete task.data.objectKey; delete task.data.$easyflowstate;"
                    },
                    {
                        "name": "onLoadToken"
                    }
                ],
                "onLoadToken": {
                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'getTokenInfo', params: {id: params.id}}).then(r=>mem.token=r)"
                }
            }
        },
        "tokenInfoForm": {
            "title": "Token",
            "style": {
                "height": "100%"
            },
            "$": {
                "token": {
                    "style": {
                        "height": "100%"
                    },
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "pages": {
                                    "tokenDetailInfo": {
                                        "title": "Token",
                                        "style": {
                                            "height": "100%",
                                            "overflow": "auto"
                                        },
                                        "$": {
                                            "@form": {
                                                "object": "easyflow",
                                                "form": "tokenCommonInfoForm"
                                            }
                                        }
                                    },
                                    "tokenVars": {
                                        "title": "Token Attributes",
                                        "style": {
                                            "height": "100%",
                                            "overflow": "auto"
                                        },
                                        "$": {
                                            "|tokenVars": {
                                                "$": {
                                                    "@form": {
                                                        "object": "easyflow",
                                                        "form": "tokenVarsForm"
                                                    }
                                                }
                                            }
                                        },
                                        "events": {
                                            "onSaveTokenVar": [
                                                {
                                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'saveTokenVar', params: {tokenId: mem.id, name: params.name, value: params.value}})"
                                                },
                                                {
                                                    "name": "onLoadToken"
                                                }
                                            ]
                                        }
                                    },
                                    "processVars": {
                                        "title": "Process Attributes",
                                        "style": {
                                            "height": "100%",
                                            "overflow": "auto"
                                        },
                                        "$": {
                                            "|processVars": {
                                                "$": {
                                                    "@form": {
                                                        "object": "easyflow",
                                                        "form": "tokenVarsForm"
                                                    }
                                                }
                                            }
                                        },
                                        "events": {
                                            "onSaveTokenVar": [
                                                {
                                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'saveTokenVar', params: {tokenId: mem.process_id, name: params.name, value: params.value}})"
                                                },
                                                {
                                                    "name": "onLoadToken"
                                                }
                                            ]
                                        }
                                    },
                                    "candidates": {
                                        "title": "Candidates",
                                        "style": {
                                            "height": "100%",
                                            "overflow": "auto"
                                        },
                                        "$": {
                                            "@form": {
                                                "object": "easyflow",
                                                "form": "taskCandidatesForm"
                                            }
                                        },
                                        "visible$": "mem.type=='task'"
                                    },
                                    "journal": {
                                        "title": "Journal",
                                        "style": {
                                            "height": "100%",
                                            "overflow": "auto"
                                        },
                                        "$": {
                                            ".journal": {
                                                "control": "ObjectJournal",
                                                "controlProps": {
                                                    "objectKey$": "mem.objectKey"
                                                },
                                                "events": {
                                                    "onGetRows": {
                                                        "js": "backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'getObjectJournal', params: {objectKey: mem.objectKey}}).then(r=>onSuccess(r))"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {}
        },
        "tokenCommonInfoForm": {
            "title": "Token information",
            "className": "vertical",
            "$": {
                "@head": {
                    "className": "horizontal",
                    "style": {
                        "width": "100%",
                        "paddingTop": "8px"
                    },
                    "$": {
                        "@ids": {
                            "className": "vertical",
                            "style": {
                                "flex": 1
                            },
                            "$": {
                                "id": {
                                    "label": "id",
                                    "control": "TextEdit"
                                },
                                "process_id": {
                                    "label": "process_id",
                                    "control": "TextEdit"
                                },
                                "parent_id": {
                                    "label": "parent_id",
                                    "control": "TextEdit"
                                },
                                "flow_id": {
                                    "label": "flow_id",
                                    "control": "TextEdit"
                                },
                                "deployment_code": {
                                    "label": "Workflow",
                                    "control": "TextEdit"
                                },
                                "flow_name": {
                                    "label": "Action",
                                    "control": "TextEdit"
                                },
                                "@operations": {
                                    "$": {
                                        ".ap": {
                                            "control": "ActionPanel",
                                            "controlProps": {
                                                "actions": [
                                                    {
                                                        "title": "Stop timer",
                                                        "visible$": "mem.type=='timer' && mem.state=='active'",
                                                        "action": {
                                                            "confirm": {
                                                                "title": "Confirmation",
                                                                "message$": "`Stop timer?`",
                                                                "yes": "Yes",
                                                                "no": "No"
                                                            },
                                                            "name": "onStopToken"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@add": {
                            "className": "vertical",
                            "style": {
                                "flex": 1
                            },
                            "$": {
                                "type": {
                                    "label": "Type",
                                    "control": "TextEdit"
                                },
                                "state": {
                                    "label": "State",
                                    "control": "TextEdit"
                                },
                                "task_state": {
                                    "label": "Task state",
                                    "control": "TextEdit"
                                },
                                "@bi": {
                                    "className": "horizontal",
                                    "$": {
                                        "initiator": {
                                            "label": "Initiator",
                                            "style": {
                                                "width": "75%"
                                            },
                                            "control": "TextEdit"
                                        },
                                        "btnChangeInitiator": {
                                            "label": "Modify",
                                            "control": "Button",
                                            "style": {
                                                "marginLeft": "5px"
                                            },
                                            "controlProps": {
                                                "variant": "text",
                                                "color": "primary"
                                            },
                                            "action": {
                                                "js": "frontend.dialog({object:'easyflow', form: 'modifyInitiatorDialog', mem: {tokenId: mem.id, oldInitiator: mem.initiator, initiator: mem.initiator }});"
                                            }
                                        }
                                    }
                                },
                                "performer": {
                                    "label": "Performer",
                                    "control": "TextEdit"
                                },
                                "@cr": {
                                    "className": "horizontal",
                                    "$": {
                                        "created": {
                                            "label": "Created",
                                            "style": {
                                                "flex": 1
                                            },
                                            "control": "TextEdit",
                                            "getter": "formatters.datetimesec(mem.created)"
                                        },
                                        "scheduled": {
                                            "label": "Scheduled",
                                            "style": {
                                                "flex": 1
                                            },
                                            "control": "TextEdit",
                                            "getter": "formatters.datetimesec(mem.scheduled)"
                                        }
                                    }
                                },
                                "@ts": {
                                    "className": "horizontal",
                                    "$": {
                                        "started": {
                                            "label": "Started",
                                            "style": {
                                                "flex": 1
                                            },
                                            "control": "TextEdit",
                                            "getter": "formatters.datetimesec(mem.started)"
                                        },
                                        "completed": {
                                            "label": "Completed",
                                            "style": {
                                                "flex": 1
                                            },
                                            "control": "TextEdit",
                                            "getter": "formatters.datetimesec(mem.completed)"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": {
                    "label": "Description",
                    "control": "TextEdit",
                    "controlProps": {
                        "multiline": true,
                        "minRows": 3
                    }
                },
                "@children": {
                    "title": "Subprocesses",
                    "$": {
                        "children": {
                            "control": "ListTable",
                            "controlOpts": {
                                "columns!": {
                                    "id": {
                                        "label": "Id",
                                        "width": 200
                                    },
                                    "deployment_code": {
                                        "label": "Code",
                                        "flex": 1
                                    }
                                }
                            },
                            "events": {
                                "onRowDoubleClicked": {
                                    "js": "tm.newTask({path: '/aoa/ObjectListTask', title: `${_('Process')} ${params.selectedRow.id}`, params: {object: 'easyflow', list: 'processManager', token_id: params.selectedRow.id}});",
                                    "disableUpdate": true
                                }
                            }
                        }
                    },
                    "visible$": "mem.children?.length > 0"
                },
                ".error": {
                    "label": "Error",
                    "control": "TextEdit",
                    "controlProps": {
                        "multiline": true,
                        "minRows": 7
                    },
                    "getter": "mem.tokenVars?.error?.message"
                }
            },
            "events": {
                "onStopToken": [
                    {
                        "js": "return backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'stopToken', params: {tokenId: mem.id}})"
                    },
                    {
                        "name": "onLoadToken"
                    }
                ],
                "onChangeInitiator": [
                    {
                        "js": "return backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'changeProcessInitiator', params: {'tokenId': params.tokenId, 'oldInitiator': params.oldInitiator, 'initiator': params.initiator}});"
                    },
                    {
                        "name": "onLoadToken"
                    }
                ]
            }
        },
        "tokenVarsForm": {
            "title": "Token attributes",
            "$": {
                ".vars": {
                    "control": "ListTable",
                    "getter": "Object.keys(mem).map(x=>({name: x, value: JSON.stringify(mem[x], null, 4)}))",
                    "controlProps": {
                        "listContext$": "(()=>{context.vctx=context.vctx||{}; return context.vctx;})()",
                        "columns!": {
                            "name": {
                                "label": "Attribute",
                                "width": 200
                            },
                            "value": {
                                "label": "Value",
                                "flex": 1,
                                "editable": true,
                                "cellEditor": "agLargeTextCellEditor",
                                "cellStyle": {
                                    "whiteSpace": "normal !important",
                                    "lineHeight": 1.4,
                                    "display": "flex",
                                    "alignItems": "center"
                                }
                            }
                        }
                    },
                    "events": {
                        "onRowDoubleClicked": {
                            "js": "frontend.dialog({object: 'easyflow', form: 'modifyTokenVarDialog', mem: {name: context.vctx.selectedRow.name, value: context.vctx.selectedRow.value}})"
                        }
                    }
                }
            },
            "events": {}
        },
        "modifyTokenVarDialog": {
            "title": "Modify token attribute",
            "className": "vertical",
            "style": {
                "width": "800px",
                "height": "500px",
                "overflow": "hidden"
            },
            "$": {
                "@form": {
                    "style": {
                        "flex": 1,
                        "overflow": "hidden"
                    },
                    "object": "easyflow",
                    "form": "modifyTokenVarForm"
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "flexDirection": "row-reverse"
                    },
                    "$": {
                        ".btnAppy": {
                            "label": "Save",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "contained"
                            },
                            "action": [
                                {
                                    "js": "context.j = JSON.parse(mem.value)"
                                },
                                {
                                    "name": "onSaveTokenVar",
                                    "params": {
                                        "name$": "mem.name",
                                        "value$": "context.j"
                                    }
                                },
                                {
                                    "js": "actions.close();",
                                    "params": {
                                        "disableUpdate": true
                                    }
                                }
                            ]
                        },
                        ".btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close();",
                                "params": {
                                    "disableUpdate": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "modifyTokenVarForm": {
            "title": "Modify token attribute",
            "className": "vertical",
            "style": {
                "height": "100%"
            },
            "$": {
                "name": {
                    "style": {
                        "marginTop": "4px"
                    },
                    "label": "Name",
                    "control": "TextEdit",
                    "readOnly": true
                },
                "value": {
                    "visible": false,
                    "label": "Value",
                    "style": {
                        "flex": 1,
                        "overflow": "hidden"
                    },
                    "control": "TextEdit",
                    "controlProps": {
                        "multiline": true,
                        "style": {
                            "height": "100%"
                        },
                        "InputProps": {
                            "style": {
                                "height": "100%"
                            }
                        },
                        "inputProps": {
                            "style": {
                                "height": "100%",
                                "overflow": "auto"
                            },
                            "spellCheck": false
                        }
                    }
                },
                "@json": {
                    "style": {
                        "flex": 1
                    },
                    "$": {
                        "value": {
                            "style": {
                                "height": "100%",
                                "overflow": "hidden"
                            },
                            "control": "AceEditor",
                            "controlProps": {
                                "editorId": "requestJsonEdit",
                                "mode": "json"
                            },
                            "events": {
                                "onChange": {
                                    "name": "onModified"
                                }
                            }
                        }
                    }
                }
            }
        },
        "taskCandidatesForm": {
            "title": "Candidates",
            "className": "vertical",
            "style": {
                "overflowY": "hidden",
                "width": "600px"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "overflowY": "hidden",
                        "flexGrow": 1
                    },
                    "$": {
                        ".ap": {
                            "control": "ActionPanel",
                            "controlProps": {
                                "actions": [
                                    {
                                        "title": "Add",
                                        "icon": "add",
                                        "mini": true,
                                        "action": {
                                            "name": "addCandidate"
                                        }
                                    },
                                    {
                                        "title": "Remove",
                                        "icon": "delete",
                                        "mini": true,
                                        "action": {
                                            "name": "deleteCandidate",
                                            "confirm": {
                                                "title": "Remove candidate",
                                                "message$": "`${_('Remove candidate')} ${context.selectedCandidate.user||''}, ${_('group')} ${context.selectedCandidate.group||''} ?`",
                                                "yes": "Yes",
                                                "no": "No"
                                            }
                                        },
                                        "disabled$": "!context.selectedCandidate"
                                    }
                                ]
                            }
                        },
                        "|candidates": {
                            "control": "ListTable",
                            "controlProps": {
                                "columns!": {
                                    "user": {
                                        "label": "User",
                                        "fastFilter": false,
                                        "editable": true,
                                        "width": 300
                                    },
                                    "group": {
                                        "label": "Group",
                                        "fastFilter": false,
                                        "editable": true,
                                        "flex": 1
                                    }
                                }
                            },
                            "events": {
                                "onSelectionChanged": [
                                    {
                                        "js": "context.selectedCandidate = selectedRow;"
                                    },
                                    {
                                        "name": "refresh"
                                    }
                                ]
                            }
                        }
                    },
                    "events": {
                        "refresh": {
                            "js": ";"
                        },
                        "addCandidate": {
                            "js": "context.selectedCandidate = null; mem.candidates.push({user: null, group: null});mem.candidates = [...mem.candidates];"
                        },
                        "deleteCandidate": {
                            "js": "mem.candidates.splice(mem.candidates.indexOf(context.selectedCandidate), 1); context.selectedCandidate=null;mem.candidates = [...mem.candidates];"
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "justifyContent": "end"
                    },
                    "$": {
                        "btnApply": {
                            "label": "Apply",
                            "control": "Button",
                            "controlProps": {
                                "variant": "contained",
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'saveCandidates', params: {tokenId: mem.id, candidates:mem.candidates}})",
                                    "disableUpdate": true
                                }
                            ]
                        }
                    }
                }
            }
        },
        "selectTaskUserDialog": {
            "title": "Select user",
            "style": {
                "height": "500px",
                "width": "800px",
                "overflow": "hidden"
            },
            "className": "vertical",
            "$": {
                "@form": {
                    "style": {
                        "flexGrow": 1,
                        "overflow": "hidden"
                    },
                    "$": {
                        "@candidates": {
                            "visible$": "context.mode == 'candidates'",
                            "style": {
                                "height": "100%"
                            },
                            "$": {
                                "|candidates": {
                                    "style": {
                                        "height": "100%"
                                    },
                                    "control": "ListTable",
                                    "controlProps": {
                                        "style": {
                                            "height": "100%"
                                        },
                                        "gridOptions": {
                                            "domLayout": "normal"
                                        },
                                        "columns!": {
                                            "code": {
                                                "label": "Code",
                                                "width": 150
                                            },
                                            "longname": {
                                                "label": "Name",
                                                "flex": 1
                                            }
                                        }
                                    },
                                    "events": {
                                        "onSelectionChanged": [
                                            {
                                                "js": "context.selectedUser = selectedRow.code;"
                                            },
                                            {
                                                "name": "refresh"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "@allusers": {
                            "visible$": "context.mode == 'allusers'",
                            "style": {
                                "height": "100%"
                            },
                            "$": {
                                "@form": {
                                    "object": "bank_user",
                                    "form": "selectUserForm",
                                    "style": {
                                        "height": "100%"
                                    },
                                    "events": {
                                        "onSelectUser": [
                                            {
                                                "js": "context.selectedUser = params.userCode"
                                            },
                                            {
                                                "name": "refresh"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "justifyContent": "end"
                    },
                    "$": {
                        ".btnMode": {
                            "label$": "context.mode=='allusers'?_('Candidates'):_('All users')",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "text"
                            },
                            "action": [
                                {
                                    "js": "context.mode=context.mode=='allusers'?'candidates':'allusers'; context.selectedUser=null;"
                                },
                                {
                                    "name": "refresh"
                                }
                            ]
                        },
                        ".btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "text"
                            },
                            "action": {
                                "js": "actions.close()",
                                "disableUpdate": true
                            }
                        },
                        ".btnSelect": {
                            "label": "Select",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "contained"
                            },
                            "readOnly$": "!context.selectedUser",
                            "action": [
                                {
                                    "name": "onAssignTaskToUser",
                                    "params": {
                                        "tokenId$": "params.taskId",
                                        "user$": "context.selectedUser"
                                    }
                                },
                                {
                                    "js": "actions.close()",
                                    "disableUpdate": true
                                }
                            ]
                        }
                    }
                }
            },
            "events": {
                "onAssignTaskToUser": {
                    "js": "return backend.post('/easyflow/runtime/assignTaskById', {tokenId: params.tokenId, assignee: params.user})"
                },
                "onElementCreated": [
                    {
                        "js": "context.mode = 'candidates';"
                    },
                    {
                        "xjs": "return backend.post('/easyflow/runtime/candidates', {token_id: params.taskId}).then(r=>{mem.candidates=r; forceUpdate();})",
                        "js": "return backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'getTaskCandidates', params: {token_id: params.taskId}}).then(r=>{mem.candidates=r; forceUpdate();})"
                    }
                ],
                "refresh": {
                    "js": ";"
                }
            }
        },
        "modifyInitiatorDialog": {
            "title": "Token Initiator",
            "className": "vertical",
            "$": {
                "@params": {
                    "className": "horizontal",
                    "$": {
                        "initiator": {
                            "label": "Initiator",
                            "style": {
                                "width": "100%",
                                "paddingTop": "8px"
                            },
                            "control": "TextEdit",
                            "required": true
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "flexDirection": "row-reverse"
                    },
                    "$": {
                        "btnAppy": {
                            "label": "Save",
                            "control": "Button",
                            "style": {
                                "padding": "8px"
                            },
                            "controlProps": {
                                "color": "primary",
                                "variant": "contained"
                            },
                            "action": [
                                {
                                    "name": "onChangeInitiator",
                                    "params": {
                                        "tokenId$": "mem.tokenId",
                                        "oldInitiator$": "mem.oldInitiator",
                                        "initiator$": "mem.initiator"
                                    }
                                },
                                {
                                    "js": "actions.close();",
                                    "params": {
                                        "disableUpdate": true
                                    }
                                }
                            ]
                        },
                        "btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "style": {
                                "padding": "8px"
                            },
                            "controlProps": {
                                "variant": "outlined",
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close();",
                                "params": {
                                    "disableUpdate": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "editBlockDialog": {
            "title$": "`${params.node.name}`",
            "className": "vertical",
            "dialogStyle": {
                "width": "1000px",
                "height": "600px"
            },
            "style": {
                "overflow": "hidden",
                "flexGrow": 1
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "padding": "4px 0px 8px 0px",
                        "overflow": "auto",
                        "flexGrow": 1
                    },
                    "$": {
                        "@form": {
                            "style": {
                                "height": "100%"
                            },
                            "object$": "context.form?.object",
                            "form$": "context.form?.form",
                            "visible$": "context.form?.object && context.form?.form"
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "flexDirection": "row-reverse"
                    },
                    "$": {
                        ".btnAppy": {
                            "label": "Save",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "contained"
                            },
                            "action": [
                                {
                                    "js": "context.onSave(); actions.close();",
                                    "disableUpdate": true
                                }
                            ]
                        },
                        ".btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close();",
                                "params": {
                                    "disableUpdate": true
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onDialogCreated": [
                    {
                        "js": "js.initBlockDialog();"
                    }
                ]
            }
        },
        "editBlockTimerForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "timer": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getTimerFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Timer",
                                        "$": {
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit"
                                            },
                                            "description": {
                                                "label": "Description template",
                                                "control": "TextEdit"
                                            },
                                            "condition": {
                                                "label": "Execute condition",
                                                "control": "TextEdit"
                                            },
                                            "duration": {
                                                "label": "Execute duration expression",
                                                "control": "TextEdit"
                                            },
                                            "errorDuration": {
                                                "label": "Repeat on error duration expression",
                                                "control": "TextEdit"
                                            },
                                            "action": {
                                                "label": "Timer mode",
                                                "control": "SelectList",
                                                "controlProps": {
                                                    "list$": "js.getTimerActions()"
                                                }
                                            }
                                        }
                                    },
                                    "events": {
                                        "title": "Events",
                                        "$": {
                                            "@events": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "easyflow",
                                                "form": "editBlockEventsTab"
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": [
                    {
                        "js": "context.onSave = ()=>{js.saveTimerToNode()};"
                    }
                ]
            }
        },
        "editBlockTimer-headerForm": {
            "$": {
                "@form": {
                    "object": "easyflow",
                    "form": "editBlockTimerForm"
                }
            }
        },
        "editBlockScriptForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "script": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getScriptFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Properties",
                                        "$": {
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit"
                                            },
                                            "comment": {
                                                "label": "Description",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "multiline": true,
                                                    "minRows": 4
                                                }
                                            }
                                        }
                                    },
                                    "script": {
                                        "title": "Script",
                                        "$": {
                                            "scriptText": {
                                                "style": {
                                                    "height": "100%",
                                                    "overflow": "hidden"
                                                },
                                                "control": "AceEditor",
                                                "controlProps": {
                                                    "context$": "(()=>{context.ctxScript=context.ctxScript||{}; return context.ctxScript;})()",
                                                    "mode": "python"
                                                }
                                            }
                                        }
                                    },
                                    "log": {
                                        "title": "Log",
                                        "$": {
                                            "@log": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "easyflow",
                                                "form": "editBlockLogTab"
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{js.saveScriptToNode()}"
                }
            }
        },
        "editBlockEventsTab": {
            "style": {
                "height": "100%",
                "display": "flex",
                "flexDirection": "row"
            },
            "$": {
                "@list": {
                    "style": {
                        "display": "flex",
                        "flexDirection": "column"
                    },
                    "$": {
                        ".ap": {
                            "control": "ActionPanel",
                            "controlProps": {
                                "actions": [
                                    {
                                        "title": "Add",
                                        "icon": "add",
                                        "mini": true,
                                        "action": {
                                            "js": "let e = {id: uuidv4(), name: 'new event'}; mem.$events.push(e); mem.events.push(e.name); mem.$events.modified();"
                                        }
                                    },
                                    {
                                        "title": "Delete",
                                        "icon": "delete",
                                        "mini": true,
                                        "action": {
                                            "js": ""
                                        }
                                    }
                                ]
                            }
                        },
                        "|$events": {
                            "style": {
                                "minWidth": "200px",
                                "flexGrow": 1
                            },
                            "init$": "Object.keys(mem.events).map((e,i)=>({id:i, name: e}))",
                            "control": "ListTable",
                            "controlProps": {
                                "id": "id",
                                "compact": true,
                                "columns!": {
                                    "name": {
                                        "editable": true
                                    }
                                },
                                "style": {
                                    "height": "100%",
                                    "overflow": "hidden"
                                },
                                "listContext$": "(()=>{context.evCtx=context.evCtx||{}; return context.evCtx;})()",
                                "gridOptions": {
                                    "headerHeight": 0,
                                    "domLayout": "normal"
                                }
                            },
                            "events": {
                                "onSelectionChanged": {
                                    "name": "refresh"
                                }
                            }
                        }
                    }
                },
                "@text": {
                    "style": {
                        "flexGrow": 1
                    },
                    "visible$": "!!context.evCtx?.selectedRow",
                    "$": {
                        ".text": {
                            "style": {
                                "height": "100%",
                                "overflow": "hidden"
                            },
                            "control": "AceEditor",
                            "getter": "mem.events[context.evCtx.selectedRow.name]",
                            "setter": "mem.events[context.evCtx.selectedRow.name] = params.value",
                            "controlProps": {
                                "editorId": "events",
                                "mode": "python"
                            }
                        }
                    }
                }
            },
            "events": {
                "refresh": {
                    "js": ";"
                }
            }
        },
        "editBlockInternalTab": {
            "$": {
                "id": {
                    "label": "Identifier",
                    "control": "TextEdit",
                    "readOnly": true
                }
            }
        },
        "editBlockLogTab": {
            "$": {
                "journal": {
                    "className": "vertical",
                    "style": {
                        "height": "100%"
                    },
                    "$": {
                        "enter": {
                            "$": {
                                "text": {
                                    "label": "Enter template",
                                    "control": "TextEdit",
                                    "controlProps": {
                                        "multiline": true,
                                        "rows": 3,
                                        "inputProps": {
                                            "spellCheck": false
                                        }
                                    }
                                }
                            }
                        },
                        "leave": {
                            "$": {
                                "text": {
                                    "label": "Leave template",
                                    "control": "TextEdit",
                                    "controlProps": {
                                        "multiline": true,
                                        "rows": 3,
                                        "inputProps": {
                                            "spellCheck": false
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "editBlockSplitForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "split": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getSplitFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Properties",
                                        "$": {
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit"
                                            },
                                            "comment": {
                                                "label": "Description",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "multiline": true,
                                                    "minRows": 4
                                                }
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{js.saveSplitToNode()}"
                }
            }
        },
        "editBlockCondition-headerForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "condition": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getConditionFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Properties",
                                        "$": {
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit"
                                            },
                                            "expression": {
                                                "label": "Expression",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "multiline": true,
                                                    "rows": 3,
                                                    "inputProps": {
                                                        "spellCheck": false
                                                    }
                                                }
                                            },
                                            "comment": {
                                                "label": "Description",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "multiline": true,
                                                    "rows": 4
                                                }
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{js.saveConditionToNode()}"
                }
            }
        },
        "editBlockJumpForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "jump": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getJumpFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Properties",
                                        "$": {
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit"
                                            },
                                            "targetId": {
                                                "label": "Block to go to",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "inputProps": {
                                                        "spellCheck": false
                                                    }
                                                },
                                                "readOnly": true
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{js.saveJumpToNode()}"
                }
            }
        },
        "editBlockCallForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "call": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getCallFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Properties",
                                        "$": {
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit"
                                            },
                                            "comment": {
                                                "label": "Description",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "multiline": true,
                                                    "rows": 4
                                                }
                                            }
                                        }
                                    },
                                    "subprocess": {
                                        "title": "Subprocess",
                                        "$": {
                                            "call": {
                                                "label": "Subprocess expression",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "inputProps": {
                                                        "spellCheck": false
                                                    }
                                                }
                                            },
                                            "condition": {
                                                "label": "Execute condition",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "multiline": true,
                                                    "rows": 2,
                                                    "inputProps": {
                                                        "spellCheck": false
                                                    }
                                                }
                                            },
                                            "resultFrom": {
                                                "label": "Extract result from",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "inputProps": {
                                                        "spellCheck": false
                                                    }
                                                }
                                            },
                                            "resultTo": {
                                                "label": "Store result to",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "inputProps": {
                                                        "spellCheck": false
                                                    }
                                                }
                                            },
                                            "@parameters": {
                                                "object": "easyflow",
                                                "form": "callParametersForm"
                                            }
                                        }
                                    },
                                    "events": {
                                        "title": "Events",
                                        "$": {
                                            "@events": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "easyflow",
                                                "form": "editBlockEventsTab"
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{js.saveCallToNode()}"
                }
            }
        },
        "callParametersForm": {
            "$": {
                ".ap": {
                    "control": "ActionPanel",
                    "controlProps": {
                        "actions": [
                            {
                                "title": "Add",
                                "icon": "add",
                                "mini": true,
                                "action": [
                                    {
                                        "js": "mem.parameters.push({name: `param_${mem.parameters.length+1}`}); mem.parameters.modified();"
                                    },
                                    {
                                        "js": "setTimeout(()=>{task.events.fire('paramsGridApi', {call: 'startEditingCell', params: [{rowIndex: mem.parameters.length-1, colKey: 'name'}]})}, 200)"
                                    },
                                    {
                                        "name": "refreshList"
                                    }
                                ]
                            },
                            {
                                "title": "Delete",
                                "icon": "delete",
                                "mini": true,
                                "disabled$": "!context?.ctxParams?.selectedRow",
                                "action": [
                                    {
                                        "js": "mem.parameters.splice(mem.parameters.indexOf(context.ctxParams.selectedRow), 1); mem.parameters.modified(); context.ctxParams.selectedRow=null;"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "|parameters": {
                    "control": "ListTable",
                    "controlProps": {
                        "listContext$": "(()=>{context.ctxParams=context.ctxParams||{}; return context.ctxParams;})()"
                    },
                    "controlOpts": {
                        "compact": true,
                        "*id": "id",
                        "gridApi": "paramsGridApi",
                        "columns!": {
                            "name": {
                                "label": "Name",
                                "width": 160,
                                "editable": true
                            },
                            "expression": {
                                "label": "Expression",
                                "flex": 1,
                                "editable": true,
                                "cellEditor": "agLargeTextCellEditor",
                                "cellEditorParams": {
                                    "maxLength": 4000,
                                    "rows": 5
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onSelectionChanged": {
                    "js": ";"
                },
                "refreshList": {
                    "name": "onRefreshParameters"
                }
            }
        },
        "editWorkflowPropertiesDialog": {
            "title": "Workflow properties",
            "className": "vertical",
            "style": {
                "overflow": "hidden"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "padding": "4px 0px 8px 0px",
                        "width": "1000px",
                        "height": "500px",
                        "overflow": "auto"
                    },
                    "$": {
                        "@form": {
                            "style": {
                                "height": "100%"
                            },
                            "object": "easyflow",
                            "form": "editWorkflowPropertiesForm"
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "flexDirection": "row-reverse"
                    },
                    "$": {
                        ".btnAppy": {
                            "label": "Save",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "contained"
                            },
                            "action": [
                                {
                                    "js": "js.saveWorkflowToNode();",
                                    "disableUpdate": true
                                },
                                {
                                    "name": "onSave"
                                },
                                {
                                    "js": "actions.close();",
                                    "disableUpdate": true
                                }
                            ]
                        },
                        ".btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close();",
                                "params": {
                                    "disableUpdate": true
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onDialogCreated": [
                    {
                        "js": ";"
                    }
                ]
            }
        },
        "editWorkflowPropertiesForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "workflow": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getWorkflowFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{context.ct=context.ct||{}; return context.ct;})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "workflow": {
                                        "title": "Workflow",
                                        "$": {
                                            "id": {
                                                "label": "Code",
                                                "control": "TextEdit"
                                            },
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit"
                                            },
                                            "comment": {
                                                "label": "Comment",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "multiline": true,
                                                    "rows": 3
                                                }
                                            }
                                        }
                                    },
                                    "context": {
                                        "title": "Workflow context",
                                        "$": {
                                            "context": {
                                                "className": "vertical",
                                                "$": {
                                                    "code": {
                                                        "label": "Context",
                                                        "control": "ObjectReference",
                                                        "controlProps": {
                                                            "object": "easyflow_context",
                                                            "reference": "contexts",
                                                            "valueField": "code",
                                                            "displayAttr": "name",
                                                            "textReadOnly": true,
                                                            "dependentAttrs": {
                                                                "name": "name"
                                                            }
                                                        },
                                                        "events": {
                                                            "onChange": [
                                                                {
                                                                    "js": "if(!params.attr){if(params?.row?.optionsForm){context.optionsForm=params.row.optionsForm;}else{context.optionsForm={};}}else{throw 'Abort';}"
                                                                },
                                                                {
                                                                    "name": "refreshOptions"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    "@optionsForm": {
                                                        "object$": "context.optionsForm?.object",
                                                        "form$": "context.optionsForm?.form",
                                                        "visible$": "context.optionsForm?.object && context.optionsForm?.form"
                                                    }
                                                },
                                                "events": {
                                                    "refreshOptions": {
                                                        "js": ";"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "events": {
                                        "title": "Events",
                                        "$": {
                                            "@events": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "easyflow",
                                                "form": "editBlockEventsTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "editBlockTaskForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "task": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getTaskFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Properties",
                                        "$": {
                                            "@tab": {
                                                "object": "easyflow",
                                                "form": "editBlockTaskPropertiesTab"
                                            }
                                        }
                                    },
                                    "task": {
                                        "title": "Task",
                                        "$": {
                                            "@tab": {
                                                "object": "easyflow",
                                                "form": "editBlockTaskTaskTab"
                                            }
                                        }
                                    },
                                    "deadline": {
                                        "title": "Deadline",
                                        "$": {
                                            "@tab": {
                                                "object": "easyflow",
                                                "form": "editBlockTaskDeadlineTab"
                                            }
                                        }
                                    },
                                    "events": {
                                        "title": "Events",
                                        "$": {
                                            "@events": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "easyflow",
                                                "form": "editBlockEventsTab"
                                            }
                                        }
                                    },
                                    "log": {
                                        "title": "Log",
                                        "$": {
                                            "@log": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "easyflow",
                                                "form": "editBlockLogTab"
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{js.saveTaskToNode()}"
                }
            }
        },
        "editBlockTaskPropertiesTab": {
            "className": "vertical",
            "$": {
                "name": {
                    "label": "Name",
                    "control": "TextEdit",
                    "controlProps": {
                        "inputProps": {
                            "spellCheck": false
                        }
                    }
                },
                "description": {
                    "label": "Description template",
                    "control": "TextEdit",
                    "controlProps": {
                        "inputProps": {
                            "spellCheck": false
                        }
                    }
                },
                "autoStart": {
                    "label": "Auto start task",
                    "control": "Checkbox"
                },
                "comment": {
                    "label": "Description",
                    "control": "TextEdit",
                    "controlProps": {
                        "multiline": true,
                        "minRows": 4
                    }
                }
            }
        },
        "editBlockTaskTaskTab": {
            "className": "vertical",
            "$": {
                "clientTask": {
                    "style": {
                        "height": "100%"
                    },
                    "className": "vertical",
                    "$": {
                        "path": {
                            "label": "Task path",
                            "control": "TextEdit",
                            "controlProps": {
                                "inputProps": {
                                    "spellCheck": false
                                }
                            }
                        },
                        "taskName": {
                            "label": "Name template",
                            "control": "TextEdit",
                            "controlProps": {
                                "inputProps": {
                                    "spellCheck": false
                                }
                            }
                        },
                        "@parameters": {
                            "style": {
                                "flexGrow": 1
                            },
                            "object": "easyflow",
                            "form": "callParametersForm"
                        }
                    },
                    "events": {
                        "onRefreshParameters": {
                            "js": "mem.parameters=[...mem.parameters];"
                        }
                    }
                }
            }
        },
        "editBlockTaskDeadlineTab": {
            "className": "vertical",
            "$": {
                "deadline": {
                    "className": "vertical",
                    "$": {
                        "@calculate": {
                            "title": "Deadline calculation",
                            "className": "vertical",
                            "$": {
                                "calculate": {
                                    "className": "vertical",
                                    "$": {
                                        "method": {
                                            "label": "Calc method",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "SelectList",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "value": "duration",
                                                        "name": "Duration"
                                                    },
                                                    {
                                                        "value": "date",
                                                        "name": "Date"
                                                    }
                                                ]
                                            },
                                            "events": {
                                                "onChange": {
                                                    "name": "onCalculateMethodChanged"
                                                }
                                            }
                                        },
                                        "@duration": {
                                            "className": "horizontal",
                                            "$": {
                                                "countFrom": {
                                                    "label": "Count from",
                                                    "style": {
                                                        "width": "280px"
                                                    },
                                                    "control": "SelectList",
                                                    "controlProps": {
                                                        "list": [
                                                            {
                                                                "value": "task_created",
                                                                "name": "Task created"
                                                            },
                                                            {
                                                                "value": "process_created",
                                                                "name": "Process created"
                                                            },
                                                            {
                                                                "value": "root_process_created",
                                                                "name": "Root process created"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "unit": {
                                                    "label": "Calculate unit",
                                                    "style": {
                                                        "width": "280px"
                                                    },
                                                    "control": "SelectList",
                                                    "controlProps": {
                                                        "list": [
                                                            {
                                                                "value": "clendar_day",
                                                                "name": "Calendar day"
                                                            },
                                                            {
                                                                "value": "work_day",
                                                                "name": "Work day"
                                                            },
                                                            {
                                                                "value": "hour",
                                                                "name": "Hour"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "value": {
                                                    "label": "Count",
                                                    "style": {
                                                        "width": "280px"
                                                    },
                                                    "control": "PositiveIntegerField"
                                                }
                                            },
                                            "visible$": "mem.method=='duration'"
                                        },
                                        "date": {
                                            "label": "Date",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "DateEdit",
                                            "visible$": "mem.method=='date'"
                                        }
                                    }
                                }
                            }
                        },
                        "@reminder": {
                            "title": "Deadline reminder",
                            "className": "vertical",
                            "$": {
                                "reminder": {
                                    "$": {
                                        "count": {
                                            "label": "Count",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "PositiveIntegerField"
                                        }
                                    }
                                }
                            },
                            "params": {
                                "method": "mem.calculate?.method",
                                "unit": "mem.calculate?.unit"
                            }
                        },
                        "@expired": {
                            "title": "Expired reminder",
                            "className": "vertical",
                            "$": {
                                "expired": {
                                    "$": {
                                        "count": {
                                            "label": "Count",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "PositiveIntegerField"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "events": {
                        "onCalculateMethodChanged": {
                            "js": "console.log('onCalculateMethodChanged')"
                        }
                    }
                }
            }
        },
        "editBlockParallelForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "parallel": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getParallelFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Properties",
                                        "$": {
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit"
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{js.saveParallelToNode()}"
                }
            }
        },
        "editBlockFlow-headerForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "flow": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getFlowFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Properties",
                                        "$": {
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit"
                                            },
                                            "expression": {
                                                "label": "Expression",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "multiline": true,
                                                    "rows": 3,
                                                    "inputProps": {
                                                        "spellCheck": false
                                                    }
                                                }
                                            },
                                            "comment": {
                                                "label": "Description",
                                                "control": "TextEdit",
                                                "controlProps": {
                                                    "multiline": true,
                                                    "rows": 4
                                                }
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{js.saveFlowToNode()}"
                }
            }
        },
        "editBlockTerminateForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "terminate": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getTerminateFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Properties",
                                        "$": {
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit"
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{js.saveTerminateToNode()}"
                }
            }
        },
        "editBlockEndForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "terminate": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getTerminateFromNode()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "props": {
                                        "title": "Properties",
                                        "$": {
                                            "name": {
                                                "label": "Name",
                                                "control": "TextEdit",
                                                "readOnly": true
                                            }
                                        }
                                    },
                                    "int": {
                                        "title": "Internal",
                                        "$": {
                                            "@internal": {
                                                "object": "easyflow",
                                                "form": "editBlockInternalTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{}"
                }
            }
        },
        "editLaneDialog": {
            "title$": "`${_('Lane')}: ${params.lane.name}`",
            "className": "vertical",
            "style": {
                "overflow": "hidden"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "padding": "4px 0px 8px 0px",
                        "width": "1000px",
                        "height": "500px",
                        "overflow": "auto"
                    },
                    "$": {
                        "@form": {
                            "style": {
                                "height": "100%"
                            },
                            "object$": "context.form?.object",
                            "form$": "context.form?.form",
                            "visible$": "context.form?.object && context.form?.form"
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "flexDirection": "row-reverse"
                    },
                    "$": {
                        ".btnAppy": {
                            "label": "Save",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "contained"
                            },
                            "action": [
                                {
                                    "js": "context.onSave(); actions.close();",
                                    "disableUpdate": true
                                }
                            ]
                        },
                        ".btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close();",
                                "params": {
                                    "disableUpdate": true
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onDialogCreated": {
                    "js": "js.initLaneDialog()"
                }
            }
        },
        "editLaneForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "lane": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "js.getLane()",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "performers": {
                                        "title": "Performers",
                                        "$": {
                                            "@performers": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "easyflow",
                                                "form": "editLanePerformersTab"
                                            }
                                        }
                                    },
                                    "notify": {
                                        "title": "Notify",
                                        "$": {
                                            "@notify": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "easyflow",
                                                "form": "editLaneNotifyTab"
                                            }
                                        }
                                    },
                                    "tasks": {
                                        "title": "Tasks",
                                        "$": {
                                            "@tasks": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "easyflow",
                                                "form": "editLaneTasksTab"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onElementCreated": {
                    "js": "context.onSave = ()=>{js.saveLane()}"
                }
            }
        },
        "editLanePerformersTab": {
            "className": "vertical",
            "$": {
                "name": {
                    "label": "Lane",
                    "control": "TextEdit"
                },
                "useInitiator": {
                    "label": "Process initiator",
                    "control": "Checkbox"
                },
                "autoPerformer": {
                    "label": "Performer expression",
                    "control": "TextEdit"
                },
                "autoGroup": {
                    "label": "Group expression",
                    "control": "TextEdit"
                },
                "@performers": {
                    "className": "vertical",
                    "$": {
                        ".ap": {
                            "control": "ActionPanel",
                            "controlProps": {
                                "actions": [
                                    {
                                        "title": "Add",
                                        "icon": "add",
                                        "mini": true,
                                        "action": [
                                            {
                                                "js": "frontend.dialog({object: 'user', form: 'selectUserDialog', params: {}})"
                                            }
                                        ]
                                    },
                                    {
                                        "title": "Delete",
                                        "icon": "delete",
                                        "mini": true,
                                        "disabled$": "!context?.ctxCandidates?.selectedRow",
                                        "action": [
                                            {
                                                "js": "mem.candidates.splice(mem.candidates.indexOf(context.ctxCandidates.selectedRow), 1); mem.candidates.modified(); context.ctxCandidates.selectedRow=null;"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        "|candidates": {
                            "control": "ListTable",
                            "controlProps": {
                                "listContext$": "(()=>{context.ctxCandidates=context.ctxCandidates||{}; return context.ctxCandidates;})()"
                            },
                            "controlOpts": {
                                "compact": true,
                                "id": "id",
                                "gridApi": "candidatesGridApi",
                                "columns!": {
                                    "username": {
                                        "label": "User",
                                        "width": 200,
                                        "editable": true
                                    },
                                    "groupname": {
                                        "label": "Group",
                                        "width": 200,
                                        "editable": true
                                    },
                                    "expression": {
                                        "label": "Expression",
                                        "flex": 1,
                                        "editable": true,
                                        "cellEditor": "agLargeTextCellEditor",
                                        "cellEditorParams": {
                                            "maxLength": 4000,
                                            "rows": 5
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "events": {
                        "onUserSelected": {
                            "js": "mem.candidates.push({id: uuidv4(), username: params.user.code}); mem.candidates.modified();"
                        },
                        "onSelectionChanged": {
                            "js": ";"
                        }
                    }
                }
            }
        },
        "editLaneNotifyTab": {
            "className": "vertical",
            "$": {
                "@notify": {
                    "$$": "mem.notify.reduce((a, n, i)=>{a['@notify_'+i]={object: 'easyflow', form: 'editLaneNotifyForm', params: {notify$: 'mem.notify['+i+']'}}; return a}, {})"
                },
                ".btnAdd": {
                    "label": "Add",
                    "control": "Button",
                    "action": {
                        "name": "addNotify"
                    }
                }
            },
            "events": {
                "addNotify": [
                    {
                        "js": "mem.notify.push(js.createDefaultNotify())"
                    }
                ],
                "deleteNotify": [
                    {
                        "js": "mem.notify.splice(mem.notify.indexOf(params.notify), 1);"
                    }
                ]
            }
        },
        "editLaneNotifyForm": {
            "className": "horizontal",
            "$": {
                ".btnDelete": {
                    "label": "Delete",
                    "control": "Button",
                    "action": {
                        "name": "deleteNotify",
                        "params": {
                            "notify$": "params.notify"
                        }
                    }
                },
                "@notification": {
                    "init$": "params.notify",
                    "className": "vertical",
                    "style": {
                        "flexGrow": 1
                    },
                    "$": {
                        "active": {
                            "label": "Is active",
                            "control": "Checkbox"
                        },
                        "name": {
                            "label": "Name",
                            "control": "TextEdit",
                            "onChange": {
                                "name": "modified"
                            }
                        },
                        "event": {
                            "label": "Event",
                            "control": "SelectList",
                            "controlProps": {
                                "list": [
                                    {
                                        "value": "onTaskCreated",
                                        "name": "Task created"
                                    },
                                    {
                                        "value": "onRemindDeadline",
                                        "name": "Remind deadline"
                                    },
                                    {
                                        "value": "onExpireDeadline",
                                        "name": "Expire deadline"
                                    }
                                ]
                            }
                        },
                        "condition": {
                            "label": "Notify condition",
                            "control": "TextEdit"
                        },
                        "candidates": {
                            "label": "Notify candidates",
                            "control": "Checkbox"
                        },
                        "channel": {
                            "label": "Notify channel",
                            "control": "SelectList",
                            "controlProps": {
                                "list": [
                                    {
                                        "value": "EMAIL",
                                        "name": "E-MAIL"
                                    },
                                    {
                                        "value": "SMS",
                                        "name": "SMS"
                                    }
                                ]
                            },
                            "actions": {
                                "onChange": {
                                    "js": ";"
                                }
                            }
                        },
                        "addressExpression": {
                            "label": "Address expression",
                            "control": "TextEdit"
                        },
                        "subject": {
                            "label": "Subject template",
                            "control": "TextEdit",
                            "readOnly$": "mem.channel=='SMS'"
                        },
                        "message": {
                            "label": "Message template",
                            "control": "TextEdit",
                            "controlProps": {
                                "multiline": true,
                                "minRows": 5
                            }
                        },
                        "writeJournal": {
                            "label": "Write journal",
                            "control": "Checkbox"
                        }
                    }
                }
            }
        },
        "editLaneTasksTab": {
            "className": "vertical",
            "$": {
                ".ap": {
                    "control": "ActionPanel",
                    "controlProps": {
                        "actions": [
                            {
                                "title": "Delete",
                                "icon": "delete",
                                "mini": true,
                                "disabled$": "!context?.ctxTasks?.selectedRow",
                                "action": [
                                    {
                                        "js": "mem.tasks.splice(mem.tasks.indexOf(context.ctxTasks.selectedRow), 1); mem.tasks.modified(); context.ctxTasks.selectedRow=null;"
                                    }
                                ],
                                "confirm": {
                                    "message$": "`Unlink task ${context?.ctxTasks?.selectedRow?.name}?`"
                                }
                            }
                        ]
                    }
                },
                "|tasks": {
                    "control": "ListTable",
                    "controlProps": {
                        "listContext$": "(()=>{context.ctxTasks=context.ctxTasks||{}; return context.ctxTasks;})()"
                    },
                    "controlOpts": {
                        "compact": true,
                        "id": "id",
                        "columns!": {
                            "name": {
                                "label": "Name",
                                "flex": 1
                            }
                        }
                    }
                }
            },
            "events": {
                "onSelectionChanged": {
                    "js": ";"
                }
            }
        },
        "editDiagramXMLTask": {
            "comment": "Workflow XML",
            "className": "task task-panel",
            "style": {
                "height": "100%",
                "overflow": "hidden",
                "display": "flex",
                "flexDirection": "column"
            },
            "$": {
                "@panel": {
                    "className": "horizontal",
                    "style": {
                        "padding": "8px 8px 8px 8px"
                    },
                    "$": {
                        ".btnSave": {
                            "label": "Save",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'saveDiagram', params: {id: mem.diagram.id, modified: mem.diagram.modified, data: mem.xml}}).then((r)=>{mem.diagram.modified=r.modified; context.modified=false; forceUpdate();})"
                                }
                            ],
                            "readOnly$": "!context.modified"
                        }
                    }
                },
                "@form": {
                    "style": {
                        "flex": 1,
                        "overflow": "hidden"
                    },
                    "$": {
                        "@xml": {
                            "style": {
                                "height": "100%"
                            },
                            "$": {
                                "xml": {
                                    "style": {
                                        "height": "100%",
                                        "overflow": "hidden"
                                    },
                                    "control": "AceEditor",
                                    "controlProps": {
                                        "mode": "xml",
                                        "context$": "(()=>{context.aceCtx=context.aceCtx||{}; return context.aceCtx;})()"
                                    },
                                    "events": {
                                        "onChange": {
                                            "name": "onModified"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onTaskCreated": [
                    {
                        "js": "return backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'getDiagram', params: {id: task.params.id}}).then((r)=>{mem.diagram = r;})"
                    },
                    {
                        "js": "mem.xml = mem.diagram.data"
                    }
                ],
                "onModified": {
                    "js": "if (!context.modified){context.modified=true; forceUpdate();}",
                    "disableUpdate": false
                }
            }
        },
        "editLanesXMLTask": {
            "comment": "Workflow lanes XML",
            "className": "task task-panel",
            "style": {
                "height": "100%",
                "overflow": "hidden",
                "display": "flex",
                "flexDirection": "column"
            },
            "$": {
                "@panel": {
                    "className": "horizontal",
                    "style": {
                        "padding": "8px 8px 8px 8px"
                    },
                    "$": {
                        ".btnSave": {
                            "label": "Save",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'saveDiagramAuthority', params: {authorityId: mem.authority.id, deploymentId: mem.authority.deploymentId, modified: mem.authority.modified, data: mem.xml}}).then((r)=>{mem.authority.modified=r.modified; context.modified=false; mem.authority.id=r; forceUpdate();})"
                                }
                            ],
                            "readOnly$": "!context.modified"
                        }
                    }
                },
                "@form": {
                    "style": {
                        "flex": 1,
                        "overflow": "hidden"
                    },
                    "$": {
                        "@xml": {
                            "style": {
                                "height": "100%"
                            },
                            "$": {
                                "xml": {
                                    "style": {
                                        "height": "100%",
                                        "overflow": "hidden"
                                    },
                                    "control": "AceEditor",
                                    "controlProps": {
                                        "mode": "xml",
                                        "context$": "(()=>{context.aceCtx=context.aceCtx||{}; return context.aceCtx;})()"
                                    },
                                    "actions": {
                                        "onChange": {
                                            "name": "onModified"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onTaskCreated": [
                    {
                        "js": "return backend.post('/aoa/execObjectMethod', {object: 'easyflow', method: 'getDiagramAuthority', params: {id: task.params.id}}).then((r)=>{mem.authority = r[0];})"
                    },
                    {
                        "js": "mem.xml = mem.authority.data"
                    }
                ],
                "onModified": {
                    "js": "if (!context.modified){context.modified=true; forceUpdate();}",
                    "disableUpdate": false
                }
            }
        },
        "processDialogTask": {
            "title": "Process dialog",
            "className": "task task-panel vertical",
            "style": {
                "padding": "8px"
            },
            "$": {
                ".text": {
                    "style": {
                        "fontSize": "1rem",
                        "color": "rgba(0, 0, 0, 0.54)",
                        "flexGrow": 1
                    },
                    "control": "Html",
                    "getter": "`<pre>${task.params.message}</pre>`"
                },
                ".buttons": {
                    "className": "horizontal",
                    "$$": "task.params.actions.reduce((a, v)=>{a['.btn'+v.value]={label: v.name, control: 'Button', action: {name: 'onButtonAction', params: {action: v.value, name: v.name}}}; return a;}, {})",
                    "events": {
                        "onButtonAction": [
                            {
                                "js": "return frontend.easyflow.completeTaskById(task.params.taskId, {[task?.params?.actionVar||'action']: params.action});",
                                "disableUpdate": true
                            },
                            {
                                "js": "actions.closeTask();",
                                "disableUpdate": true
                            }
                        ]
                    }
                }
            },
            "events": {
                "onElementCreated": [
                    {
                        "js": ";"
                    }
                ]
            }
        },
        "processErrorTask": {
            "title": "Process error",
            "className": "task-panel vertical",
            "style": {
                "padding": "8px"
            },
            "$": {
                "message": {
                    "style": {
                        "flexGrow": 1,
                        "display": "flex",
                        "flexDirection": "column",
                        "overflow": "hidden"
                    },
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "flexGrow": 1,
                                "display": "flex",
                                "flexDirection": "column",
                                "overflow": "hidden"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.tabs){context.tabs={};} return context.tabs})()",
                                "pageStyle": {
                                    "flexGrow": 1,
                                    "padding": "8px",
                                    "overflow": "auto"
                                },
                                "titleStyle": {
                                    "textTransform": "none"
                                },
                                "pageClassName": "vertical",
                                "pages": {
                                    "message": {
                                        "title": "Error",
                                        "$": {
                                            ".text": {
                                                "style": {
                                                    "fontSize": "1rem",
                                                    "color": "rgba(0, 0, 0, 0.54)",
                                                    "flexGrow": 1
                                                },
                                                "control": "Html",
                                                "getter": "`<pre>${mem.message}</pre>`"
                                            }
                                        }
                                    },
                                    "description": {
                                        "title": "Description",
                                        "$": {
                                            ".text": {
                                                "style": {
                                                    "fontSize": "1rem",
                                                    "color": "rgba(0, 0, 0, 0.54)",
                                                    "flexGrow": 1
                                                },
                                                "control": "Html",
                                                "getter": "`<pre>${mem.description||''}</pre>`"
                                            }
                                        }
                                    },
                                    "trace": {
                                        "title": "Details",
                                        "$": {
                                            ".text": {
                                                "style": {
                                                    "fontSize": "1rem",
                                                    "color": "rgba(0, 0, 0, 0.54)",
                                                    "flexGrow": 1
                                                },
                                                "control": "Html",
                                                "getter": "`<pre>${mem.trace||''}</pre>`"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                ".buttons": {
                    "className": "horizontal",
                    "$$": "task.params?.actions?.reduce?.((a, v)=>{a['.btn'+v.value]={label: v.label, control: 'Button', action: {name: 'onButtonAction', params: {action: v.value, label: v.label}}}; return a;}, {})",
                    "events": {
                        "onButtonAction": [
                            {
                                "js": "return frontend.easyflow.completeTaskById(task.params.taskId, {[task?.params?.actionVar||'action']: params.action});",
                                "disableUpdate": true
                            },
                            {
                                "js": "actions.closeTask();",
                                "disableUpdate": true
                            }
                        ]
                    }
                }
            },
            "events": {
                "onTaskCreated": [
                    {
                        "js": "if(task.params.message instanceof Object){mem.message=task.params.message}else{mem.message={message: task.params.message}}"
                    }
                ]
            }
        }
    },
    "methods": {
        "changeProcessUser": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "#\n# Изменение инициатора процесса и исполнителя по задачам\n#\nfrom beflex.easyflow.models import Token, TokenAut\nfrom django.conf import settings\nfrom django.db import transaction\n\np = parameters['token']\noldUser = parameters['oldUser']\nnewUser = parameters['newUser']\n\nwith transaction.atomic(using=settings.APPS_DB['easyflow']):\n    # Меняем инициатора процесса, так как новые задачи могут продолжить\n    # назначаться на старого пользователя\n    if p.initiator == oldUser:\n        p.initiator = newUser\n        p.save()\n    \n    # Активные задачи по процессу\n    for t in p.tokens.filter(state__in=['active', 'suspended']):\n        needSave = False\n        \n        # Инициатор задачи\n        if t.initiator == oldUser:\n            t.initiator = newUser\n            needSave = True\n        \n        # Исполнитель задачи\n        if t.performer == oldUser:\n            t.performer = newUser\n            needSave = True\n        \n        if needSave:\n            t.save()\n        \n        # Пользовательские задачи\n        if t.flow.typ == 'task':\n            # Заменим кандидата\n            if t.candidates.filter(username = oldUser).count() > 0:\n                if t.candidates.filter(username=newUser).count() == 0:\n                    ta = TokenAut(\n                        token = t,\n                        username = newUser\n                    )\n                    ta.save()"
            }
        },
        "getList": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from beflex.easyflow.models import Deployment\nfrom beflex.aoa.services import applyFilterModel2, applySortModel\n\nquery = Deployment.objects\n\nif parameters.get('id'):\n    query = query.filter(id=parameters['id'])\nelse:\n    filterModel2 = parameters['request'].get('filterModel2') if parameters.get('request') else None\n        \n    if filterModel2:\n        query = applyFilterModel2(query, filterModel2)\n    else:\n        query = query.all()\n    \n    if len(parameters.get('request', {}).get('sortModel', []))>0:\n        query = applySortModel(query, parameters['request']['sortModel'])\n    else: \n        query = query.order_by('code')\n    \n    if parameters.get('request', {}).get('startRow') is not None:\n        query = query[parameters['request']['startRow']:parameters['request']['endRow']]\n        \ndata = []\nfor ef in query:\n    d = {\n        'id': ef.id.__str__(),\n        'code': ef.code,\n        'name': ef.name,\n        'modified': ef.modified\n    }\n    \n    data.append(d)\n\n\n"
            }
        },
        "delete": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from beflex.easyflow.models import Deployment\n\nw = Deployment.objects.get(id=parameters['id'])\nw.authority.delete()\nw.delete()\n\n#raise UserException(json.dumps(parameters, indent=4))"
            }
        },
        "downloadAttribute": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from beflex.easyflow.models import TokenVar\nimport base64\nfrom django.http import HttpResponse\nimport urllib\n\n\n\n#raise UserException(json.dumps(parameters, indent=4))\n\ntv = TokenVar.objects.get(\n    token_id=parameters['tokenId'], \n    name=parameters['attribute'],\n)\n\nattributeData = base64.b64decode(tv.value)\n\n#\n# Формирование ответа сервиса\n#\ndata = HttpResponse(\n    attributeData,\n    content_type=parameters['content-type']\n)\ndata[\"Content-Disposition\"] = 'Content-Disposition: inline; filename=\"{filename}\"'.format(\n    filename = parameters['filename'],\n)\ndata[\"Content-Length\"] = len(attributeData)\n\n\n"
            }
        },
        "getActiveTimerList": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from beflex.aoa.services import applyFilterModel2\nfrom beflex.easyflow.models import Token\n\nquery = Token.objects.filter(type='timer', state='active')\n\nfilterModel2 = parameters['request'].get('filterModel2') if parameters.get('request') else None\n    \nif filterModel2:\n    if 'errorsOnly' in filterModel2:\n        if filterModel2['errorsOnly'] == True:\n            query = query.filter(task_state='error')\n        del filterModel2['errorsOnly']\n    query = applyFilterModel2(query, filterModel2)\nelse:\n    query = query.all()\n\n\nif parameters.get('request', {}).get('startRow') is not None:\n    query = query[parameters['request']['startRow']:parameters['request']['endRow']]\n\n\ndata = []\nfor t in query:\n    data.append({\n        'id': t.id.__str__(),\n        'state': t.state,\n        'task_state': t.task_state,\n        'created': t.created,\n        'initiator': t.initiator,\n        'started': t.started,\n        'scheduled': t.scheduled,\n        'wait_time': t.scheduled - t.started if t.started and t.scheduled else None,\n        'description': t.description,\n        'workflow_id': t.process.flow_id, \n    })"
            }
        },
        "getTokenInfo": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from beflex.easyflow.models import Token\n\nt = Token.objects.get(id=parameters.get('id'))\n\nobjectKey = t.objectKey or t.processToken.objectKey or t.getTopProcess().objectKey\nif not objectKey:\n    objectKey = t.process.vars_dict.get('objectKey')\n\nif t.process_id is not None:\n    # Обычный токен, не сам процесс\n    children = [{'id': c.id.__str__(),'deployment_code': c.deployment.code,'deployment_name' : c.deployment.name} for c in t.children.all()]\nelse:\n    # Для процесса не зачитываем детали\n    children = None\n\ndata = {\n    'id': t.id.__str__(),\n    'parent_id': t.parent_id.__str__(),\n    'deployment_id': t.deployment_id.__str__(),\n    'process_id': t.processToken.id.__str__(),\n    'flow_id': t.flow_id.__str__(),\n    'type': t.type,\n    'deployment_code': t.deployment.code if t.deployment else '',\n    'flow_name': t.flow.name if t.flow else '',\n    'state': t.state,\n    'task_state': t.task_state,\n    'created': t.created,\n    'scheduled': t.scheduled,\n    'initiator': t.initiator,\n    'performer': t.performer,\n    'started': t.started,\n    'completed': t.completed,\n    'description': t.description,\n\n    \n    'processVars': t.processToken.vars_dict,\n    'tokenVars': t.vars_dict,\n    \n    'objectKey': objectKey,\n    'candidates': [{'user': x.username, 'group': x.groupname} for x in t.candidates.all()],\n    'children': children\n}\n"
            }
        },
        "saveTokenVar": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from beflex.easyflow.models import TokenVar\n\ntv = TokenVar.objects.get(token_id=parameters['tokenId'], name=parameters['name'])\n\ntv.value = json.dumps(parameters['value'])\ntv.save()\n"
            }
        },
        "getObjectJournal": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from beflex.easyflow.services import RuntimeService as rs\n\nos = rs.getStateByObjectKey(parameters['objectKey'])\noj = rs.getJournalByObjectKey(parameters['objectKey'])\n\ndata = []\n\nfor r in os:\n    d = {\n        'token_id': r.id.__str__(),\n        'type': r.type,\n        'state': r.state,\n        'task_state': r.task_state,\n        'initiator': r.initiator,\n        'performer': r.performer,\n        'candidate': '',\n        'created': r.created,\n        'started': r.started,\n        'scheduled': r.scheduled,\n        'description': r.description,\n        'isIdle': r.isIdle,\n    }\n    if d['performer'] is None:\n        candidates = r.candidates.all()\n        d['candidate'] = ', '.join([c.username or c.groupname for c in candidates if c.username is not None or c.groupname is not None])\n    \n    if d['task_state'] == 'error':\n        d['token_error'] = r.vars_dict.get('error')\n    \n    data.append(d)\n    \nfrom django.db.models import prefetch_related_objects\nprefetch_related_objects(oj, 'token')\n\nfor r in oj:\n    d = {\n        'token_id': r.token_id.__str__(),\n        'type': r.token.flow.typ if r.token.flow else None,\n        'state': None,\n        'task_state': None,\n        'initiator': None,\n        'performer': r.performer,\n        'candidate': '',\n        'created': r.created,\n        'started': None,\n        'scheduled': None,\n        'description': r.description,\n    }\n    data.append(d)"
            }
        },
        "saveCandidates": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from beflex.easyflow.models import Token, TokenAut\r\nfrom django.conf import settings\r\nfrom django.db import transaction\r\n\r\n#print('saveCandidates  start')\r\n\r\nif not parameters.get('tokenId'):\r\n    raise Exception('Не задан токен')\r\n\r\n# Замена кандидатов\r\nwith transaction.atomic(using=settings.APPS_DB['easyflow']):\r\n    candidates = TokenAut.objects.filter(token_id = parameters.get('tokenId'))\r\n    candidates.delete()\r\n    \r\n    for candidate in parameters.get('candidates'):\r\n        c = TokenAut()\r\n        c.token_id = parameters.get('tokenId')\r\n        c.username = candidate.get('user')\r\n        c.groupname = candidate.get('group')\r\n        c.save()"
            }
        },
        "stopToken": {
            "sql": {},
            "script": {
                "py": "from beflex.easyflow.services import RuntimeService as rs\nrs.stopToken(parameters.get('tokenId'))\n"
            }
        },
        "getUserTasks": {
            "sql": {},
            "script": {
                "py": "from beflex.easyflow.models import Token\nfrom beflex.easyflow.services import RuntimeService\nfrom django.utils import timezone\nfrom django.db.models import Q\n\n#raise UserException(json.dumps(parameters))\n\nfrom beflex.auth import getUser\n\ncurrent_user = getUser()\n\nfrom beflex.easyflow.auth import Authentication\nAuthentication.setAuthenticatedUser(current_user)\n\n#\n# Получение списка задач\n#\ndef getTasks(params):\n    if current_user:\n        q = Token.objects.distinct().filter(state=Token.STATE_ACTIVE)\n        if params.get('id'):\n            q = q.filter(id=params['id'])\n        else:\n            if getattr(current_user, 'su'):\n                actual_user = getattr(current_user, 'su')\n            else:\n                actual_user = current_user\n                \n            q = q.filter(Q(performer__isnull=True) | Q(performer=actual_user.code), candidates__username=actual_user.code)\n                \n\n            # Задачи назначенные на группу\n            qg = None            \n            if len(actual_user.groups)>0:\n                qg = Token.objects.filter(state=Token.STATE_ACTIVE, performer__isnull=True, candidates__groupname__in=actual_user.groups)\n                \n            if 'deployment' in params:\n                q = q.filter(deployment__code=params['deployment'])\n                \n            order_by = []\n            request = params.get('request')\n            if request:\n                filterModel = request.get('filterModel')\n                if filterModel:\n\n                    kwargs = {}\n                    for fname, fmodel in filterModel.items():\n                        lookupField = fname\n                        if lookupField=='name':\n                            lookupField = 'description'\n                        if fmodel['filterType'] == 'set' and fmodel['values']:\n                            kwargs[lookupField + '__in'] = fmodel['values']\n                        elif fmodel.get('type') == 'contains':\n                            kwargs[lookupField + '__contains'] = fmodel['filter']\n                    q = q.filter(**kwargs)\n                    \n                    if qg:\n                        qg = qg.filter(**kwargs)\n                        \n                filterModel2 = request.get('filterModel2')\n                if filterModel2:\n                    from beflex.aoa.services import applyFilterModel2\n                    q = applyFilterModel2(q, filterModel2)\n                    if qg:\n                        qg = applyFilterModel2(qg, filterModel2)\n                    \n                for col in request.get('sortModel', []):\n                    field = '-' if col['sort'] == 'desc' else ''\n                    col_id = col['colId']\n                    if col_id == 'name':\n                        col_id = 'description'\n                    field += col_id\n                    order_by.append(field)                \n\n            if qg:\n                q = q.union(qg, all=False)\n\n\n\n            if order_by:\n                q = q.order_by(*order_by)\n            else:\n                q = q.order_by('-created')\n                \n        \n        if params.get('request', {}).get('startRow') is not None:\n            q = q[params['request']['startRow']:params['request']['endRow']]\n            \n        #print ('sql: ', q.query)\n    else:\n        raise Exception('No authenticated user')\n    return q\n    \n\ntokens = getTasks(parameters)\n\ntasks = []\nfor t in tokens:\n    \n    \n    taskName = '???'\n    if t.description:\n        taskName = t.description\n    elif t.flow:\n        taskName = t.flow.name\n\n        \n    r = {\n        'id'        : t.id,\n        'name'      : taskName,\n        'created'   : timezone.localtime(t.created),\n        'state'     : t.state,\n        'priority'  : t.priority,\n        'initiator' : t.initiator,\n        'flow': t.flow_id,                    \n        'performer' : t.performer\n    }\n    if t.task_state:\n        r['task_state'] = t.task_state\n    if t.started:\n        r['started'] = t.started\n    if t.completed:\n        r['completed'] = t.completed\n            \n    r['performer2'] = ''\n    if t.performer == current_user.code:\n        r['performer2'] = 'assigned'\n    else:\n        candidates = t.candidates.all()\n        if len(candidates) == 1 and candidates[0].username == current_user.code:\n            r['performer2'] = 'assigned'\n        elif (t.performer is None and\n                (len(candidates) > 1 or len(candidates) == 1 and candidates[0].groupname is not None)):\n            r['performer2'] = 'unassigned'\n\n    tasks.append(r)\n\ndata = tasks\n"
            }
        },
        "changeProcessInitiator": {
            "sql": {
                "sql": ""
            },
            "script": {
                "py": "#\r\n# Изменение инициатора процесса\r\n#\r\nfrom beflex.easyflow.models import Token, TokenAut\r\nfrom django.conf import settings\r\nfrom django.db import transaction\r\n\r\nt = Token.objects.get(id=parameters.get('tokenId'))\r\n\r\noldInitiator = parameters['oldInitiator']\r\ninitiator = parameters['initiator']\r\n\r\nif oldInitiator != initiator:\r\n    with transaction.atomic(using=settings.APPS_DB['easyflow']):\r\n    # Меняем инициатора процесса\r\n        if t.initiator == oldInitiator:\r\n            t.initiator = initiator\r\n            t.save()\r\n"
            }
        },
        "deleteProcessesByWorkflow": {
            "sql": {},
            "script": {
                "py": "\"\"\"\n  Delete all processes by workflow\n  Parameters:\n    code - workflow code\n    raiseOnError - stop on errro\n\"\"\"\nfrom beflex.easyflow.models import Token\nfrom beflex.easyflow.services import RuntimeService as rs\nfrom django.db import transaction\nfrom django.conf import settings\nimport logging\n\nlogger = logging.getLogger('easyflow')\n\nif not parameters.get('code'):\n    raise Exception('Invalid argument: code')\n\nlogger.debug('start delete processes for %s', parameters['code'])\n\nprocesses = Token.objects.filter(deployment__code=parameters['code'], process_id=None)\nfor p in processes:\n    try:\n        with transaction.atomic(using=settings.APPS_DB['easyflow']):\n            rs.deleteProcessById(p.id)\n            logger.debug('process %s deleted', p.id)\n    except Exception as e:\n        logger.error('Error delete token %s\\n%s', p.id, e)\n        if parameters.get('raiseOnError'):\n            raise\n\nlogger.debug('processes for %s deleted', parameters['code'])"
            }
        },
        "setTokenVars": {
            "sql": {},
            "script": {
                "py": "token_id = parameters['tokenId']\nvars = parameters['vars']\n\nfrom beflex.easyflow.models import Token\nt = Token.objects.get(id=token_id)\nt.save_vars(vars)"
            }
        },
        "getDiagram": {
            "sql": {},
            "script": {
                "py": "from beflex.easyflow.services import DeploymentService as ds\n\ndiagram = ds.getDeploymentById(parameters['id'])\n\ndata = {\n    'id': diagram.id,\n    'name': diagram.flow.name,\n    'data': diagram.data,\n    'modified': diagram.modified\n}\n"
            }
        },
        "getDiagramAuthority": {
            "sql": {},
            "script": {
                "py": "from beflex.easyflow.services import DeploymentService as ds\n\nauthorities = ds.getAuthorityByDeploymentId(parameters['id'])\n\ndata = [\n    {\n        'id': a.id,\n        'deploymentId': a.deployment.id,\n        'data': a.data, \n        'name': a.deployment.flow.name\n    } for a in authorities\n]\n"
            }
        },
        "saveDiagram": {
            "sql": {},
            "script": {
                "py": "from beflex.easyflow.services import DeploymentService as ds\nfrom datetime import datetime\n\nd = {\n    'id': parameters.get('id'),\n    'isfolder': parameters.get('isfolder'),\n    'data': parameters.get('data'),\n    'modified': parameters.get('modified'),\n}\n\n            \nif d.get('id'):\n    workflow = ds.getDeploymentById(d['id'])\n    if d['modified']:\n        modified = datetime.fromisoformat(d['modified'])\n        if workflow.modified != modified:\n            raise UserException({\n                'message': 'Workflow is modified by another user.'\n            })\n    if d.get('isfolder'):\n        \"\"\"\n        deployment.code = d.get('code')\n        deployment.name = d.get('name')\n        deployment.parent_id = d.get('parent_id')\n        \"\"\"\n        raise UserException('TODO: Create folders')\n    else:\n        workflow.data = d['data']\n    workflow.save()\nelse:\n    if d.get('isfolder'):\n        raise UserException('TODO: Create folders')\n        workflow = ds.createDeploymentFolder(d)\n    else:\n        workflow = ds.createDeploymentFromXml(d['data'])\n    \ndata = {\n    'id': workflow.id.__str__(),\n    'modified': workflow.modified\n}            \n"
            }
        },
        "getProcessList": {
            "sql": {},
            "script": {
                "py": "from beflex.easyflow.models import Token\r\nimport uuid\r\n\r\ndef isUUID(s):\r\n    try:\r\n        u = uuid.UUID(s)\r\n        return True\r\n    except:\r\n        return False\r\n\r\ndef makeResponse(rows):\r\n    response = []\r\n    for r in rows:\r\n        row = {\r\n            'id'            : r.id,\r\n            'name'          : r.description if r.description else r.flow.name if r.flow else r.flow_id,\r\n            'process_id'    : r.process_id,\r\n            'deployment_id' : r.deployment_id.__str__(),\r\n            'parent_id'     : r.parent_id if r.process_id is None else None,\r\n            'flow_id'       : r.flow.id if r.flow else r.flow_id,\r\n            'flowType'      : r.flow.typ if r.flow else None,\r\n            'initiator'     : r.initiator,\r\n            'performer'     : r.performer,\r\n            'created'       : r.created,\r\n            'completed'     : r.completed,\r\n            'state'         : r.state,\r\n            'taskState'     : r.task_state,\r\n            'objectKey'     : r.objectKey\r\n        }\r\n        response.append(row)\r\n        \r\n    return response\r\n        \r\nquery = Token.objects\r\n\r\nif parameters.get('id'):\r\n    query = query.filter(id=parameters['id'])\r\nelif parameters.get('request', {}).get('filterModel2', {}).get('token_id'):\r\n    if not isUUID(parameters['request']['filterModel2']['token_id']):\r\n        raise UserException('Идентификатор не является UUID')\r\n        \r\n    query = query.filter(id=parameters['request']['filterModel2']['token_id'])\r\n    query = query.union(Token.objects.filter(process_id=parameters['request']['filterModel2']['token_id']))\r\n    query = query.order_by('-process_id', '-created')\r\nelse:\r\n    raise UserException('Укажите параметры запроса')\r\n    \r\nif parameters.get('request', {}).get('startRow') is not None:\r\n    query = query[parameters['request']['startRow']:parameters['request']['endRow']]\r\n    \r\n\r\ndata = makeResponse(query)"
            }
        },
        "saveDiagramAuthority": {
            "sql": {},
            "script": {
                "py": "\ndef saveAuthority(authority_id, deployment_id, xml):\n    from beflex.easyflow.models import Authority\n    if authority_id:\n        authority = Authority.objects.get(id=authority_id)\n        authority.data = xml\n    else:\n        authority = Authority(\n            deployment_id = deployment_id,\n            data=xml\n        )\n        \n    authority.save()\n    \n    return authority\n\na = saveAuthority(parameters.get('authorityId'), parameters['deploymentId'], parameters['data'])\n\ndata = a.id.__str__()"
            }
        },
        "getTaskCandidates": {
            "script": {
                "py": "from beflex.easyflow.services import RuntimeService as rs\n\ncandidates = rs.getTaskCandidates(parameters['token_id'])\n\n\n#users = [c.username for c in candidates if c.username]\n#groups = [c.groupname for c in candidates if c.groupname]\n\ndata = [{\n    'code': x.username\n} for x in candidates if x.username is not None]\n"
            }
        },
        "startSubProcess": {
            "sql": {},
            "script": {
                "py": "from beflex.easyflow.services import RuntimeService as rs\nfrom beflex.easyflow.models import Token\nfrom django.db import transaction\nfrom django.conf import settings\n\nif parameters['tokenId'] is None:\n    raise UserException('Argument error: tokenId')\n\nif parameters['code'] is None:\n    raise UserException('Argument error: code')\n\nwith transaction.atomic(using=settings.APPS_DB['easyflow']):\n    parent_token = Token.objects.get(id=parameters['tokenId'])\n    params = parameters.get('params', {})\n    if 'objectKey' not in params and parent_token.process.objectKey is not None:\n        params['objectKey'] = parent_token.process.objectKey\n    process_token = rs.createProcessByCode(parameters['code'], params)\n    process_token.parent_id = parameters['tokenId']\n    process_token.enter()\n\ndata = {\n    'tokenId': process_token.id.__str__()\n}\n"
            }
        },
        "checkParallelFlowsFinished": {
            "sql": {},
            "script": {
                "py": "# Check if parallel tokens completed\n\ndef _(s):\n    return s\n\nown_flow_token = parameters['token']\nroot_token = own_flow_token.parent\n\nparallel_tokens = root_token.children.exclude(id=own_flow_token.id)\n\nif parallel_tokens.count()>0:\n    tasks = ['  - ' + (x.description or x.flow.name) for x in parallel_tokens]\n    raise UserError((_('Parallel tasks must be completed first') + '\\n') + '\\n'.join(tasks))"
            }
        },
        "recalcTaskDeadline": {
            "script": {
                "py": "from beflex.easyflow.models import Token\n\nif parameters.get('id') is None:\n    raise UserException('Invalid argument: id')\n    \ntoken = Token.objects.get(id=parameters['id'])\n\ntoken.flow.behavior.evalDeadline(token)\ntoken.save()"
            }
        }
    },
    "lists": {
        "default": {
            "id": "id",
            "columns": {
                "code": {
                    "title": "Code",
                    "width": 340,
                    "sortable": true
                },
                "name": {
                    "title": "Name",
                    "flex": 1,
                    "sortable": true
                },
                "modified": {
                    "title": "Modified",
                    "width": 130,
                    "format": "datetime"
                }
            },
            "actions": [
                {
                    "title": "Refresh",
                    "icon": "refresh",
                    "mini": true,
                    "command": {
                        "type": "standard",
                        "call": "refresh"
                    }
                },
                {
                    "title": "New",
                    "icon": "add",
                    "mini": true,
                    "command": {
                        "type": "task",
                        "call": "/easyflow/diagram-graphics-edit",
                        "title": "New workflow",
                        "data": {
                            "deployment": {
                                "data": "<workflow id=\"new_workflow\"></workflow>"
                            },
                            "loaded": true
                        },
                        "params": {
                            "deployment": "<workflow id=\"new_workflow\"></workflow>"
                        }
                    }
                },
                {
                    "title": "Create copy",
                    "icon": "clone",
                    "mini": true,
                    "disabled$": "!$listRow",
                    "command": {
                        "type": "js",
                        "js": "frontend.dialog({object: 'easyflow', form: 'createDiagramCopyDialog', mem: {}, params: {id: $listRow.id, code: $listRow.code, name: $listRow.name}, context: {}})"
                    }
                },
                {
                    "title": "View",
                    "icon": "view",
                    "mini": true,
                    "command": {
                        "type": "task",
                        "call": "/easyflow/diagram-graphics-edit",
                        "title$": "`${$listRow.code} ${$listRow.name}`",
                        "params": {
                            "deploymentId$": "$listRow.id"
                        },
                        "disableUpdate": true
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Delete",
                    "icon": "delete",
                    "mini": "true",
                    "command": {
                        "type": "standard",
                        "call": "delete"
                    },
                    "confirm": {
                        "message$": "`Delete workflow ${$listRow.code}, ${$listRow.name} ?`",
                        "yes": "Да",
                        "no": "Нет"
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Service",
                    "split": true,
                    "actions": [
                        {
                            "title": "View diagram XML",
                            "command": {
                                "type": "task",
                                "call": "/aoa/ObjectTask",
                                "title$": "$listRow.name",
                                "params": {
                                    "object": "easyflow",
                                    "form": "editDiagramXMLTask",
                                    "id$": "$listRow.id"
                                }
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "View lanes XML",
                            "command": {
                                "type": "task",
                                "call": "/aoa/ObjectTask",
                                "title$": "$listRow.name",
                                "params": {
                                    "object": "easyflow",
                                    "form": "editLanesXMLTask",
                                    "id$": "$listRow.id"
                                }
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "Execute",
                            "command": {
                                "type": "workflow",
                                "call$": "$listRow.code",
                                "params": {}
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "Delete all processes",
                            "command": {
                                "js": "backend.post('/easyflow/runtime/deleteProcessesByDeploymentId', {deploymentId: $listRow.id})"
                            },
                            "confirm": {
                                "message": "Delete all processes",
                                "yes": "yes",
                                "no": "no"
                            },
                            "disabled$": "!$listRow"
                        }
                    ]
                },
                {
                    "title": "Tools",
                    "split": true,
                    "actions": [
                        {
                            "title": "Packages",
                            "command": {
                                "type": "js",
                                "js": "frontend.dialog({object: 'package', form: 'objectPackageDialog', mem: {}, params: {objectId: $listRow.id, model: 'easyflow.Deployment'}, context: {}})"
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "History",
                            "command": {
                                "type": "task",
                                "title$": "`История объекта: ${$listRow.code}`",
                                "call": "/aoa/ObjectTask",
                                "params": {
                                    "object": "aos.ModifiedObjects",
                                    "form": "historyTask",
                                    "model": "easyflow.Deployment",
                                    "objectId$": "$listRow.id"
                                }
                            },
                            "disabled$": "!$listRow"
                        }
                    ]
                }
            ],
            "filter": {
                "title": "Filter",
                "form": {
                    "style": {
                        "width": "360px",
                        "overflow": "hidden",
                        "paddingRight": "0px"
                    },
                    "title": "Filter",
                    "className": "panel vertical",
                    "$": {
                        "@fields": {
                            "className": "vertical",
                            "style": {
                                "paddingTop": "8px",
                                "paddingRight": "8px",
                                "overflowY": "auto",
                                "flexGrow": 1
                            },
                            "$": {
                                "code": {
                                    "label": "Code",
                                    "control": "TextEdit"
                                },
                                "name": {
                                    "label": "Name",
                                    "control": "TextEdit"
                                },
                                "data": {
                                    "label": "Contains",
                                    "control": "TextEdit"
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnClear": {
                                    "control": "Button",
                                    "label": "Clear",
                                    "controlProps": {
                                        "variant": "outlined",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "clean"
                                    }
                                },
                                "btnApply": {
                                    "control": "Button",
                                    "label": "Apply",
                                    "controlProps": {
                                        "variant": "contained",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "js": "actions.apply(mem);",
                                        "params": {
                                            "disableUpdate": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "clean": {
                            "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                        }
                    }
                }
            }
        },
        "userTasks": {
            "getList": "getUserTasks",
            "id": "id",
            "columns": {
                "name": {
                    "title": "Name",
                    "flex": 1,
                    "sortable": true,
                    "cellStyle": {
                        "whiteSpace": "normal !important",
                        "lineHeight": 1.2,
                        "display": "flex",
                        "alignItems": "center"
                    },
                    "getter": "data?.name?.substring(0, 200)"
                },
                "created": {
                    "title": "Created",
                    "sortable": true,
                    "width": 130,
                    "format": "datetime"
                },
                "performer2": {
                    "title": "Performer",
                    "width": 130,
                    "decode": {
                        "assigned": {
                            "value": "Assigned"
                        },
                        "unassigned": {
                            "value": "Not Assigned"
                        }
                    }
                },
                "task_state": {
                    "title": "State",
                    "width": 140,
                    "control": "chip",
                    "decode": {
                        "created": {
                            "value": "Created",
                            "color": "#F2994A"
                        },
                        "inwork": {
                            "value": "In Work",
                            "color": "#00AA44"
                        }
                    }
                }
            },
            "actions": [
                {
                    "title": "Refresh",
                    "icon": "refresh",
                    "mini": true,
                    "command": {
                        "type": "standard",
                        "call": "refresh"
                    }
                },
                {
                    "title": "Execute",
                    "command": {
                        "type": "js",
                        "js": "frontend.easyflow.executeTaskById($listRow.id);",
                        "disableUpdate": true
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Take",
                    "command": {
                        "type": "js",
                        "js": "frontend.easyflow.claimTaskById($listRow.id);"
                    },
                    "disabled$": "!$listRow || $listRow?.task_state != 'created'"
                },
                {
                    "title": "Return",
                    "command": {
                        "type": "js",
                        "js": "frontend.easyflow.untakeTaskById($listRow.id);"
                    },
                    "disabled$": "!$listRow || $listRow?.task_state != 'inwork'"
                },
                {
                    "title": "Reassign",
                    "command": {
                        "type": "js",
                        "js": "frontend.dialog({object: 'easyflow', form: 'selectTaskUserDialog', params: {taskId: $listRow.id}});",
                        "disableUpdate": true
                    },
                    "disabled$": "!$listRow"
                }
            ],
            "filter": {
                "title": "Filter",
                "form": {
                    "style": {
                        "width": "380px",
                        "overflow": "hidden",
                        "paddingRight": "0px"
                    },
                    "className": "panel vertical",
                    "$": {
                        "@fields": {
                            "className": "vertical",
                            "style": {
                                "paddingTop": "8px",
                                "paddingRight": "8px",
                                "overflowY": "auto",
                                "flexGrow": 1
                            },
                            "$": {
                                "description": {
                                    "label": "Name",
                                    "control": "TextEdit"
                                },
                                "task_state__exact": {
                                    "label": "State",
                                    "control": "SelectList",
                                    "controlProps": {
                                        "list": [
                                            {
                                                "value": "created",
                                                "name": "Created"
                                            },
                                            {
                                                "value": "inwork",
                                                "name": "In Work"
                                            }
                                        ]
                                    }
                                },
                                "@period": {
                                    "$": {
                                        "@chips": {
                                            "$": {
                                                "today": {
                                                    "label": "Today",
                                                    "action": {
                                                        "name": "setToday"
                                                    },
                                                    "control": "Chip",
                                                    "controlProps": {
                                                        "style": {
                                                            "height": "24px"
                                                        }
                                                    }
                                                },
                                                "prevmonth": {
                                                    "label": "Previouse Month",
                                                    "action": {
                                                        "name": "setPrevMonth"
                                                    },
                                                    "control": "Chip",
                                                    "controlProps": {
                                                        "style": {
                                                            "height": "24px"
                                                        }
                                                    }
                                                },
                                                "lastmonth": {
                                                    "label": "Current Month",
                                                    "action": {
                                                        "name": "setLastMonth"
                                                    },
                                                    "control": "Chip",
                                                    "controlProps": {
                                                        "style": {
                                                            "height": "24px"
                                                        }
                                                    }
                                                }
                                            },
                                            "className": "horizontal"
                                        },
                                        "@dates": {
                                            "$": {
                                                "created__date__gte": {
                                                    "label": "From",
                                                    "style": {
                                                        "flexGrow": 1
                                                    },
                                                    "control": "DateEdit"
                                                },
                                                "created__date__lte": {
                                                    "label": "To",
                                                    "style": {
                                                        "flexGrow": 1
                                                    },
                                                    "control": "DateEdit"
                                                }
                                            },
                                            "className": "horizontal"
                                        }
                                    },
                                    "actions": {
                                        "setToday": {
                                            "jsScript": "let dt = new Date(); let df = new Date(); mem.created__date__gte = df.toISOString().substring(0,10); mem.created__date__lte = dt.toISOString().substring(0,10);"
                                        },
                                        "setPrevMonth": {
                                            "jsScript": "let dt = new Date(); let df = new Date(); df.setMonth(df.getMonth()-1); df.setDate(1); dt.setDate(0); mem.created__date__gte = df.toISOString().substring(0,10); mem.created__date__lte = dt.toISOString().substring(0,10);"
                                        },
                                        "setLastMonth": {
                                            "jsScript": "let dt = new Date(); let df = new Date(); df.setDate(1); mem.created__date__gte = df.toISOString().substring(0,10); mem.created__date__lte = dt.toISOString().substring(0,10);"
                                        }
                                    },
                                    "className": "vertical"
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnClear": {
                                    "control": "Button",
                                    "label": "Clear",
                                    "controlProps": {
                                        "variant": "outlined",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "clean"
                                    }
                                },
                                "btnApply": {
                                    "control": "Button",
                                    "label": "Apply",
                                    "controlProps": {
                                        "variant": "contained",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "js": "actions.apply(mem);",
                                        "params": {
                                            "disableUpdate": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "clean": {
                            "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                        }
                    }
                }
            },
            "events": {
                "onTaskCreated": {
                    "js": "setTaskTitle(_('My tasks'))"
                },
                "onRowDoubleClicked": {
                    "js": "frontend.easyflow.executeTaskById($listRow.id);"
                }
            }
        },
        "processManager": {
            "getList": "getProcessList",
            "id": "id",
            "columns": {
                "name": {
                    "title": "Process",
                    "flex": 1,
                    "getter": "data?.flowType=='workflow'?(data.flow_id+' '+data.name):data?.name",
                    "cellStyle$": "data?.taskState=='error' && {color: 'rgb(235, 87, 87)'}",
                    "icon": {
                        "name$": "data?.flowType",
                        "style": {
                            "display": "flex",
                            "marginRight": "4px",
                            "fill": "currentColor"
                        }
                    }
                },
                "initiator": {
                    "title": "Initiator",
                    "width": 150
                },
                "created": {
                    "title": "Created",
                    "format": "datetime",
                    "width": 150
                },
                "performer": {
                    "title": "Performer",
                    "width": 150
                },
                "completed": {
                    "title": "Completed",
                    "format": "datetime",
                    "width": 150
                }
            },
            "getRowStyle": "data?.state=='finished'?{color: 'rgba(0,0,0,0.54)'}:undefined",
            "actions": [
                {
                    "title": "Refresh",
                    "icon": "refresh",
                    "mini": true,
                    "command": {
                        "type": "standard",
                        "call": "refresh"
                    }
                },
                {
                    "title": "Open",
                    "icon": "view",
                    "mini": true,
                    "command": {
                        "js": "frontend.dialog({object: 'easyflow', form: 'tokenInfoDialog', params: {id: $listRow.id}})",
                        "disableUpdate": true
                    }
                },
                {
                    "title": "Action",
                    "actions": [
                        {
                            "title": "Open process",
                            "disabled$": "!$listRow?.process_id",
                            "command": {
                                "js": "tm.newTask({path: '/aoa/ObjectListTask', title: `Процесс ${$listRow.process_id}`, params: {object: 'easyflow', list: 'processManager', token_id: $listRow.process_id}})"
                            }
                        },
                        {
                            "title": "Stop process",
                            "command": {
                                "js": "backend.post('/easyflow/process-manage/stopTokenById', {id: $listRow.process_id||$listRow.id}).then(()=>{forceRefreshList();})",
                                "disableUpdate": true
                            },
                            "confirm": {
                                "message$": "`Stop process?`",
                                "yes": "Да",
                                "no": "Нет"
                            }
                        },
                        {
                            "title": "Delete process",
                            "disabled$": "$listRow?.flowType!='workflow'",
                            "command": {
                                "js": "backend.post('/easyflow/process-manage/deleteTokenById', {id: $listRow.id}).then(()=>{forceRefreshList();})",
                                "disableUpdate": true
                            },
                            "confirm": {
                                "message$": "`Delete process ${$listRow.name}?`",
                                "yes": "Да",
                                "no": "Нет"
                            }
                        },
                        {
                            "title": "Open parent",
                            "disabled$": "!$listRow?.parent_id",
                            "command": {
                                "js": "tm.newTask({path: '/aoa/ObjectListTask', title: `Процесс ${$listRow.parent_id}`, params: {object: 'easyflow', list: 'processManager', token_id: $listRow.parent_id}})"
                            }
                        },
                        {
                            "title": "Execute now",
                            "disabled$": "$listRow?.flowType!='timer'",
                            "command": {
                                "js": "backend.post('/easyflow/process-manage/setScheduleNow', {id: $listRow.id})"
                            }
                        }
                    ],
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Open diagram",
                    "command": {
                        "type": "task",
                        "call": "/easyflow/diagram-graphics-edit",
                        "title": "Process diagram",
                        "params": {
                            "deploymentId$": "$listRow.deployment_id"
                        }
                    },
                    "disabled$": "!$listRow"
                }
            ],
            "filter": {
                "title": "Filter",
                "form": {
                    "style": {
                        "width": "380px",
                        "overflow": "hidden",
                        "paddingRight": "0px"
                    },
                    "className": "panel vertical",
                    "$": {
                        "@fields": {
                            "className": "vertical",
                            "style": {
                                "paddingTop": "8px",
                                "paddingRight": "8px",
                                "overflowY": "auto",
                                "flexGrow": 1
                            },
                            "$": {
                                "token_id": {
                                    "label": "Token Id",
                                    "control": "TextEdit"
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnClear": {
                                    "control": "Button",
                                    "label": "Clear",
                                    "controlProps": {
                                        "variant": "outlined",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "clean"
                                    }
                                },
                                "btnApply": {
                                    "control": "Button",
                                    "label": "Apply",
                                    "controlProps": {
                                        "variant": "contained",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "js": "actions.apply(mem);",
                                        "params": {
                                            "disableUpdate": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "clean": {
                            "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                        }
                    }
                }
            },
            "events": {
                "onTaskCreated": [
                    {
                        "js": "(()=>{if (task.params.token_id){setFilterData({token_id: task.params.token_id})}else{task.data.$isFilterOpen = true;}})()"
                    }
                ],
                "onRowDoubleClicked": {}
            },
            "icons": {
                "task": {
                    "svg": {
                        "viewBox": "0 0 24 24",
                        "style": {
                            "width": "1em",
                            "height": "1em",
                            "fontSize": "1.5rem"
                        },
                        "$": [
                            {
                                "path": {
                                    "d": "M12 5.9c1.16 0 2.1.94 2.1 2.1s-.94 2.1-2.1 2.1S9.9 9.16 9.9 8s.94-2.1 2.1-2.1m0 9c2.97 0 6.1 1.46 6.1 2.1v1.1H5.9V17c0-.64 3.13-2.1 6.1-2.1M12 4C9.79 4 8 5.79 8 8s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 9c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4z"
                                }
                            }
                        ]
                    }
                },
                "condition": {
                    "svg": {
                        "style": {
                            "width": "24px",
                            "height": "24px"
                        },
                        "$": [
                            {
                                "path": {
                                    "d": "M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z"
                                }
                            }
                        ]
                    }
                },
                "split": {
                    "svg": {
                        "style": {
                            "width": "24px",
                            "height": "24px",
                            "stroke": "currentcolor",
                            "strokeWidth": "2"
                        },
                        "$": [
                            {
                                "path": {
                                    "d": "M12 2v10M12 12l-8 10M12 12l8 10"
                                }
                            }
                        ]
                    }
                },
                "parallel": {
                    "svg": {
                        "style": {
                            "width": "24px",
                            "height": "24px",
                            "stroke": "currentcolor",
                            "strokeWidth": "2"
                        },
                        "$": [
                            {
                                "path": {
                                    "d": "M7 5V19M17 5V19"
                                }
                            }
                        ]
                    }
                },
                "script": {
                    "svg": {
                        "style": {
                            "width": "24px",
                            "height": "24px"
                        },
                        "$": [
                            {
                                "path": {
                                    "d": "M19.43 12.98c.04-.32.07-.64.07-.98 0-.34-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.09-.16-.26-.25-.44-.25-.06 0-.12.01-.17.03l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.06-.02-.12-.03-.18-.03-.17 0-.34.09-.43.25l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98 0 .33.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.09.16.26.25.44.25.06 0 .12-.01.17-.03l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.06.02.12.03.18.03.17 0 .34-.09.43-.25l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zm-1.98-1.71c.04.31.05.52.05.73 0 .21-.02.43-.05.73l-.14 1.13.89.7 1.08.84-.7 1.21-1.27-.51-1.04-.42-.9.68c-.43.32-.84.56-1.25.73l-1.06.43-.16 1.13-.2 1.35h-1.4l-.19-1.35-.16-1.13-1.06-.43c-.43-.18-.83-.41-1.23-.71l-.91-.7-1.06.43-1.27.51-.7-1.21 1.08-.84.89-.7-.14-1.13c-.03-.31-.05-.54-.05-.74s.02-.43.05-.73l.14-1.13-.89-.7-1.08-.84.7-1.21 1.27.51 1.04.42.9-.68c.43-.32.84-.56 1.25-.73l1.06-.43.16-1.13.2-1.35h1.39l.19 1.35.16 1.13 1.06.43c.43.18.83.41 1.23.71l.91.7 1.06-.43 1.27-.51.7 1.21-1.07.85-.89.7.14 1.13zM12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"
                                }
                            }
                        ]
                    }
                },
                "timer": {
                    "svg": {
                        "style": {
                            "width": "24px",
                            "height": "24px"
                        },
                        "$": [
                            {
                                "path": {
                                    "d": "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z"
                                }
                            }
                        ]
                    }
                },
                "call": {
                    "svg": {
                        "style": {
                            "width": "24px",
                            "height": "24px"
                        },
                        "$": [
                            {
                                "path": {
                                    "d": "M19 5H5c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 12H5V7h14v10z"
                                }
                            }
                        ]
                    }
                },
                "jump": {
                    "svg": {
                        "style": {
                            "width": "24px",
                            "height": "24px"
                        },
                        "$": [
                            {
                                "path": {
                                    "d": "M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5zm-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-2zm-3-4h8v2H8z"
                                }
                            }
                        ]
                    }
                }
            }
        }
    },
    "references": {
        "workflows": {
            "form": {
                "style": {
                    "width": "1000px",
                    "height": "600px"
                },
                "columns": [
                    {
                        "title": "Code",
                        "field": "code",
                        "width": 320
                    },
                    {
                        "title": "Name",
                        "field": "name",
                        "flex": 1
                    }
                ],
                "primaryKey": "code",
                "filter": {
                    "form": {
                        "className": "vertical",
                        "style": {
                            "padding": "8px 4px 4px 4px"
                        },
                        "$": {
                            "@fields": {
                                "className": "vertical",
                                "$": {
                                    "code": {
                                        "label": "Code",
                                        "control": "TextEdit"
                                    },
                                    "name": {
                                        "label": "Name",
                                        "control": "TextEdit"
                                    }
                                }
                            },
                            "@buttons": {
                                "className": "horizontal",
                                "$": {
                                    ".btnClear": {
                                        "control": "Button",
                                        "label": "Clean",
                                        "controlProps": {
                                            "variant": "outlined",
                                            "color": "primary"
                                        },
                                        "action": {
                                            "js": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                                        }
                                    },
                                    ".btnApply": {
                                        "control": "Button",
                                        "label": "Apply",
                                        "controlProps": {
                                            "variant": "contained",
                                            "color": "primary"
                                        },
                                        "action": {
                                            "js": "actions.apply(mem);",
                                            "params": {
                                                "disableUpdate": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "filterFirst": true,
                "fastFilter": true
            },
            "method": {
                "script": {
                    "py": "data = AO.easyflow.getList(parameters)"
                }
            }
        }
    },
    "js": {
        "diagramGetTimer": "return {\n    id:props.node.id,\n    name: props.node.name,\n    description: props.node.description || '',\n    condition: props.node.condition || '',\n    duration: props.node.duration || '00:00:00',\n    errorDuration: props.node.errorDuration || '00:01:00',\n    action: props.node.action || props.node.type==='timer' && 'continue' || 'fork',\n    scriptBefore: props.node.scriptBefore,\n    events: {...(props.node.events || {} )},\n}\n",
        "getScriptFromNode": "console.log('getScriptFromNode', arguments['0']);\n\nreturn {\n    id: params.node.id,\n    name: params.node.name,\n    scriptText: params.node.scriptText,\n    journal: {\n        enter: {...params.node.journal.enter},\n        leave: {...params.node.journal.leave},\n    },\n    comment: params.node.comment,\n}",
        "saveScriptToNode": "params.node.name = mem.script.name;\nparams.node.scriptText = mem.script.scriptText;\nparams.node.journal = mem.script.journal;\nparams.node.comment = mem.script.comment;\nparams.node.modified();\n",
        "getTimerFromNode": "console.log('js.getTimerFromNode', params.node);\nconst timer = {\n    id: params.node.id,\n    name: params.node.name,\n    description: params.node.description || '',\n    condition: params.node.condition || '',\n    duration: params.node.duration || '00:00:00',\n    errorDuration: params.node.errorDuration || '00:01:00',\n    action: params.node.action || params.node.type==='timer' && 'continue' || 'fork',\n    events: {onCreated: null, onExecute: null, ...(params.node.events || {} )},\n}\n\nconsole.log(timer);\nreturn timer;",
        "saveTimerToNode": "params.node.name = mem.timer.name;\nparams.node.description = mem.timer.description;\nparams.node.condition = mem.timer.condition;\nparams.node.duration = mem.timer.duration;\nparams.node.errorDuration = mem.timer.errorDuration;\nparams.node.action = mem.timer.action;\nparams.node.events = {...mem.timer.events};\nparams.node.modified();",
        "getSplitFromNode": "return {\n    id: params.node.id || '',\n    name: params.node.name,\n    comment: params.node.comment\n}",
        "saveSplitToNode": "params.node.name = mem.split.name;\nparams.node.comment = mem.split.comment;\n\nparams.node.modified();\n",
        "getConditionFromNode": "return {\n    id: params.node.id || '',\n    name: params.node.name,\n    expression: params.node.expression,\n    comment: params.node.comment,\n}",
        "saveConditionToNode": "params.node.name = mem.condition.name;\nparams.node.expression = mem.condition.expression;\nparams.node.comment = mem.condition.comment;\n\nparams.node.modified();\n",
        "getJumpFromNode": "return {\n    name: params.node.name,\n    id: params.node.id,\n    targetId: params.node.targetId || '',\n}",
        "saveJumpToNode": "params.node.name = mem.jump.name;\nparams.node.targetId = mem.jump.targetId;\nparams.node.modified();\n",
        "getCallFromNode": "return {\n    id: params.node.id || '',\n    name: params.node.name,\n    call: params.node.call || '',\n    condition: params.node.condition || '',\n    resultFrom: params.node.resultFrom || '',\n    resultTo: params.node.resultTo || '',\n    parameters: params.node.parameters.map((item)=>({...item})),\n    comment: params.node.comment,\n    events: {beforeExecute: null, afterExecute: null, ...params.node.events},\n}",
        "saveCallToNode": "params.node.name = mem.call.name;\nparams.node.call = mem.call.call;\nparams.node.condition = mem.call.condition;\nparams.node.resultFrom = mem.call.resultFrom;\nparams.node.resultTo = mem.call.resultTo;\nparams.node.parameters = mem.call.parameters;\nparams.node.comment = mem.call.comment;\nparams.node.events = {...mem.call.events};\nparams.node.modified();\n",
        "getWorkflowFromNode": "if (params.node.context?.code){\n    backend.post('/aoa/execObjectMethod', {\n        object: 'easyflow_context',\n        method: 'getContext',\n        params: {\n            'code': params.node.context.code\n        }\n    }, {useCache: true})\n        .then((r)=>{\n            console.log('loaded context', r);\n            context.optionsForm = r.optionsForm;\n        })\n    ;\n}\n\nreturn {\n    id: params.node.id,\n    name: params.node.name,\n    comment: params.node.comment,\n    context: {...params.node.context},\n    events: {onCandidates: null, onGetProcessObject: null, ...params.node.events}\n}\n",
        "saveWorkflowToNode": "params.node.id = mem.workflow.id;\nparams.node.name = mem.workflow.name;\nparams.node.comment = mem.workflow.comment;\nparams.node.context = {...mem.workflow.context};\nparams.node.events = {...mem.workflow.events};\n\nparams.node.modified();\n",
        "getTaskFromNode": "return {\n    id: params.node.id || '',\n    name: params.node.name || '',\n    description: params.node.description || '',\n    autoStart: params.node.autoStart,\n    clientTask: {\n        path: params.node.clientTask.path || '',\n        taskName: params.node.clientTask.taskName || '',\n        parameters: params.node.clientTask.parameters.map((item)=>({...item}))\n    },\n    deadline: {...params.node.deadline},\n    events: {onPrepare: null, onComplete: null, ...params.node.events},\n    journal: {\n        enter: {...params.node.journal.enter},\n        leave: {...params.node.journal.leave},\n    },\n    comment: params.node.comment,\n}",
        "saveTaskToNode": "params.node.name = mem.task.name;\nparams.node.description = mem.task.description;\nparams.node.autoStart = mem.task.autoStart;\nparams.node.clientTask = mem.task.clientTask;\nparams.node.deadline = mem.task.deadline;\nparams.node.journal = mem.task.journal;\nparams.node.events = {...mem.task.events};\nparams.node.comment = mem.task.comment;\n\nparams.node.modified();\n",
        "getParallelFromNode": "return {\n    id: params.node.id,\n    name: params.node.name\n}",
        "saveParallelToNode": "params.node.name = mem.parallel.name;\nparams.node.modified();\n",
        "getFlowFromNode": "return {\n    name: params.node.name,\n    expression: params.node.expression,\n    comment: params.node.comment,\n}",
        "saveFlowToNode": "params.node.name = mem.flow.name;\nparams.node.expression = mem.flow.expression;\nparams.node.comment = mem.flow.comment;\n\nparams.node.modified();\n",
        "getTerminateFromNode": "return {\n    id: params.node.id,\n    name: params.node.name,\n}",
        "saveTerminateToNode": "params.node.name = mem.terminate.name;\nparams.node.modified();\n",
        "getLane": "let lane = {\n    ...params.lane,\n    notify: params.lane.notify.map((n)=>({...n})),\n    candidates: params.lane.candidates.map((c, i)=>({id: i, ...c})),\n    tasks: params.lane.tasks.map((t)=>({id: t.id, name: params.diagram.structure.findNodeById(t.id)?.name}))\n}\n\ndelete lane.ref;\ndelete lane.modified;\nreturn lane;",
        "saveLane": "params.lane.name = mem.lane.name;\nparams.lane.useInitiator = mem.lane.useInitiator;\nparams.lane.autoPerformer = mem.lane.autoPerformer;\nparams.lane.autoGroup = mem.lane.autoGroup;\n\nparams.lane.candidates = [...mem.lane.candidates];\nparams.lane.notify = [...mem.lane.notify];\nparams.lane.tasks = mem.lane.tasks.map((t)=>({id: t.id}));\n\nparams.lane.modified();",
        "createDefaultNotify": "return {\n    active: true,\n    name: 'Notify',\n    condition: '',\n    channel: 'EMAIL',\n    subject: 'You have new task: {{task.description}}',\n    message: '',\n    addressExpression: '',\n    candidates: true,\n    writeJournal: false\n};\n",
        "getTimerActions": "const timerActions = {\n    'timer': [\n        {value: 'continue', name: 'Продолжить'},\n    ],\n    'timer-header': [\n        {value: 'fork', name: 'Многократно'},\n        {value: 'terminate', name: 'Один раз'},\n    ],\n};\n\n//console.log('getTimerActions', params);\n\nreturn timerActions[params.node.type];",
        "initBlockDialog": "\nconst defaultFormName = {\n    object: 'easyflow',\n    form: 'editBlock'+params.node.type[0].toUpperCase()+params.node.type.slice(1)+'Form'\n};\n\nif (params.context?.code){\n\n    backend.post('/aoa/execObjectMethod', \n        {object: 'easyflow_context', method: 'getContext', params: {code: params.context.code}},\n        {useCache: true},\n    )\n        .then((r)=>{\n            context.form = r.flows[params.node.type]?.form;\n            if (!context.form){\n                context.form = defaultFormName;\n            }\n            forceUpdate();\n        })\n    ;\n}else{\n    context.form = defaultFormName;\n}\n",
        "initLaneDialog": "console.log('js.initLaneDialog', params);\n\nconst defaultForm = {\n    object: 'easyflow',\n    form: 'editLaneForm'\n};\n\nif (params.diagram.structure?.context?.code){\n    backend.post('/aoa/execObjectMethod', \n        {object: 'easyflow_context', method: 'getContext', params: {code: params.diagram.structure.context.code}},\n        {useCache: false},\n    )\n        .then((r)=>{\n            context.form = r.laneForm;\n            if (!context.form){\n                context.form = defaultForm;\n            }\n            forceUpdate();\n        })\n    ;\n    \n}else{\n    context.form = defaultForm;\n}"
    }
}