{
    "forms": {
        "templateEditTask": {
            "title": "Редактирование Шаблона",
            "className": "task task-panel",
            "style": {
                "height": "100%",
                "overflow": "hidden",
                "display": "flex",
                "flexDirection": "column"
            },
            "$": {
                "@panel": {
                    "className": "horizontal",
                    "style": {
                        "padding": "8px 8px 8px 8px"
                    },
                    "$": {
                        ".btnSave": {
                            "label": "Сохранить",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "mem.template.description.parameters=JSON.parse(context.parameters.text);"
                                },
                                {
                                    "js": "mem.template.description.method=context.method;"
                                },
                                {
                                    "js": "backend.post('/aoa/execObjectMethod', {object: 'template', method: 'save', params: mem.template}).then((r)=>{mem.template.id=r.id; mem.template.modified=r.modified; context.modified=false;}).then(()=>{tm.setTaskTitle(task.key, `Шаблон ${mem.template.code}`)})"
                                }
                            ],
                            "readOnly$": "!context.modified"
                        },
                        ".btnExec": {
                            "label": "Запустить",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "tm.newTask({path: '/aoa/ObjectTask', title: `Отчет ${mem.template.name}`, params: {object: 'template', form: 'previewTemplateTask', template: mem.template.code}})",
                                "disableUpdate": true
                            },
                            "readOnly$": "!mem.template?.id"
                        }
                    }
                },
                "@form": {
                    "style": {
                        "flex": 1,
                        "overflow": "hidden"
                    },
                    "object": "template",
                    "form": "templateEditForm"
                }
            },
            "actions": {
                "onTaskCreated": [
                    {
                        "js": "return task.params.id && backend.post('/aoa/execObjectMethod', {object: 'template', method: 'get', params: {id: task.params.id}}).then((r)=>{mem.template = r; tm.setTaskTitle(task.key, `Шаблон ${r.code}`); forceUpdate();})",
                        "disableUpdate": true
                    },
                    {
                        "js": "context.parameters = {text: JSON.stringify(mem.template?.description?.parameters||{}, null, 4)}"
                    },
                    {
                        "js": "context.method = mem?.template?.description?.method || {}"
                    }
                ],
                "onModified": {
                    "js": "if (!context.modified){context.modified=true; forceUpdate();}",
                    "disableUpdate": false
                }
            }
        },
        "templateEditForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "template": {
                    "style": {
                        "height": "100%"
                    },
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "overfow": "hidden",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.taskTabs){context.taskTabs={};} return context.taskTabs})()",
                                "style": {
                                    "marginBottom": "8px"
                                },
                                "pages": {
                                    "common": {
                                        "title": "Шаблон",
                                        "$": {
                                            "@form": {
                                                "object": "template",
                                                "form": "templateCommonForm"
                                            }
                                        }
                                    },
                                    "template": {
                                        "title": "текст",
                                        "style": {
                                            "height": "100%"
                                        },
                                        "$": {
                                            "@form": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "template",
                                                "form": "templateTextForm"
                                            }
                                        }
                                    },
                                    "parameters": {
                                        "title": "параметры",
                                        "style": {
                                            "height": "100%"
                                        },
                                        "$": {
                                            "@form": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "object": "template",
                                                "form": "templateParametersForm"
                                            }
                                        }
                                    },
                                    "method": {
                                        "title": "Источник",
                                        "style": {
                                            "height": "100%"
                                        },
                                        "$": {
                                            "@form": {
                                                "style": {
                                                    "height": "100%",
                                                    "marginLeft": "8px"
                                                },
                                                "object": "template",
                                                "form": "templateMethodForm"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "templateCommonForm": {
            "className": "vertical",
            "style": {
                "margin": "4px"
            },
            "$": {
                "code": {
                    "label": "Код шаблона",
                    "control": "TextEdit",
                    "actions": {
                        "onChange": {
                            "name": "onModified"
                        }
                    },
                    "required": true
                },
                "name": {
                    "label": "Наименование шаблона",
                    "control": "TextEdit",
                    "actions": {
                        "onChange": {
                            "name": "onModified"
                        }
                    },
                    "required": true
                },
                "description": {
                    "$": {
                        "comment": {
                            "label": "Комментарий",
                            "control": "TextEdit",
                            "controlProps": {
                                "multiline": true,
                                "minRows": 3,
                                "maxRows": 3
                            },
                            "actions": {
                                "onChange": {
                                    "name": "onModified"
                                }
                            }
                        }
                    }
                }
            }
        },
        "templateTextForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                "data": {
                    "style": {
                        "height": "100%",
                        "overflow": "hidden"
                    },
                    "control": "AceEditor",
                    "controlProps": {
                        "editorId": "templateTextEdit",
                        "mode": "html"
                    },
                    "actions": {
                        "onChange": {
                            "name": "onModified"
                        }
                    }
                }
            }
        },
        "templateParametersForm": {
            "style": {
                "height": "100%"
            },
            "$": {
                ".parameters": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "context.parameters",
                    "$": {
                        "text": {
                            "style": {
                                "height": "100%",
                                "overflow": "hidden"
                            },
                            "control": "AceEditor",
                            "controlProps": {
                                "editorId": "templateParametersEdit",
                                "mode": "json"
                            },
                            "actions": {
                                "onChange": {
                                    "name": "onModified"
                                }
                            }
                        }
                    }
                }
            }
        },
        "templateMethodForm": {
            "className": "vertical",
            "style": {
                "height": "100%"
            },
            "$": {
                ".method": {
                    "style": {
                        "height": "100%"
                    },
                    "init$": "context.method",
                    "$": {
                        ".tabs": {
                            "control": "Tabs",
                            "style": {
                                "height": "100%",
                                "display": "flex",
                                "flexDirection": "column"
                            },
                            "controlProps": {
                                "variant": "standard",
                                "context$": "(()=>{if (!context.methodTabs){context.methodTabs={};} return context.methodTabs;})()",
                                "style": {
                                    "marginBottom": "8px"
                                },
                                "pages": {
                                    "sql": {
                                        "style": {
                                            "flex": 1
                                        },
                                        "title": "SQL",
                                        "$": {
                                            "sql": {
                                                "className": "horizontal",
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "$": {
                                                    "@params": {
                                                        "className": "vertical",
                                                        "style": {
                                                            "width": "240px"
                                                        },
                                                        "$": {
                                                            "sqlType": {
                                                                "label": "Тип",
                                                                "control": "SelectList",
                                                                "controlProps": {
                                                                    "list": [
                                                                        {
                                                                            "value": "query",
                                                                            "name": "Запрос"
                                                                        },
                                                                        {
                                                                            "value": "plsql",
                                                                            "name": "Скрипт"
                                                                        }
                                                                    ]
                                                                },
                                                                "actions": {
                                                                    "onChange": {
                                                                        "name": "onModified"
                                                                    }
                                                                }
                                                            },
                                                            "database": {
                                                                "label": "База данных",
                                                                "control": "TextEdit",
                                                                "actions": {
                                                                    "onChange": {
                                                                        "name": "onModified"
                                                                    }
                                                                }
                                                            },
                                                            "@params": {
                                                                "className": "vertical",
                                                                "$": {
                                                                    "@buttons": {
                                                                        "className": "horizontal",
                                                                        "$": {
                                                                            ".btnAdd": {
                                                                                "label": "Добавить",
                                                                                "control": "IconButton",
                                                                                "controlProps": {
                                                                                    "icon": "add"
                                                                                },
                                                                                "action": {
                                                                                    "name": "addParam"
                                                                                }
                                                                            },
                                                                            ".btnDel": {
                                                                                "label": "Удалить",
                                                                                "control": "IconButton",
                                                                                "controlProps": {
                                                                                    "icon": "delete"
                                                                                },
                                                                                "action": {
                                                                                    "name": "delParam"
                                                                                },
                                                                                "readOnly$": "!context.methodParamsCtx?.selectedRow"
                                                                            }
                                                                        }
                                                                    },
                                                                    ".list": {
                                                                        "control": "ListTable",
                                                                        "getter": "context.methodParamsCtx.list || (()=>{context.methodParamsCtx.list=mem.params?.map((p)=>({code: p})); return context.methodParamsCtx.list})()",
                                                                        "controlOpts": {
                                                                            "id": "code",
                                                                            "columns!": {
                                                                                "code": {
                                                                                    "editable": true
                                                                                }
                                                                            }
                                                                        },
                                                                        "controlProps": {
                                                                            "context$": "(()=>{if (!context.methodParamsCtx)context.methodParamsCtx={}; return context.methodParamsCtx;})()",
                                                                            "gridOptions": {
                                                                                "headerHeight": 0
                                                                            }
                                                                        },
                                                                        "actions": {
                                                                            "onCellValueChanged": [
                                                                                {
                                                                                    "js": "mem.params.splice(mem.params.indexOf(params.oldValue), 1, params.newValue);"
                                                                                },
                                                                                {
                                                                                    "name": "onModified"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                },
                                                                "actions": {
                                                                    "addParam": [
                                                                        {
                                                                            "js": "if (!mem.params)mem.params=[]; mem.params.push(`param_${mem.params.length+1}`); context.methodParamsCtx=null;"
                                                                        },
                                                                        {
                                                                            "name": "onModified"
                                                                        }
                                                                    ],
                                                                    "delParam": [
                                                                        {
                                                                            "js": "mem.params.splice(mem.params.indexOf(context.methodParamsCtx.selectedRow.code), 1); context.methodParamsCtx=null;"
                                                                        },
                                                                        {
                                                                            "name": "onModified"
                                                                        }
                                                                    ],
                                                                    "onSelectionChanged": {
                                                                        "js": ";"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "@text": {
                                                        "style": {
                                                            "flex": 1
                                                        },
                                                        "$": {
                                                            "sql": {
                                                                "style": {
                                                                    "height": "100%",
                                                                    "overflow": "hidden"
                                                                },
                                                                "control": "AceEditor",
                                                                "controlProps": {
                                                                    "editorId": "methodMethodSql",
                                                                    "mode": "sql"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "script": {
                                        "style": {
                                            "flex": 1
                                        },
                                        "title": "Py скрипт",
                                        "$": {
                                            "script": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "$": {
                                                    "py": {
                                                        "style": {
                                                            "height": "100%",
                                                            "overflow": "hidden"
                                                        },
                                                        "control": "AceEditor",
                                                        "controlProps": {
                                                            "editorId": "methodMethodSql",
                                                            "mode": "python"
                                                        },
                                                        "actions": {
                                                            "onChange": {
                                                                "name": "onModified"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "previewTemplateTask": {
            "title": "Предварительный просмотр отчета",
            "className": "task task-panel",
            "style": {
                "height": "100%",
                "overflow": "hidden",
                "display": "flex",
                "flexDirection": "column"
            },
            "$": {
                "@layout": {
                    "className": "horizontal",
                    "style": {
                        "height": "100%"
                    },
                    "$": {
                        "parameters": {
                            "className": "vertical",
                            "style": {
                                "height": "100%",
                                "minWidth": "260px",
                                "marginRight": "8px",
                                "borderRight": "1px solid rgba(0, 0, 0, 0.54)",
                                "overflow": "auto"
                            },
                            "$": {
                                "@params": {
                                    "className": "vertical",
                                    "style": {
                                        "xflex": 1,
                                        "xoverflow": "auto"
                                    },
                                    "$$": "{['@tp']: {...context.template?.description?.parameters}}"
                                },
                                ".btnExec": {
                                    "label": "Выполнить",
                                    "control": "Button",
                                    "style": {
                                        "width": "100%",
                                        "display": "flex",
                                        "flexDirection": "row",
                                        "justifyContent": "center"
                                    },
                                    "controlProps": {
                                        "variant": "text",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "execReport"
                                    }
                                }
                            }
                        },
                        "@preview": {
                            "className": "vertical",
                            "style": {
                                "flex": 1,
                                "height": "100%",
                                "overflow": "hidden"
                            },
                            "$": {
                                ".ap": {
                                    "control": "ActionPanel",
                                    "controlOpts": {
                                        "actions": [
                                            {
                                                "title": "Печать",
                                                "action": {
                                                    "js": "const w = window.open(); if (!w) {throw 'Запрещено открытие новго окна. \\nРазрешите открытие нового окна в бравзере.'} w.document.write(mem.preview);"
                                                },
                                                "disabled$": "!mem.preview"
                                            },
                                            {
                                                "title": "Скачать",
                                                "action": {
                                                    "js": "fileDownload(mem.preview, context.template.name+'.html')"
                                                },
                                                "disabled$": "!mem.preview"
                                            },
                                            {
                                                "title": "Excel",
                                                "action": {
                                                    "js": "backend.post('/aoa/execObjectMethod', {object: 'template', method: 'exportHtml', params: {html: mem.preview, format: 'excel', fileName: context.template.name}}).then((r)=>{fileDownload(r.blob, r.fileName);})"
                                                },
                                                "disabled$": "!mem.preview"
                                            },
                                            {
                                                "title": "Word",
                                                "action": {
                                                    "js": "backend.post('/aoa/execObjectMethod', {object: 'template', method: 'exportHtml', params: {html: mem.preview, format: 'docx', fileName: context.template.name}}).then((r)=>{fileDownload(r.blob, r.fileName);})"
                                                },
                                                "disabled$": "!mem.preview"
                                            }
                                        ]
                                    }
                                },
                                "preview": {
                                    "style": {
                                        "flex": 1,
                                        "overflow": "hidden"
                                    },
                                    "control": "Html",
                                    "controlProps": {
                                        "style": {
                                            "height": "100%",
                                            "overflow": "auto"
                                        },
                                        "context$": "(()=>{context.htmlCtx = context.htmlCtx||{};return context.htmlCtx})()"
                                    },
                                    "actions": {
                                        "onClick": [
                                            {
                                                "js": "const atr = params.target.getAttribute('task'); if(atr){tm.newTask(eval('(function (){return ' + decodeURI(atr) + ';})()'));}",
                                                "disableUpdate": true
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "execReport": [
                            {
                                "js": "if (!validate()) throw 'Abort'"
                            },
                            {
                                "js": "context.parameters = {...mem.parameters};"
                            },
                            {
                                "js": "for(let k in context.parameters){if(!context.parameters[k])delete context.parameters[k]}"
                            },
                            {
                                "js": "for(let k in context.parameters){if(Array.isArray(context.parameters[k]) && context.parameters[k].length==0)delete context.parameters[k]}"
                            },
                            {
                                "js": "backend.post('/template/evalTemplate', {template: context.template.code, parameters: context.parameters}).then((r)=>{mem.preview=r; forceUpdate();})"
                            }
                        ]
                    }
                }
            },
            "actions": {
                "onTaskCreated": [
                    {
                        "js": "backend.post('/aoa/execObjectMethod', {object: 'template', method: 'get', params: {code: task.params.template}}).then((r)=>{context.template=r; forceUpdate()})"
                    }
                ]
            }
        }
    },
    "methods": {
        "htmlToExcel": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "import pandas as pd\nimport io\n\nhtml = parameters.get('html')\n\n#\n# Пробуем построить список колонок и получить их формат для экспорта в эксель\n#\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(html)\n\ntables = soup.find_all('table')\nif len(tables) == 0:\n    raise UserException('Нет таблицы для выгрузки в эксель')\n\ncolFormats = {}\ntable = tables[0]\nhead = table.find_all('th')\nfor col in head:\n    colFormats[col.string] = col.attrs.get('format')\n\ndef parsefloat(val):\n    if isinstance(val, str):\n        try:\n            v = val.replace(' ', '').replace(',', '.')\n            #print (val, '=>', v)\n            return float(v)\n        except ValueError:\n            return val\n        \n        \n    return val\n\n#\n# Преобразование для pandas и формат экспорта в эксель\n#\nexcelFormat = {\n    'int': {\n        'converter': int,\n        'format': {'num_format': '0'}\n    },\n    'float': {\n        'converter': parsefloat,\n        'format': {'num_format': '#,##0.00'}\n    },\n    'str': {\n        'converter': str,\n        'format': {'num_format': '@'}\n    },\n    'currency': {\n        'converter': parsefloat,\n        'format': {'num_format': '#,##0.00'}\n    }\n}\n\ndef tryGetColFormat(col):\n    fmt_name = colFormats.get(col)\n    if fmt_name and excelFormat.get(fmt_name):\n        return excelFormat[fmt_name]\n    return None\n    \n\n#\n# Построение конвертеров для pandas\n#\ndf = pd.read_html(html)[0]\n\ndef converter(col):\n    def real_converter(val):\n        fmt = tryGetColFormat(col)\n        if fmt:\n            conv = fmt['converter']\n            try:\n                return conv(val)\n            except:\n                return val\n        else:\n            return val\n        \n\n    return real_converter\n\n\nconverters = {c: converter(c) for c in df.columns}\n\n# Повторная загрузка с учетом конвертеров\ndf = pd.read_html(\n    html,\n    displayed_only=False,\n    decimal=',',\n    converters=converters\n)[0]\n\n\n#\n# Инициализируем экспорт в эксель\n#\nf = io.BytesIO()\nxwr = pd.ExcelWriter(f, engine='xlsxwriter',\n    engine_kwargs={'options': {'strings_to_numbers': False}}\n)\n\n\ndf.to_excel(xwr, sheet_name=\"Sheet1\", index=False)\n\n#\n# Вариант задания формата для xlsxwriter\n#\n# Создаём текстовый формат ячеек\ntxt_fmt = xwr.book.add_format({'num_format': '@'})\n\n# Устанавливаем формат колонкам\nfor idx, col in enumerate(df.columns):\n    fmt = tryGetColFormat(col)\n    if fmt:\n        xwr.book.worksheets()[0].set_column(idx, idx, None, xwr.book.add_format(fmt['format']))\n        print (col, idx, fmt['format'])\n    else:\n        xwr.book.worksheets()[0].set_column(idx, idx, None, txt_fmt)\n\nxwr.save()\n\ndata = f.getvalue()\n"
            }
        },
        "htmlToDocx": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "import io\nfrom docx import Document\nfrom docx.oxml import OxmlElement\nfrom docx.oxml.ns import qn\nfrom docx.opc.part import Part\nfrom docx.opc.constants import RELATIONSHIP_TYPE as RT\nfrom docx.shared import Cm\n\ndef add_alt_chunk(doc: Document, html: str):\n    package = doc.part.package\n    partname = package.next_partname('/word/altChunk%d.html')\n    alt_part = Part(partname, 'text/html', html.encode(), package)\n    r_id = doc.part.relate_to(alt_part, RT.A_F_CHUNK)\n    alt_chunk = OxmlElement('w:altChunk')\n    alt_chunk.set(qn('r:id'), r_id)\n    doc.element.body.sectPr.addprevious(alt_chunk)\n\ndef init_default_styles(doc):\n    def disableSpacing(s):\n        s.paragraph_format.space_before = 0\n        s.paragraph_format.space_after = 0\n        \n    disableSpacing(doc.styles['Normal'])\n    disableSpacing(doc.styles['Body Text'])\n    \ndef init_default_page(doc):\n    for section in doc.sections:\n        section.top_margin = Cm(1)\n        section.bottom_margin = Cm(1)\n        section.left_margin = Cm(2)\n        section.right_margin = Cm(1)    \n    \n\ndef htmlToDocx(params):\n\n    html = params.get('html')\n\n    doc = Document()\n    init_default_styles(doc)\n    init_default_page(doc)\n\n    add_alt_chunk(doc, html)\n\n    f = io.BytesIO()\n\n    doc.save(f)\n\n    return f.getvalue()\n\ndata = htmlToDocx(parameters)\n"
            }
        },
        "getList": {
            "sql": {
                "params": [],
                "sql": ""
            },
            "script": {
                "params": [],
                "py": "from beflex.template.models import Template\nfrom beflex.aoa.services import applyFilterModel2, applySortModel\n\nquery = Template.objects\n\nif parameters.get('id'):\n    query = query.filter(id=parameters['id'])\nelse:\n    filterModel2 = parameters['request'].get('filterModel2') if parameters.get('request') else None\n        \n    if filterModel2:\n        query = applyFilterModel2(query, filterModel2)\n    else:\n        query = query.all()\n    \n    if len(parameters.get('request', {}).get('sortModel', []))>0:\n        query = applySortModel(query, parameters['request']['sortModel'])\n    else: \n        query = query.order_by('code')\n    \n    if parameters.get('request', {}).get('startRow') is not None:\n        query = query[parameters['request']['startRow']:parameters['request']['endRow']]\n        \ndata = []\nfor t in query:\n    d = {\n        'id': t.id.__str__(),\n        'code': t.code,\n        'name': t.name,\n    }\n    \n    data.append(d)"
            }
        },
        "delete": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from beflex.template.models import Template\n\nw = Template.objects.get(id=parameters['id'])\nw.delete()\n"
            }
        },
        "exportHtml": {
            "sql": {},
            "script": {
                "py": "from django.http import HttpResponse\nimport urllib.parse\n\nexport_formats = {\n    'excel': {\n        'extension': 'xlsx'\n    },\n    'docx': {\n        'extension': 'docx'\n    }\n}\n\ndef exportHtml(rp):\n\n    exportMethod = None\n\n    if rp.get('format') == 'excel':\n        #from ..services import htmlToExcel as toExcel\n        #exportMethod = toExcel\n        exportMethod = 'htmlToExcel'\n    elif rp.get('format') == 'docx':\n        #from ..services import htmlToDocx as toDocx\n        #exportMethod = toDocx\n        exportMethod = 'htmlToDocx'\n    else:\n        raise Exception('Формат экспорта %s не предусмотрен' % rp.get('format'))\n    \n    p = {}\n    \n    if rp.get('html'):\n        p['html'] = rp['html']\n    elif rp.get('$files'):\n        file = rp['$files'].get('html')\n        if file:\n            p['html'] = file.read().decode('utf-8')\n    \n    #data = exportMethod(p)\n    data = execObjectMethod({'object': 'template', 'method': exportMethod, 'params': p})\n\n    j = HttpResponse(\n        content_type='application/%s' % rp.get('format'), \n        content=data,\n    )\n\n    if rp.get('fileName'):\n        file_name = urllib.parse.quote(rp.get('fileName'))\n    else:\n        file_name = urllib.parse.quote('report')\n        \n    full_file_name = '{fileName}.{extension}'.format(\n        fileName=file_name,\n        extension=export_formats[rp['format']]['extension']\n    )\n    \n    j['Content-Disposition'] = 'inline; filename=\"%s\"' % (full_file_name)\n        \n    return j\n\ndata = exportHtml(parameters)\n"
            }
        },
        "get": {
            "script": {
                "py": "from beflex.http import JsonResponse\n\ndef getTemplate(rp):\n\n    from beflex.template.models import Template\n    \n    filter = {}\n    if rp.get('id'):\n        filter['id'] = rp.get('id')\n    elif rp.get('code'):\n        filter['code'] = rp.get('code')\n    else:\n        raise Exception('Не заданы id или code для получения шаблона')\n    \n    try:\n        t = Template.objects.get(**filter)\n    except Template.DoesNotExist:\n        raise Exception('Шаблон %s не существует' % filter) from None\n    \n    data = {\n        'id': t.id.__str__(),\n        'code': t.code,\n        'name': t.name,\n        'modified': t.modified,\n        'data': t.data,\n        'description': t.description,\n    }\n\n    return JsonResponse(data)\n\ndata = getTemplate(parameters)\n"
            },
            "sql": {}
        },
        "save": {
            "sql": {},
            "script": {
                "py": "from datetime import datetime\nfrom beflex.template.models import Template\n\ndef saveTemplate(rp):\n\n    if rp.get('id'):\n        t = Template.objects.get(id=rp.get('id'))\n        if t.modified is not None and rp['modified'] is not None and t.modified != datetime.fromisoformat(rp['modified']):\n            raise UserException('Объект изменен в другой задаче, сохранение не возможно')\n        \n    else:\n        t = Template()\n\n    t.code = rp.get('code')\n    t.name = rp.get('name')            \n    t.data = rp.get('data')\n    t.description = rp.get('description')\n    t.save()\n    \n    return {\n        'id': t.id.__str__(),\n        'modified': t.modified,\n    }\n    \n\ndata = saveTemplate(parameters)\n"
            }
        }
    },
    "lists": {
        "default": {
            "id": "id",
            "columns": {
                "code": {
                    "title": "Код",
                    "width": 320
                },
                "name": {
                    "title": "Наименование",
                    "flex": 1
                }
            },
            "actions": [
                {
                    "title": "Обновить",
                    "icon": "refresh",
                    "mini": true,
                    "command": {
                        "type": "standard",
                        "call": "refresh"
                    }
                },
                {
                    "title": "Создать",
                    "icon": "add",
                    "mini": true,
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title": "Новый шаблон",
                        "params": {
                            "object": "template",
                            "form": "templateEditTask"
                        }
                    }
                },
                {
                    "title": "Открыть",
                    "icon": "view",
                    "mini": true,
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "`Шаблон ${$listRow.code}`",
                        "params": {
                            "object": "template",
                            "form": "templateEditTask",
                            "id$": "$listRow.id"
                        }
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Удалить",
                    "icon": "delete",
                    "mini": "true",
                    "command": {
                        "type": "standard",
                        "call": "delete"
                    },
                    "confirm": {
                        "message$": "`Удалить шаблон ${$listRow.code}, ${$listRow.name} ?`",
                        "yes": "Да",
                        "no": "Нет"
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Инструменты",
                    "split": true,
                    "actions": [
                        {
                            "title": "Пакеты",
                            "command": {
                                "type": "js",
                                "js": "frontend.dialog({object: 'package', form: 'objectPackageDialog', mem: {}, params: {objectId: $listRow.id, model: 'template.Template'}, context: {}})"
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "История",
                            "command": {
                                "type": "task",
                                "title$": "`История объекта: ${$listRow.code}`",
                                "call": "/aoa/ObjectTask",
                                "params": {
                                    "object": "aos.ModifiedObjects",
                                    "form": "historyTask",
                                    "model": "template.Template",
                                    "objectId$": "$listRow.id"
                                }
                            },
                            "disabled$": "!$listRow"
                        }
                    ],
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Запустить",
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "`Отчет ${$listRow.name}`",
                        "params": {
                            "object": "template",
                            "form": "previewTemplateTask",
                            "template$": "$listRow.code"
                        }
                    },
                    "disabled$": "!$listRow"
                }
            ],
            "filter": {
                "form": {
                    "style": {
                        "width": "360px",
                        "overflow": "hidden",
                        "paddingRight": "0px"
                    },
                    "title": "Фильтр",
                    "className": "panel vertical",
                    "$": {
                        "@fields": {
                            "className": "vertical",
                            "style": {
                                "paddingTop": "8px",
                                "paddingRight": "8px",
                                "overflowY": "auto",
                                "flexGrow": 1
                            },
                            "$": {
                                "code": {
                                    "label": "Код",
                                    "control": "TextEdit"
                                },
                                "name": {
                                    "label": "Нименование",
                                    "control": "TextEdit"
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnClear": {
                                    "control": "Button",
                                    "label": "Очистить",
                                    "controlProps": {
                                        "variant": "outlined",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "clean"
                                    }
                                },
                                "btnApply": {
                                    "control": "Button",
                                    "label": "Применить",
                                    "controlProps": {
                                        "variant": "contained",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "js": "actions.apply(mem);",
                                        "params": {
                                            "disableUpdate": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "clean": {
                            "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                        }
                    }
                }
            }
        }
    },
    "references": {},
    "js": {}
}