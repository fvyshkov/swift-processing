{
    "lists": {
        "objects": {
            "id": "id",
            "getList": "getObjectTranslations",
            "columns": {
                "type": {
                    "title": "Type",
                    "width": 200,
                    "decode": {
                        "ao": {
                            "value": "Application object"
                        }
                    }
                },
                "code": {
                    "title": "Code",
                    "width": 180
                },
                "language": {
                    "title": "Language",
                    "flex": 1
                },
                "modified": {
                    "title": "Modified",
                    "width": 160,
                    "format": "datetime"
                }
            },
            "actions": [
                {
                    "title": "Refresh",
                    "icon": "refresh",
                    "mini": true,
                    "command": {
                        "type": "standard",
                        "call": "refresh"
                    }
                },
                {
                    "title": "View",
                    "icon": "view",
                    "mini": true,
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "`Object translation: ${$listRow.code}`",
                        "params": {
                            "id$": "$listRow.id",
                            "object": "intl",
                            "form": "objectEditTask"
                        }
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Delete",
                    "icon": "delete",
                    "mini": "true",
                    "command": {
                        "js": "backend.post('/aoa/execObjectMethod', {object:'intl', method: 'deleteObjectTranslation', params: {id: $listRow.id}})"
                    },
                    "confirm": {
                        "message$": "`Delete translation of ${$listRow.code} ?`",
                        "yes": "Yes",
                        "no": "No"
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Extract",
                    "command": {
                        "js": "frontend.dialog({object: 'intl', form: 'extractObjectDialog', params: {type: $listRow?.type, object: $listRow?.code, language: $listRow?.language, listTask: task}})"
                    }
                },
                {
                    "title": "Delete all translations",
                    "command": {
                        "js": "backend.post('/aoa/execObjectMethod', {object: 'intl', method: 'deleteAllObjectsTranslations'}).then(()=>{clearSelection(); forceRefreshList();})",
                        "disableUpdate": true
                    },
                    "confirm": {
                        "message": "Delete all translations?",
                        "yes": "Yes",
                        "no": "No"
                    }
                },
                {
                    "title": "Tools",
                    "split": true,
                    "actions": [
                        {
                            "title": "Packages",
                            "command": {
                                "type": "js",
                                "js": "frontend.dialog({object: 'package', form: 'objectPackageDialog', mem: {}, params: {objectId: $listRow.id, model: 'intl.ObjectTranslation'}, context: {}})"
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "History",
                            "command": {
                                "type": "task",
                                "title$": "`Object history: ${$listRow.type}_${$listRow.code}_${$listRow.language}`",
                                "call": "/aoa/ObjectTask",
                                "params": {
                                    "object": "aos.ModifiedObjects",
                                    "form": "historyTask",
                                    "model": "intl.ObjectTranslation",
                                    "objectId$": "$listRow.id"
                                }
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "Download as package",
                            "command": {
                                "js": "backend.post('/aoa/execObjectMethod', {object: 'aos.ModifiedObjects', method: 'downloadCustomPackage', params: {objects: $listRows.map((r)=>({model: 'intl.ObjectTranslation', objectId: r.id}))}}).then((r)=>{fileDownload(r.blob, r.fileName)})",
                                "disableUpdate": true
                            },
                            "disabled$": "!($listRows?.length>0)"
                        }
                    ]
                }
            ],
            "filter": {
                "form": {
                    "style": {
                        "width": "360px",
                        "overflow": "hidden",
                        "paddingRight": "0px"
                    },
                    "title": "Filter",
                    "className": "panel vertical",
                    "$": {
                        "@fields": {
                            "className": "vertical",
                            "style": {
                                "paddingTop": "8px",
                                "paddingRight": "8px",
                                "overflowY": "auto",
                                "flexGrow": 1
                            },
                            "$": {
                                "type": {
                                    "label": "Object type",
                                    "control": "SelectList",
                                    "controlProps": {
                                        "list": [
                                            {
                                                "value": "ao",
                                                "name": "Application object"
                                            },
                                            {
                                                "value": "workflow",
                                                "name": "Workflow"
                                            },
                                            {
                                                "value": "workplace",
                                                "name": "Workplace"
                                            }
                                        ]
                                    }
                                },
                                "code": {
                                    "label": "code",
                                    "control": "TextEdit"
                                },
                                "language": {
                                    "label": "Language",
                                    "control": "TextEdit"
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnClear": {
                                    "control": "Button",
                                    "label": "Clear",
                                    "controlProps": {
                                        "variant": "outlined",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "clear"
                                    }
                                },
                                "btnApply": {
                                    "control": "Button",
                                    "label": "Apply",
                                    "controlProps": {
                                        "variant": "contained",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "js": "actions.apply(mem);",
                                        "disableUpdate": true
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "clear": {
                            "js": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                        }
                    }
                }
            },
            "events": {
                "onTaskCreated": {
                    "js": "setTaskTitle('Objects translation')"
                },
                "onRowDoubleClicked": {
                    "js": "tm.newTask({path: '/aoa/ObjectTask', title: `Translation of: ${$listRow.code}`, params: {object: 'intl', form: 'objectEditTask', id: $listRow.id}})"
                },
                "forceRefresh": {
                    "js": "forceRefreshList();"
                }
            }
        }
    },
    "forms": {
        "extractObjectDialog": {
            "title": "Select object for translation",
            "className": "vertical",
            "style": {
                "width": "500px"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "flexGrow": 1,
                        "paddingTop": "8px"
                    },
                    "$": {
                        "type": {
                            "label": "Object type",
                            "default$": "params.type",
                            "style": {
                                "width": "280px"
                            },
                            "control": "SelectList",
                            "controlProps": {
                                "list": [
                                    {
                                        "value": "ao",
                                        "name": "Application object"
                                    },
                                    {
                                        "value": "workflow",
                                        "name": "Workflow"
                                    },
                                    {
                                        "value": "workplace",
                                        "name": "Workplace"
                                    }
                                ]
                            },
                            "events": {
                                "onChange": {
                                    "name": "onTypeChanged"
                                }
                            },
                            "required": true
                        },
                        "object": {
                            "label": "Object code",
                            "default$": "params.object",
                            "style": {
                                "width": "280px"
                            },
                            "control": "ObjectReference",
                            "controlProps": {
                                "object$": "{ao: 'aoa', workflow: 'easyflow', workplace: 'workplace'}[mem.type]",
                                "reference$": "{ao: 'objects', workflow: 'workflows', workplace: 'workplaces'}[mem.type]",
                                "valueField": "code"
                            },
                            "required": true
                        },
                        "language": {
                            "label": "Language",
                            "default$": "params.language",
                            "style": {
                                "width": "280px"
                            },
                            "control": "ObjectReference",
                            "controlProps": {
                                "object": "intl",
                                "reference": "languages",
                                "params": {},
                                "valueField": "code"
                            },
                            "required": true
                        }
                    },
                    "events": {
                        "onTypeChanged": {
                            "js": ";"
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "flexDirection": "row-reverse"
                    },
                    "$": {
                        ".btnAppy": {
                            "label": "Translate",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary",
                                "variant": "contained"
                            },
                            "action": [
                                {
                                    "js": "if(!validate()) throw 'Abort';"
                                },
                                {
                                    "js": "backend.post('/aoa/execObjectMethod', {object: 'intl', method: 'extractObjectStrings', params: {type: mem.type, object: mem.object, language: mem.language}}).then(()=>{actions.close(); params?.listTask?.events?.fire('forceRefresh')})",
                                    "disableUpdate": true
                                }
                            ]
                        },
                        ".btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "actions.close();",
                                "disableUpdate": true
                            }
                        }
                    }
                }
            },
            "events": {
                "onDialogCreated": []
            }
        },
        "objectEditTask": {
            "title": "Resources to translate",
            "className": "vertical task task-panel",
            "$": {
                "@panel": {
                    "className": "horizontal",
                    "style": {
                        "marginTop": "4px",
                        "padding": "8px 8px 8px 8px"
                    },
                    "$": {
                        ".btnSave": {
                            "label": "Save",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "name": "saveTranslation"
                                }
                            ],
                            "readOnly$": "!context.modified"
                        }
                    }
                },
                "@form": {
                    "className": "vertical",
                    "style": {
                        "flex": 1,
                        "overflow": "hidden",
                        "padding": "8px 8px 0px 8px"
                    },
                    "$": {
                        "ot": {
                            "style": {
                                "flexGrow": 1
                            },
                            "className": "vertical",
                            "$": {
                                "@object": {
                                    "className": "horizontal",
                                    "$": {
                                        "type": {
                                            "label": "Object type",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "TextEdit"
                                        },
                                        "code": {
                                            "label": "Object code",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "TextEdit"
                                        },
                                        "language": {
                                            "label": "Language",
                                            "style": {
                                                "width": "280px"
                                            },
                                            "control": "TextEdit"
                                        }
                                    }
                                },
                                "@strings": {
                                    "className": "vertical",
                                    "style": {
                                        "flexGrow": 1
                                    },
                                    "$": {
                                        "|strings": {
                                            "style": {
                                                "flexGrow": 1,
                                                "overflow": "hidden"
                                            },
                                            "control": "ListTable",
                                            "controlProps": {
                                                "style": {
                                                    "height": "100%"
                                                },
                                                "gridOptions": {
                                                    "domLayout": "normal"
                                                },
                                                "listContext$": "(()=>{context.strings=context.strings||{}; return context.strings;})()",
                                                "compact": true,
                                                "columns!": {
                                                    "msgctxt": {
                                                        "label": "Context",
                                                        "editable": true,
                                                        "resizable": true,
                                                        "width": 200,
                                                        "fastFilter": true
                                                    },
                                                    "msgid": {
                                                        "label": "Id",
                                                        "editable": true,
                                                        "flex": 1,
                                                        "fastFilter": true
                                                    },
                                                    "msgstr": {
                                                        "label": "Text",
                                                        "editable": true,
                                                        "flex": 1,
                                                        "fastFilter": true
                                                    }
                                                }
                                            },
                                            "events": {
                                                "onCellValueChanged": {
                                                    "name": "onModified"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "events": {
                "onTaskCreated": {
                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'intl', method: 'getObjectTranslation', params: {id: task.params.id}}).then((r)=>{mem.ot=r; setTaskTitle(_('Translation')+' '+r.code); forceUpdate()})"
                },
                "onModified": {
                    "js": "if (!context.modified){context.modified=true; forceUpdate();}",
                    "disableUpdate": false
                },
                "saveTranslation": {
                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'intl', method: 'saveObjectTranslation', params: mem.ot}).then((r)=>{mem.ot=r; context.modified=false; forceUpdate();})"
                }
            }
        }
    },
    "js": {},
    "methods": {
        "getObjectTranslations": {
            "sql": {},
            "script": {
                "py": "from beflex.intl.models import ObjectTranslation\r\nfrom beflex.aoa.services.filter import applyFilterModel2\r\n\r\n\r\nquery = ObjectTranslation.objects.values('id', 'type', 'code', 'language', 'modified')\r\n\r\nif parameters.get('id'):\r\n    query=query.filter(id=parameters['id'])\r\nelse:\r\n    filterModel2 = parameters.get('request', {}).get('filterModel2')\r\n    if filterModel2:\r\n        \r\n        if len(filterModel2)>0:\r\n            query = applyFilterModel2(query, filterModel2)\r\n    else:\r\n        query = query.all()\r\n    #query = query.order_by('-created')\r\n    \r\n    if parameters.get('request', {}).get('startRow') is not None:\r\n        query = query[parameters['request']['startRow']:parameters['request']['endRow']]\r\n\r\n\r\n\r\ndata = []\r\nfor r in query:\r\n    data.append({\r\n        'id': r['id'],\r\n        'type': r['type'],\r\n        'code': r['code'],\r\n        'language': r['language'],\r\n        'modified': r['modified'],\r\n    })"
            }
        },
        "extractObjectStrings": {
            "sql": {},
            "script": {
                "py": "if parameters['type'] == 'ao':\r\n    data = AO.intl.extractApplicationObjectStrings(code=parameters['object'], language=parameters['language'])\r\nelif parameters['type'] == 'workflow':\r\n    data = AO.intl.extractWorkflowStrings(code=parameters['object'], language=parameters['language'])\r\nelif parameters['type'] == 'workplace':\r\n    data = AO.intl.extractWorkplaceStrings(code=parameters['object'], language=parameters['language'])\r\nelse:\r\n    raise UserException('extractObjectStrings: invalid argument')"
            }
        },
        "extractApplicationObjectStrings": {
            "script": {
                "py": "from beflex.aoa.models import Object\r\nfrom beflex.intl.models import ObjectTranslation\r\n\r\nobj = Object.objects.get(code=parameters['code'])\r\n\r\ndef extract_js(text):\r\n    try:\r\n        resources = AO.intl.xgettext(text=text.encode('utf-8'), language='javascript')\r\n    except Exception as e:\r\n        raise UserException({\r\n            'message': 'Error extracting resources',\r\n            'description': 'text:\\n'.format(\r\n                text=text\r\n            )\r\n        }).withError(e)\r\n        \r\n    return [{\r\n        **x,\r\n        'msgctxt': 'js'+('_'+x['msgctxt'] if x.get('msgctxt') else '')\r\n    } for x in resources]\r\n    \r\n\r\ndef extractFormElement(elm):\r\n    strings = []\r\n\r\n    for k,v in elm.items():\r\n        # It can be empty\r\n        #if v is None:\r\n        #    raise UserException('Form element {key} do not have items'.format(\r\n        #        key = k\r\n        #    ))\r\n        if isinstance(v, dict):\r\n            strings.extend(extractFormElement(v))\r\n        elif isinstance(v, list):\r\n            for c in v:\r\n                if isinstance(c, dict):\r\n                    strings.extend(extractFormElement(c))\r\n        else:\r\n            # Caution: Do not translate name attribute because it used for actions\r\n            if k in ['label', 'title'] and v is not None and len(v)>0:\r\n                strings.append({\r\n                    'msgctxt': None,\r\n                    'msgid': v,\r\n                    'msgstr': None\r\n                })\r\n            elif len(k)>1 and k[-1]=='$' or k=='js':\r\n                try:\r\n                    resources = AO.intl.xgettext(text=v.encode('utf-8'), language='javascript')\r\n                except Exception as e:\r\n                    raise UserException({\r\n                        'message': 'Error extracting resources',\r\n                        'description': 'key: {key}\\nvalue:\\n{value}'.format(\r\n                            key=k, value=v\r\n                        )\r\n                    }).withError(e)\r\n                    \r\n                strings.extend(\r\n                    [{\r\n                        **x,\r\n                        'msgctxt': 'js'+('_'+x['msgctxt'] if x.get('msgctxt') else '')\r\n                    } for x in resources]\r\n                )\r\n    return strings\r\n\r\ndef extractLists(obj):\r\n    strings = []\r\n    lists = obj.description.get('lists')\r\n\r\n    for list_name in lists:\r\n        lst = lists[list_name]\r\n        \r\n        columns = lst.get('columns', {})\r\n        for c in columns:\r\n            column = columns[c]\r\n            if column.get('title'):\r\n                strings.append({\r\n                    'msgctxt': None,\r\n                    'msgid': column['title'],\r\n                    'msgstr': None\r\n                })\r\n                \r\n            if isinstance(column.get('decode'), dict):\r\n                for (k, v) in column['decode'].items():\r\n                    if v.get('value') is not None and len(v['value'])>0:\r\n                        strings.append({\r\n                            'msgctxt': None,\r\n                            'msgid': v['value'],\r\n                            'msgstr': None\r\n                        })\r\n                        \r\n                \r\n        actions = lst.get('actions', [])\r\n        def extractAction(action):\r\n            if action.get('title'):\r\n                strings.append({\r\n                    'msgctxt': None,\r\n                    'msgid': action['title'],\r\n                    'msgstr': None\r\n                })\r\n            if isinstance(action.get('actions'), list):\r\n                for a in action['actions']:\r\n                    extractAction(a)\r\n            \r\n        for action in actions:\r\n            extractAction(action)\r\n                \r\n        events = lst.get('events', {})\r\n        def extract_event(event):\r\n            if event.get('js') is not None:\r\n                return extract_js(event['js'])\r\n            return []\r\n            \r\n        for event_name in events:\r\n            event = events[event_name]\r\n            if isinstance(event, dict):\r\n                strings.extend(extract_event(event))\r\n            elif isinstance(event, list):\r\n                for e in event:\r\n                    strings.extend(extract_event(e))\r\n            \r\n        flt = lst.get('filter', {})\r\n        if flt.get('title') is not None:\r\n            strings.append({\r\n                'msgctxt': None,\r\n                'msgid': flt['title'],\r\n                'msgstr': None\r\n            })\r\n        strings.extend(extractFormElement(flt.get('form', {})))\r\n\r\n    return strings\r\n\r\n    \r\n\r\ndef extractForms(obj):\r\n    strings = []\r\n    forms = obj.description.get('forms')\r\n    for form_name in forms:\r\n        form = forms[form_name]\r\n        strings.extend(extractFormElement(form))\r\n            \r\n    return strings\r\n\r\ndef extractMethods(obj):\r\n    strings = []\r\n    methods = obj.description.get('methods')\r\n    for name in methods:\r\n        if methods[name].get('script', {}).get('py') is not None:\r\n            strings.extend(\r\n                [{\r\n                    **x,\r\n                    #'msgctxt': name+('/'+x['msgctxt'] if x.get('msgctxt') is not None else '')\r\n                    'msgctxt': x.get('msgctxt')\r\n                } for x in AO.intl.xgettext(text=methods[name]['script']['py'].encode('utf-8'), language='Python')]\r\n            )\r\n    \r\n    return strings\r\n\r\ndef save_translations(strings):\r\n    try:\r\n        ot = ObjectTranslation.objects.get(type='ao', code=parameters['code'], language=parameters['language'])\r\n    except ObjectTranslation.DoesNotExist:\r\n        ot = ObjectTranslation()\r\n        ot.type = 'ao'\r\n        ot.code = parameters['code']\r\n        ot.language = parameters['language']\r\n        \r\n    def key(m):\r\n        if m.get('msgctxt'):\r\n            return m['msgctxt']+'\\x04'+m['msgid']\r\n        else:\r\n            return m['msgid']\r\n            \r\n    dict1 = dict(map(lambda x: (key(x), x), ot.data or []))\r\n    dict2 = dict(map(lambda x: (key(x), x), strings))\r\n    dict3 = {k:v for k,v in dict1.items() if k in dict2}\r\n    \r\n    \r\n    ot.data = [v for k,v in {**dict2, **dict3}.items()]\r\n    ot.save()\r\n\r\n    from beflex.intl import cache_clear\r\n    cache_clear()\r\n\r\nstrings = []\r\nstrings.extend(extractLists(obj))\r\nstrings.extend(extractForms(obj))\r\nstrings.extend(extractMethods(obj))\r\n\r\nsave_translations(strings)\r\n"
            },
            "sql": {}
        },
        "extractWorkflowStrings": {
            "script": {
                "py": "from beflex.easyflow.models import Deployment\r\n\r\ntry:\r\n    wf = Deployment.objects.get(code=parameters['code'], deleted=False)\r\nexcept Deployment.DoesNotExist:\r\n    raise UserError('Workflow %s does not exist' % parameters['code'])\r\n    \r\ndef extractFlowStrings(flow):\r\n    strings = []\r\n    \"\"\"\r\n    if flow.typ == 'workflow':\r\n        strings.append({\r\n            'msgctxt': None,\r\n            'msgid': flow.name,\r\n            'msgstr': None\r\n        })\r\n    \"\"\"\r\n    if flow.typ == 'script' and flow.script is not None:\r\n        strings.extend(\r\n            [{\r\n                **x,\r\n                'msgctxt': x.get('msgctxt')\r\n            } for x in AO.intl.xgettext(text=flow.script.encode('utf-8'), language='Python')]\r\n        )\r\n    \r\n    # Flow events    \r\n    if flow.events is not None:\r\n        for k, v in flow.events.items():\r\n            if v is not None:\r\n                strings.extend(\r\n                    [{\r\n                        **x,\r\n                        'msgctxt': x.get('msgctxt')\r\n                    } for x in AO.intl.xgettext(text=v.encode('utf-8'), language='Python')]\r\n                )\r\n        \r\n\r\n    for child in flow._children:\r\n        strings.extend(extractFlowStrings(child))\r\n    return strings\r\n    \r\nstrings = extractFlowStrings(wf.flow)\r\nAO.intl.saveTranslationStrings(type='workflow', code=parameters['code'], language=parameters['language'], strings=strings)\r\n    \r\n"
            },
            "sql": {}
        },
        "extractWorkplaceStrings": {
            "script": {
                "py": "from beflex.workplace.models import Workplace\r\nw = Workplace.objects.get(code=parameters.get('code'))\r\n#w = AO.workplace.get(code=parameters['code'])\r\n\r\ndef extractStrings(items):\r\n    strings = []\r\n    for m in items:\r\n        strings.append({\r\n            'msgctxt': None,\r\n            'msgid': m.name,\r\n            'msgstr': None\r\n        })\r\n        strings.extend(extractStrings(m.children))\r\n        \r\n    return strings\r\n\r\nstrings = extractStrings(w.menu.children)\r\n#raise UserException('extractWorkplaceStrings\\n%s' % json.dumps(w.menu.children, indent=4, ensure_ascii=False))\r\n#raise UserException('extractWorkplaceStrings\\n%s' % json.dumps(strings, indent=4, ensure_ascii=False))\r\n\r\nAO.intl.saveTranslationStrings(type='workplace', code=parameters['code'], language=parameters['language'], strings=strings)"
            }
        },
        "xgettext": {
            "script": {
                "py": "from subprocess import PIPE, run\r\nimport os\r\nfrom django.utils.encoding import DEFAULT_LOCALE_ENCODING\r\n\r\n\r\nargs = [\r\n    'xgettext',\r\n    #'--properties-output',\r\n    '--language='+parameters['language'],\r\n    '--from-code=utf-8',\r\n    '--keyword=pgettext:1c,2',\r\n    '--output=-',\r\n    '-'\r\n]\r\n\r\ntry:\r\n    p = run(args, input=parameters['text'], stdout=PIPE, stderr=PIPE, close_fds=os.name != 'nt')\r\nexcept FileNotFoundError as e:\r\n    raise UserException('Command xgettext does not exist. Check Operating System.')\r\nexcept OSError as err:\r\n    raise UserException('Error executing %s' % args[0]) from err\r\n\r\nif p.returncode != 0:\r\n    raise UserException('xgettext error:\\n%s\\n%s' % (p.stdout.decode('utf8'), p.stderr.decode(DEFAULT_LOCALE_ENCODING, errors='replace')))\r\n\r\ndef parse_result(text):\r\n    translations = []\r\n    import polib\r\n    \r\n    po = polib.pofile(text)\r\n    for entry in po:\r\n        t = {\r\n            'msgctxt': entry.msgctxt,\r\n            'msgid': entry.msgid,\r\n            'msgstr': entry.msgstr,\r\n        }\r\n        translations.append(t)\r\n\r\n    return translations\r\n\r\ndata = parse_result(p.stdout.decode('utf8'))\r\n"
            }
        },
        "getObjectTranslation": {
            "sql": {},
            "script": {
                "py": "from beflex.intl.models import ObjectTranslation\r\n\r\not = ObjectTranslation.objects.get(id=parameters['id'])\r\n\r\ndata = {\r\n    'id': ot.id,\r\n    'type': ot.type,\r\n    'code': ot.code,\r\n    'language': ot.language,\r\n    'strings': ot.data\r\n}"
            }
        },
        "saveObjectTranslation": {
            "script": {
                "py": "from beflex.intl.models import ObjectTranslation\r\nfrom beflex.intl import cache_clear\r\n\r\not = ObjectTranslation.objects.get(id=parameters['id'])\r\n\r\not.data = parameters['strings']\r\not.save()\r\n\r\ndata = {\r\n    'id': ot.id,\r\n    'type': ot.type,\r\n    'code': ot.code,\r\n    'language': ot.language,\r\n    'strings': ot.data\r\n}\r\n\r\ncache_clear()"
            }
        },
        "deleteObjectTranslation": {
            "script": {
                "py": "from beflex.intl.models import ObjectTranslation\r\nObjectTranslation.objects.get(id=parameters['id']).delete()\r\n\r\nfrom beflex.intl import cache_clear\r\ncache_clear()"
            }
        },
        "saveTranslationStrings": {
            "script": {
                "py": "#\r\n# Save translation object strings\r\n#\r\n# parameters:\r\n#   type Object type\r\n#   code Object code\r\n#   language Translation language\r\n#   string Strings to save\r\n\r\nfrom beflex.intl.models import ObjectTranslation\r\n\r\ntry:\r\n    ot = ObjectTranslation.objects.get(type=parameters['type'], code=parameters['code'], language=parameters['language'])\r\nexcept ObjectTranslation.DoesNotExist:\r\n    ot = ObjectTranslation()\r\n    ot.type = parameters['type']\r\n    ot.code = parameters['code']\r\n    ot.language = parameters['language']\r\n    \r\n# Merge new strings with existing\r\ndef key(m):\r\n    if m.get('msgctxt'):\r\n        return m['msgctxt']+'\\x04'+m['msgid']\r\n    else:\r\n        return m['msgid']\r\n        \r\ndict1 = dict(map(lambda x: (key(x), x), ot.data or []))\r\ndict2 = dict(map(lambda x: (key(x), x), parameters['strings']))\r\ndict3 = {k:v for k,v in dict1.items() if k in dict2}\r\n\r\n\r\not.data = [v for k,v in {**dict2, **dict3}.items()]\r\not.save()\r\n\r\n# Reset cache\r\nfrom beflex.intl import cache_clear\r\ncache_clear()\r\n"
            }
        }
    },
    "references": {
        "languages": {
            "form": {
                "style": {
                    "width": "1000px",
                    "height": "600px"
                },
                "columns": [
                    {
                        "title": "Code",
                        "field": "code",
                        "width": 100
                    },
                    {
                        "title": "Name",
                        "field": "name",
                        "flex": 1
                    }
                ],
                "primaryKey": "code"
            },
            "method": {
                "script": {
                    "py": "from beflex.aoa.services import getDataObjectByCode\r\n\r\nsettings = getDataObjectByCode('settings', 'common')\r\ndata = settings['system']['languages']\r\n"
                }
            }
        }
    }
}