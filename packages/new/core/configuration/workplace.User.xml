<?xml version="1.0" ?>
<model id="workplace.User" name="User">
	<task path="/aoa/ObjectTask">
		<p name="object" expression="'user'"/>
		<p name="form" expression="'editUserTask'"/>
		<p name="userCode" expression="objectId"/>
	</task>
	<description><![CDATA[description['code'] = obj.code
description['name'] = obj.name
description['file_name'] = '%s.%s' % (obj.code, 'xml')
description['file_path'] = 'users'
]]></description>
	<load><![CDATA[]]></load>
	<export><![CDATA[import json
exp = {
    'code': obj.code,
    'name': obj.name,
    'workplaces': [],
}
exp['settings'] = obj.data if obj.data is not None else {}
uwl = obj.workplaces.all()
for uw in uwl:
    exp['workplaces'].append({
        'id': uw.workplace_id.__str__(),
        'code': uw.workplace.code,
        'name': uw.workplace.name,
    })

file['data'] = json.dumps(exp, indent=4, ensure_ascii=False)

]]></export>
	<import><![CDATA[from beflex.workplace.models import User, UserWorkplace, Workplace
import json

try:
    obj = User.objects.get(code=object_id)
except User.DoesNotExist:
    obj = User()
obj.code = object_id

imp = json.loads(file_data)

obj.name = imp['name']
obj.data = imp['settings'] if imp.get('settings') is not None else {}
obj._isImport = True
obj.save()

UserWorkplace.objects.filter(user_id=obj.id).delete()
for w in imp.get('workplaces'):
    uw = UserWorkplace();
    uw.user = obj
    uw.username = object_id
    if w.get('code') is not None:
        try:
            wp = Workplace.objects.get(code=w.get('code'))
        except Workplace.DoesNotExist:
            raise Exception('Workplace %s does not exist' % w.get('code'))
    else:
        wp = Workplace.objects.get(id=w.get('id'))
        
    uw.workplace = wp
    uw.save()

]]></import>
	<lookup><![CDATA[lookup_field = 'code']]></lookup>
</model>
