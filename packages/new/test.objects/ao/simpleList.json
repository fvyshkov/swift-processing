{
  "lists": {
    "default": {
      "id": "id",
      "columns": {
        "id": {
          "title": "ID",
          "width": 80
        },
        "name": {
          "title": "Name",
          "flex": 1
        }
      },
      "actions": [
        {
          "title": "Refresh",
          "icon": "refresh",
          "mini": true,
          "command": {
            "type": "standard",
            "call": "refresh"
          }
        },
        {
          "title": "Add",
          "icon": "add",
          "command": {
            "type": "task",
            "call": "/aoa/ObjectTask",
            "title": "New Record",
            "params": {
              "object": "simpleList",
              "form": "editForm",
              "isNew": true
            }
          }
        },
        {
          "title": "Edit",
          "icon": "edit",
          "command": {
            "type": "task",
            "call": "/aoa/ObjectTask",
            "title$": "`Edit: ${$listRow.name}`",
            "params": {
              "object": "simpleList",
              "form": "editForm",
              "objectKey$": "{id: $listRow.id}"
            }
          },
          "disabled$": "!$listRow"
        },
        {
          "title": "Delete",
          "icon": "delete",
          "command": {
              "type": "standard",
              "call": "delete"
          },
          "confirm": {
              "message$": "`Delete record '${$listRow.name}'?`",
              "yes": "Yes",
              "no": "No"
          },
          "disabled$": "!$listRow"
      }
      ],
      "events": {
        "onRowDoubleClicked": {
          "js": "tm.newTask({path: '/aoa/ObjectTask', title: `Edit: ${params.selectedRow.name}`, params: {object: 'simpleList', form: 'editForm', objectKey: {id: params.selectedRow.id}}})"
        }
      }
    }
  },
  "forms": {
    "editForm": {
      "title": "Record",
      "className": "vertical task task-panel panel",
      "style": {
        "width": "500px",
        "height": "300px"
      },
      "$": {
        "@form": {
          "className": "vertical",
          "style": {
            "flexGrow": 1,
            "overflow": "auto",
            "padding": "16px"
          },
          "$": {
            "record": {
              "className": "vertical",
              "$": {
                "id": {
                  "label": "ID",
                  "control": "TextEdit",
                  "readOnly": true,
                  "visible$": "!params.isNew"
                },
                "name": {
                  "label": "Name",
                  "control": "TextEdit",
                  "style": {
                    "width": "400px"
                  },
                  "controlProps": {
                    "required": true,
                    "inputProps": {
                      "maxLength": 100
                    }
                  }
                }
              }
            }
          }
        },
        "@buttons": {
          "className": "horizontal",
          "style": {
            "borderTop": "1px solid rgba(0,0,0,0.20)",
            "padding": "8px 16px",
            "justifyContent": "flex-end"
          },
          "$": {
            ".btnCancel": {
              "label": "Cancel",
              "control": "Button",
              "controlProps": {
                "color": "primary"
              },
              "action": {
                "js": "frontend.closeTask();"
              }
            },
            ".btnSave": {
              "label": "Save",
              "control": "Button",
              "controlProps": {
                "variant": "contained",
                "color": "primary"
              },
              "action": [
                {
                  "js": "return backend.post('/aoa/execObjectMethod', {object: 'simpleList', method: 'save', params: {id: mem.record?.id, name: mem.record?.name, isNew: params.isNew}});"
                },
                {
                  "js": "task.events.fireEvent('onRefreshList');"
                },
                {
                  "js": "frontend.closeTask();"
                }
              ],
              "disabled$": "!mem.record?.name"
            }
          }
        }
      },
      "actions": {
        "onTaskCreated": {
          "js": "if (task.params?.isNew) { mem.record = {name: ''}; forceUpdate(); } else if (task.params?.objectKey?.id) { backend.post('/aoa/execObjectMethod', {object: 'simpleList', method: 'get', params: {id: task.params.objectKey.id}}).then(r => { mem.record = r; forceUpdate(); }); }"
        }
      }
    }
  },
  "methods": {
    "getList": {
      "script": {
        "py": "# Get all records from simple_list table\nfrom apng_core.db import fetchall\nfrom apng_core.exceptions import UserException\n\nSQL = \"\"\"\n    SELECT id, name\n    FROM simple_list\n    ORDER BY id DESC\n\"\"\"\n\nwith initDbSession(database='default').cursor() as c:\n    try:\n        c.execute(SQL)\n        data = fetchall(c)\n    except Exception as e:\n        raise UserException({\n            'message': 'Error fetching records',\n            'description': 'SQL:\\n%s' % SQL\n        }).withError(e)\n"
      },
      "sql": {}
    },
    "get": {
      "script": {
        "py": "# Get single record by ID\nfrom apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\n\nSQL = \"\"\"\n    SELECT id, name\n    FROM simple_list\n    WHERE id = %(id)s\n\"\"\"\n\nwith initDbSession(database='default').cursor() as c:\n    try:\n        c.execute(SQL, {'id': parameters.get('id')})\n        data = fetchone(c)\n        if not data:\n            raise UserException('Record not found')\n    except Exception as e:\n        raise UserException({\n            'message': 'Error fetching record',\n            'description': 'SQL:\\n%s\\nparams: %s' % (SQL, {'id': parameters.get('id')})\n        }).withError(e)\n"
      },
      "sql": {}
    },
    "save": {
      "script": {
        "py": "# Save record to simple_list table\nfrom apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\n\nwith initDbSession(database='default').cursor() as c:\n    record_id = parameters.get('id')\n    name = parameters.get('name')\n    is_new = parameters.get('isNew', False)\n    \n    if is_new or not record_id:\n        # INSERT new record\n        SQL = \"\"\"\n            INSERT INTO simple_list (name)\n            VALUES (%(name)s)\n            RETURNING id\n        \"\"\"\n        try:\n            c.execute(SQL, {'name': name})\n            result = fetchone(c)\n            data = {'id': result['id'], 'name': name}\n        except Exception as e:\n            raise UserException({\n                'message': 'Error inserting record',\n                'description': 'SQL:\\n%s\\nparams: %s' % (SQL, {'name': name})\n            }).withError(e)\n    else:\n        # UPDATE existing record\n        SQL = \"\"\"\n            UPDATE simple_list\n            SET name = %(name)s\n            WHERE id = %(id)s\n        \"\"\"\n        try:\n            c.execute(SQL, {'id': record_id, 'name': name})\n            data = {'id': record_id, 'name': name}\n        except Exception as e:\n            raise UserException({\n                'message': 'Error updating record',\n                'description': 'SQL:\\n%s\\nparams: %s' % (SQL, {'id': record_id, 'name': name})\n            }).withError(e)\n"
      },
      "sql": {}
    },
    "delete": {
      "script": {
        "py": "# Delete record from simple_list table\nfrom apng_core.exceptions import UserException\n\nSQL = \"\"\"\n    DELETE FROM simple_list\n    WHERE id = %(id)s\n\"\"\"\n\nwith initDbSession(database='default').cursor() as c:\n    try:\n        c.execute(SQL, {'id': parameters.get('id')})\n        data = {'success': True}\n    except Exception as e:\n        raise UserException({\n            'message': 'Error deleting record',\n            'description': 'SQL:\\n%s\\nparams: %s' % (SQL, {'id': parameters.get('id')})\n        }).withError(e)\n"
      },
      "sql": {}
    },
    "DATABASE_UPDATE": {
      "sql": {
        "sqlType": "script",
        "database": "default",
        "sql": "-- Non-executable DDL kept for reference only.\ncreate extension if not exists \"pgcrypto\";\n\ncreate table if not exists simple_list (\n    id uuid primary key default gen_random_uuid(),\n    name text not null,\n    created_at timestamp without time zone not null default now()\n);\n"
      },
      "script": {}
    }
  },
  "actions": [],
  "filter": {},
  "references": {}
}

