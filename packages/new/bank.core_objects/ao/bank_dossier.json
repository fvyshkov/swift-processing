{
    "forms": {},
    "methods": {
        "getDocumentFileByType": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "SQL=\"\"\"\n    declare\n        dos t_docdos%%rowtype;\n        doctype t_deadoc%%rowtype;\n        doc t_doclst%%rowtype;\n        docver t_doccliver%%rowtype;\n        fileBlob blob;\n        fileExt varchar2(250);\n        idDep number;\n        idOrd number;\n    begin\n    \n        -- Досье документа или досье клиента\n        if :clientCode is not null then\n            select dep_id, ord_id into idDep, idOrd from g_cli where code=:clientCode;\n        else\n            idDep := :dep_id;\n            idOrd := :ord_id;\n        end if;\n    \n        -- Определяем тип документа по коду\n        begin\n            select * into doctype from t_deadoc where code=:docType;\n        exception when no_data_found then\n            raise_application_error(-20000, localfrmt('Тип документа досье %%0:s не существует', vargs(:docType)));\n        end;\n        \n        -- Определяем досье, по идентификатору документа cbs\n        begin\n            select * into dos from t_docdos where dep_id=idDep and ord_id=idOrd;\n        exception when no_data_found then\n            raise_application_error(-20000, localfrmt('Досье для докумета cbs (%%0:s, %%1:s) не найдено', vargs(idDep, idOrd)));\n        end;\n        \n        -- Ищем документ в досье по типу\n        begin\n            select * into doc from t_doclst where id=dos.id and ddo_id=docType.id\n            order by presentdate desc, correctdt desc\n            fetch first 1 row only\n            ;\n        exception when no_data_found then\n            --raise_application_error(-20000, localfrmt('Документ %%0:s (%%1:s) в досье не найден', vargs(docType.longname, docType.code)));\n            null;\n        end;\n        \n        if doc.id is not null then\n            -- Берём последнюю версию документа\n            select /*+index_desc(dv pk_t_doccliver)*/ * into docver from t_doccliver dv where id=doc.id and nord=doc.nord and rownum=1;\n            \n            -- Зачитываем электронную копию документа\n            select fileext, docblb into fileExt, fileBlob from t_docecpy where id=docver.dec_id;\n    \n            :docId := doc.id;\n            :docNord := doc.nord;\n            :presentDate := doc.presentDate;\n            :ecpyId := docver.dec_id;\n            :fileExt := fileExt;\n            :fileData := fileBlob;\n        end if;\n    end;\n\"\"\"\nimport cx_Oracle\nfrom datetime import datetime\n\ncon = initDbSession(application='bank')\nwith con.cursor() as cursor:\n\n    p = {\n        'dep_id': parameters.get('dep_id'),\n        'ord_id': parameters.get('ord_id'),\n        'clientCode': parameters.get('clientCode'),\n        'docType': parameters.get('docType'),\n        'fileExt': cursor.var(str),\n        'fileData': cursor.var(cx_Oracle.BLOB),\n        'docId': cursor.var(int),\n        'docNord': cursor.var(int),\n        'ecpyId': cursor.var(int),\n        'presentDate': cursor.var(datetime)\n    }\n    \n    cursor.execute(SQL, p)\n    \n    if p['docId'].getvalue() is not None:\n        fd = p['fileData'].getvalue()\n        data = {\n            'docId': p['docId'].getvalue(),\n            'docNord': p['docNord'].getvalue(),\n            'ecpyId': p['ecpyId'].getvalue(),\n            'presentDate': p['presentDate'].getvalue(),\n            'fileExt': p['fileExt'].getvalue(),\n            'fileData': fd.read() if fd else None,\n        }\n    else:\n        data = None\n    \n    "
            }
        },
        "getSetOfDocuments": {
            "sql": {},
            "script": {
                "py": "from apng_core.db import fetchall\n#\n# Получение наборов документоы\n#\ndef getSetOfDocuments(params):\n    \n    if not params.get('productCode'):\n        raise Exception('Не задан код продукта, productCode')\n    \n    with initDbSession(application='bank').cursor() as cursor:\n        p = {\n            'productCode': params.get('productCode'),\n        }\n        \n        docSql = \"\"\"\n            select\n                dcl_docref.id set_id,\n                dcl_docref.ddd_id dossier_id,\n                dcl_docref.code,\n                dcl_docref.longname,\n                dcl_docref.reqfl\n            from t_docrefdsc dcl_docref, t_deacls c \n            where c.code=:productCode\n                and dcl_docref.ddd_id=c.ddd_id\n        \"\"\"\n        \n        if params.get('appOnly') == True:\n            docSql += \"\"\"\n                and instr(','||T_PkgDeaPrm.fClsParByCode(c.ID, 'L_REQDOCLIST')||',', ','||dcl_docref.code||',') > 0\n            \"\"\"\n        \n        cursor.execute(docSql, p)\n        \n        d = fetchall(cursor)\n        \n    setOfDocuments = []\n    for s in d:\n        setOfDocuments.append({\n            'setId': s['SET_ID'],\n            'dossierId': s['DOSSIER_ID'],\n            'code': s['CODE'],\n            'name': s['LONGNAME'],\n            'isRequired': s['REQFL'] == '1',\n        })\n    \n    return setOfDocuments\n\ndata = getSetOfDocuments(parameters)\n"
            }
        },
        "getDocumentsInSet": {
            "script": {
                "py": "from apng_core.db import fetchall\ndef getDocumentsInSet(params):\n    \n    if not params.get('setId'):\n        raise Exception('Не указан набор документов, setId')\n    \n    with initDbSession(application='bank').cursor() as cursor:\n        p = {\n            'setId': params.get('setId'),\n        }\n        \n        cursor.execute(\"\"\"\n            select \n                d.ID, \n                D.CODE, \n                D.LONGNAME\n            from T_DOCREFSET S, T_DEADOC D\n            where S.ID = :setId\n              and D.ID = S.DDO_ID\n        \"\"\", p)\n        \n        d = fetchall(cursor)\n    \n    return [\n        {\n            'id': x['ID'],\n            'code': x['CODE'],\n            'name': x['LONGNAME']\n        }\n        for x in d\n    ]\n\ndata = getDocumentsInSet(parameters)"
            }
        }
    },
    "lists": {},
    "references": {},
    "js": {}
}