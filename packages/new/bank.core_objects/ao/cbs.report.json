{
    "forms": {},
    "methods": {
        "generate": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "import json\nimport logging\nimport requests\n\nfrom apng_core.auth import getUser\nfrom report.util import get_conn_dict\n\n\ndef generate(colvir_session: str, code: str, rpt_params: dict, rpt_type: str = 'XML', generator: str = 'Default',\n             gen_params: dict = None, lng_code: str = None, db_type: str = 'cbs'):\n    \n    from colvir_auth.csl import getCSLService\n    from apng_core.auth.csl import extractResponseError\n\n    \"\"\"Генерация отчёта через сервисную шину\n\n    :param colvir_session: идентификатор сессии\n    :param code: код шаблона отчета\n    :param rpt_params: словарь с параметрами отчета\n    :param rpt_type: тип файла XML TXT PDF WORD XLSX\n    :param generator: параметр сервисной шины\n    :param gen_params: словарь с прочими параметрами генерации, например TXTCHAR\n    :param lng_code: язык отчета, если не указан, то язык пользователя\n    :param db_type: тип базы данных cbs или dw\n    :return: текст отчета\n    \"\"\"\n    url = getCSLService('/CBSRptMngr/RptGen/Generate', False)\n    #prm = {\"RPT_CODE\": code, \"TYPE\": rpt_type, \"PARAMS\": rpt_params, \"CONN\": get_conn_dict(db_type)}\n    prm = {\"RPT_CODE\": code, \"TYPE\": rpt_type, \"PARAMS\": rpt_params,}\n    colvir_user = getUser()\n    if colvir_user:\n        prm[\"USR\"] = colvir_user.username\n    if gen_params:\n        prm.update(gen_params)\n    data = {\n        \"prm\": prm,\n        \"generator\": generator,\n        \"isFullProxy\": False\n    }\n    if lng_code:\n        data['lng'] = lng_code\n\n    response = requests.post(url, json=data, headers={'X-ColvirS': colvir_session})\n\n    if response.status_code == 200:\n        return response.content\n    else:\n        raise UserException({\n            'message': 'Ошибка обращения к сервису %s' % (url),\n            'description': 'Параметры:\\n%s\\nОтвет:\\n%s' % (json.dumps(data, indent=4, ensure_ascii=False), response.text),\n        }).withError(extractResponseError(response))\n\ndef generate2(colvir_session: str, code: str, rpt_params: dict, rpt_type: str = 'XML', generator: str = 'Default',\n             gen_params: dict = None, lng_code: str = None, db_type: str = 'cbs'):\n                 \n    from apng_core.csl import Csl\n    with Csl('CSL_APP_URL') as csl:\n        prm = {\n            \"prm\": {\n                \"RPT_CODE\": code, \n                \"TYPE\": rpt_type, \n                \"PARAMS\": rpt_params,\n                \"USR\": getUser().username,\n            },\n            \"generator\": generator,\n            \"isFullProxy\": False,\n            **({'lng': lng_code} if lng_code else {}),\n            #'CONN': get_conn_dict('cbs')\n        }\n\n\n        url = '/CBSRptMngr/RptGen/Generate'\n        response = csl.request(url, prm, headers={'X-ColvirS': colvir_session})\n    \n        if response.status_code == 200:\n            return response.content\n        else:\n            raise UserException({\n                'message': 'Ошибка обращения к сервису %s' % (csl.last_url['path']),\n                'description': 'Параметры:\\n%s' % json.dumps(prm, indent=4, ensure_ascii=False)\n            }).withError(csl.extractLastError())\n        \n\ndata = generate2(**parameters)\n\n"
            }
        }
    },
    "lists": {},
    "references": {}
}