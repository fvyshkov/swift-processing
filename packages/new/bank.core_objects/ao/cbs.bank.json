{
    "lists": {},
    "forms": {},
    "methods": {
        "getDepartmentCardInfo": {
            "sql": {},
            "script": {
                "py": "#\n# Получение информации о подразделении\n#\nfrom apng_core.db import fetchone\ndef getDepartmentCardInfo(params):\n    \n    with initDbSession(application='bank').cursor() as cursor:\n        p = {\n            'code'              : params.get('code'),\n        }\n            \n        cursor.execute(\"\"\"\n            -- Получение данных по подразделению\n            select\n                d.id \"id\",\n                d.code \"code\",\n                d.longname \"name\",\n                -- Наименование подразделения\n                G_pkgCli.fGetCliName(dep_crd.dep_id, dep_crd.id, p_operday, 0) \"depName\",\n                -- Наименование подразделения на латинском\n                G_pkgCli.fGetCliLLongName(dep_crd.dep_id, dep_crd.id, p_operday) \"depNameLat\",\n                -- Руководитель подразделения\n                G_pkgCli.fRuk(dep_crd.dep_id, dep_crd.id, 1) \"depHeadName\",\n                --3 значный атрибут для роли DEP\n                C_PKGDEPCLI.fGetAddAttr(d.id, 'DEP_CODE_TRI') \"depRole\",\n                -- Подразделение виртуального баланса\n                C_PKGDEPCLI.fGetAddAttr(d.id, 'VRTBALDEP') \"virtualBalanceDep\"\n            from G_CLI dep_crd, C_DEP d\n            where d.code=:code\n                and dep_crd.DEPCRD_ID=d.id\n        \"\"\", p)\n        \n        d = fetchone(cursor)\n        \n        if d:\n            return d\n        \n\ndata = getDepartmentCardInfo(parameters)"
            }
        },
        "getBankInfo": {
            "script": {
                "py": "from apng_core.db import fetchone\n\ndef getBankInfo(params):\n    \n    with initDbSession(application='bank').cursor() as cursor:\n        p = {\n            'code': params.get('code'),\n        }\n        \n        cursor.execute(\"\"\"\n            select * from gv_bnk where code=:code\n        \"\"\", p)\n        \n        d = fetchone(cursor)\n        \n        if d:\n            return {\n                'code': d['CODE'],\n                'name': d['LONGNAME'],\n            }\n        \n    return d\n\ndata = getBankInfo(parameters)\n"
            }
        },
        "getDepartmentInfo": {
            "script": {
                "py": "from apng_core.db import fetchone\n\ndef getDepartmentInfo(params):\n    \n    with initDbSession(application='bank').cursor() as cursor:\n        if params.get('code'):\n            p = {\n                'code': params.get('code'),\n            }\n            \n            cursor.execute(\"\"\"\n                select * from c_dep where code=:code\n            \"\"\", p)\n        elif params.get('id'):\n            p = {\n                'id': params.get('id'),\n            }\n            \n            cursor.execute(\"\"\"\n                select * from c_dep where id=:id\n            \"\"\", p)\n        else:\n            # Возможно тут надо поднять ошибку, так как в параметрах нет критериев запроса\n            return None\n        \n        d = fetchone(cursor)\n        \n        if d:\n            return {\n                'id': d['ID'],\n                'code': d['CODE'],\n                'name': d['LONGNAME'],\n            }\n        \n    return d\n\ndata = getDepartmentInfo(parameters)\n"
            }
        },
        "getDepartments": {
            "script": {
                "py": "from apng_core.db import fetchall\n\ndef getDepartments(parent=None):\n    with initDbSession(application='bank').cursor() as cursor:\n        p = {\n            'parent': parent\n        }\n        cursor.execute(\"\"\"\n            select \n                d.id,\n                d.id_hi,\n                d.code,\n                d.longname name,\n                level,\n                dh.code parent_code,\n                dh.longname parent_name\n            from c_dep d, c_dep dh\n            where dh.id(+)=d.id_hi\n            start with (:parent is null and d.id_hi is null or d.id = (select id from c_dep_std where code=:parent)) connect by d.id_hi = prior d.id\n        \"\"\", p)\n\n        q = fetchall(cursor)\n        \n    l = []\n    for r in q:\n        l.append({\n            'id': r['ID'],\n            'code': r['CODE'],\n            'name': r['NAME'],\n            'level': r['LEVEL'],\n            'parentId': r['ID_HI'],\n            'parentCode': r['PARENT_CODE'],\n            'parentName': r['PARENT_NAME'],\n        })\n         \n    return l\n\ndata = getDepartments(parameters.get('parent'))"
            },
            "sql": {}
        },
        "registerTemplateLibrary": {
            "sql": {},
            "script": {
                "py": "from functools import lru_cache\nfrom apng_core.template import register\n\n@register.filter('idDocumentName')\n@lru_cache()\ndef idDocumentName(value, param=None):\n    if value is None:\n        return ''\n        \n    #from colvir_cbs.services.client import getIdentDocumentInfo\n\n    d = None\n    if param=='nibbd':\n        d = AO.client.getIdentDocumentInfo({'nibbd_code': value})\n    else:\n        d = AO.client.getIdentDocumentInfo({'code': value})\n        \n    if d:\n        return d['name']\n    \n    return ''\n    \n@register.filter('typeOfBorrowerName')\n@lru_cache()\ndef typeOfBorrowerName(value, param=None):\n    if value is None:\n        return ''\n        \n    from colvir_cbs.services.client import getTypeOfBorrowerInfo\n\n    d = getTypeOfBorrowerInfo({'code': value})\n\n    if d:\n        return d['name']\n    \n    return ''\n\n@register.filter('purposeOfLoanName')\n@lru_cache()\ndef purposeOfLoanName(value, param=None):\n    if value is None:\n        return ''\n        \n    #from colvir_cbs.services.loan import getPurposeOfLoanInfo\n\n    d = AO.purposeOfLoan.getPurposeOfLoanInfo({'code': value, 'language': param})\n\n    if d:\n        return d['name']\n    \n    return ''\n\n@register.filter('purpose112OfLoanName')\n@lru_cache()\ndef purpose112OfLoanName(value, param=None):\n    if value:\n        from colvir_cbs.services.loan import getPurpose112OfLoanInfo\n        d = getPurpose112OfLoanInfo({'code': value})\n        if d:\n            return d['name']\n        else:\n            return value\n    \n    return ''\n\n@register.filter('loanQualityName')\n@lru_cache()\ndef loanQualityName(value, param=None):\n    if value is None:\n        return ''\n        \n    from colvir_cbs.services.loan import getLoanQualityInfo\n\n    d = getLoanQualityInfo({'code': value})\n\n    if d:\n        return d['name']\n    \n    return ''\n        \n@register.filter('currencyName')\n@lru_cache()\ndef currencyName(value, param=None):\n    if value is None:\n        return ''\n        \n    from colvir_cbs.services.currency import getCurrencyInfo\n\n    d = getCurrencyInfo({'code': value})\n\n    if d:\n        return d['name']\n    \n    return ''\n        \n@register.filter('typeOfLendingName')\n@lru_cache()\ndef typeOfLendingName(value, param=None):\n    if value:\n        from colvir_cbs.services.loan import getTypeOfLendingInfo\n        d = getTypeOfLendingInfo({'code': value})\n        if d:\n            return d['name']\n        else:\n            return value\n    \n    return ''\n@register.filter('typeOfLending110Name')\n@lru_cache()\ndef typeOfLending110Name(value, param=None):\n    if value:\n        from colvir_cbs.services.loan import getTypeOfLending110Info\n        d = getTypeOfLending110Info({'code': value})\n        if d:\n            return d['name']\n        else:\n            return value\n    \n    return ''\n\n@register.filter('typeOfPledgeName')\n@lru_cache()\ndef typeOfPledgeName(value, param=None):\n    if value:\n        from colvir_cbs.services.loan import getTypeOfPledgeInfo\n        p = {'code': value}\n        if param:\n            p['language'] = param\n        d = getTypeOfPledgeInfo(p)\n        if d:\n            return d['name']\n        else:\n            return value\n    \n    return ''\n\n@register.filter('departmentNameById')\n@lru_cache()\ndef departmentNameById(value, param=None):\n    if value:\n        d = execObjectMethod({\n            'object': 'cbs.bank', 'method': 'getDepartmentInfo',\n            'params': {'id': value}\n        })\n        if d:\n            return d['name']\n        else:\n            return value\n    \n    return ''\n\n@register.filter('departmentCardInfo')\n@lru_cache()\ndef departmentCardInfo(value, param=None):\n    if value:\n        p = {'code': value}\n        if param:\n            p['language'] = param\n        d = execObjectMethod({\n            'object': 'cbs.bank', 'method': 'getDepartmentCardInfo',\n            'params': p\n        })\n        if d:\n            return d\n        else:\n            raise Exception('Отсутствует карточка подразделения %s' % value)\n    \n    return ''\n\n@register.filter('departmentInfoById')\n@lru_cache()\ndef departmentInfoById(value, param=None):\n    if value:\n        d = execObjectMethod({\n            'object': 'cbs.bank', 'method': 'getDepartmentInfo',\n            'params': {'id': value}\n        })\n        if d:\n            return d\n    \n    return None\n\n@register.filter('departmentInfoByCode')\n@lru_cache()\ndef departmentInfoByCode(value, param=None):\n    if value:\n        d = execObjectMethod({\n            'object': 'cbs.bank', 'method': 'getDepartmentInfo',\n            'params': {'code': value}\n        })\n        if d:\n            return d\n    \n    return None\n\n@register.filter('clientHeadName')\ndef clientHeadName(value, param=None):\n    if not value:\n        return ''\n    \n    #from colvir_cbs.services.client import getClientHeadName\n    name = AO.client.getClientHeadName({'code': value})\n    if name is None:\n        name = ''\n    return name\n\n@register.filter('numberInWords')\ndef numberInWords(value, param=None):\n    \n    def numberInWords(params):\n        with initDbSession(application='bank').cursor() as cursor:\n            p = {\n                'amount': params.get('amount'),\n                'language': params.get('language'),\n                'amountWords': cursor.var(str),\n            }\n            \n            cursor.execute(\"\"\"\n                declare\n                begin\n                    :amountWords := trim(t_pkgmoney.fTrnPcnWord(\n                        money       => :amount, \n                        cLng        => :language\n                    ));\n                end;\n            \"\"\", p)\n            \n            d = p['amountWords'].getvalue()\n            \n        return d\n        \n    \n    if value is not None:\n        #from colvir_cbs.services import numberInWords\n        return numberInWords({\n            'amount': value,\n            'language': param\n        })\n    return ''\n    \n@register.filter('currencyInWords')\ndef currencyInWords(value, param=None):\n    if value is not None:\n        if param:\n            pl = param.split(',')\n            if len(pl) != 2:\n                raise Exception('Для вывода суммы строкой нужно передать валюту и язык (например USD,RU)')\n            \n        else:\n            raise Exception('Фильтр currencyInWords требует параметры, например \\'USD,RU\\'')\n            \n        \n        #from colvir_cbs.services import currencyInWords\n        return AO.bank_currency.currencyInWords({\n            'amount': value,\n            'currency': pl[0],\n            'language': pl[1],\n        })\n    return ''\n    \n@register.filter('clientRegistrationAddress')\ndef clientRegistrationAddress(value, param=None):\n    if value is not None:\n        from colvir_cbs.services.client import getAddressByType\n        return getAddressByType({\n            'code': value,\n            'adrtype': '002',\n            'format': 'web',\n        })\n    return ''\n"
            }
        }
    },
    "references": {},
    "js": {}
}