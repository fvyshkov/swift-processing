{
    "forms": {},
    "methods": {
        "getDealByAccount": {
            "sql": {
                "params": [
                    "accountNo"
                ],
                "sqlType": "query",
                "database": "cbs",
                "sql": "select\n    na.dep_id \"dep_id\",\n    na.id \"id\"\nfrom n_deaacc na, s_deaacc da, g_accbln ab\nwhere ab.code=:accountNo\n    and da.acc_dep_id=ab.dep_id and da.acc_id=ab.id\n    and na.dea_dep_id=da.dep_id and na.dea_id=da.id\n\n"
            },
            "script": {
                "params": []
            }
        },
        "createOverdraft": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "SQL = \"\"\"\ndeclare\n    oprParams varchar2(4000);\n    prmOut c_PkgStr.TPrmTBlLst;\n    \n    idLnDep number;\n    idAcc number;\n    idAccDep number;\n    idSks number;\n    idSksDep number;\n    idOvr number;\n    idOvrDep number;\n    sOvrCode varchar2(60);\n    req L_REQDEA%%rowtype;\n    pm T_PROCMEM%%rowtype;\nbegin\n    t_log.penable; t_log.clean;\n    --\n    -- Определение договора СКС по номеру счета\n    --\n    select\n        na.dep_id \"dep_id\",\n        na.id \"id\",\n        ab.id,\n        ab.dep_id\n    into idSksDep, idSks, idAcc, idAccDep\n    from n_deaacc na, s_deaacc da, g_accbln ab\n    where ab.code=:accountNo\n        and da.acc_dep_id=ab.dep_id and da.acc_id=ab.id\n        and na.dea_dep_id=da.dep_id and na.dea_id=da.id\n    ;\n    \n    --\n    -- Выполнение операции по созданию овердрафта\n    --\n    idLnDep := C_PkgDep.fGetIdDep(:depCode);\n    oprParams := \n        'PARAMSFL=>1'||\n        ',ACC_CODE=>'||:accountNo||\n        ',ACC_DEP_ID=>'||idAccDep||\n        ',ACC_ID=>'||idAcc||\n        ',AMOUNT=>'||:amount||\n        ',CLI_CODE=>'||substr(G_PkgCli.fGetCliCodeAcc(:accountNo, idAccDep, P_OPERDAY), 1, 30)||\n        ',CLI_NAME=>'||substr(G_PkgCli.fGetCliNameAcc(:accountNo, idAccDep, P_OPERDAY, 1), 1, 96)||\n        ',VAL_CODE=>'||:currency||\n        -- ',DCL_CODE=>'||:productCode||\n        -- подразделения создаваемой линии:\n        ',DEPID=>'||idLnDep||\n        ',LN_BAL_DEP_ID=>'||P_DEPBAL(idLnDep)||\n        ',LN_SRV_DEP_ID=>'||idLnDep||\n        ',LN_SELL_DEP_ID=>'||idLnDep\n    ;\n    \n    t_log.penable; t_log.clean;\n    \n    prmOut := T_PkgRunOprUtl.fRunOprByMainOrd(idSksDep, idSks, 'SETLIMOVRDR', oprParams);\n    \n    idOvrDep := C_PkgStr.fGetPrmVal(prmOut, 'OVR_DEP_ID');\n    idOvr := C_PkgStr.fGetPrmVal(prmOut, 'OVR_ID');\n    select CODE into sOvrCode from T_ORD where DEP_ID=idOvrDep and ID=idOvr;\n    \n    :idOvrDep := idOvrDep;\n    :idOvr := idOvr;\n    :ovrCode := sOvrCode;\n    \n    t_log.pdisable;\n    \nend;\n\n\"\"\"\n\nfrom colvir_cbs.services import log\n\ndata = None\n\nwith initDbSession(application='colvir_cbs').cursor() as cursor:\n    p = {\n        'accountNo': parameters['accountNo'],\n        'amount': parameters['amount'],\n        'currency': parameters['currency'],\n        'depCode': parameters['depCode'],\n        #'productCode': parameters['productCode'],\n        'idOvrDep': cursor.var(int),\n        'idOvr': cursor.var(int),\n        'ovrCode': cursor.var(str),\n    }\n    try:\n        cursor.execute(SQL, p)\n    except Exception as e:\n        raise UserException({\n            'message': 'Ошибка установки лимита овердрафта по счету %s\\n%s' % (parameters['accountNo'], e),\n            'trace': log.readLog()\n        })\n    \n    data = {\n        'dep_id': p['idOvrDep'].getvalue(),\n        'id': p['idOvr'].getvalue(),\n        'code': p['ovrCode'].getvalue(),\n        'log': log.readLog()\n    }\n\n\n"
            }
        },
        "getAccountByCardIdn": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "SQL = \"\"\"\ndeclare\n    accbln G_ACCBLN%%rowtype;\nbegin\n    select ab.*\n    into accbln\n    from colvir.g_accbln ab, colvir.s_deaacc da, colvir.n_crd c\n    where c.cardidn = :cardIdn\n      and da.dep_id=c.deaacc_dep_id and da.id=deaacc_id\n      and ab.dep_id = da.acc_dep_id and ab.id = da.acc_id\n    ;\n    \n    :accountNo := accbln.code;\n    :idAcc := accbln.id;\n    :idAccDep := accbln.dep_id;\n    \nexception when no_data_found then\n    raise_application_error(-20000, LocalFrmt(\n        'Номер счета по карте %%0:s не найден',\n        vargs(:cardIdn)\n    ));\nend;\n\"\"\"\n\n#\n# Получение счета по Idn карты\n#\ncon = initDbSession(application='colvir_cbs')\nwith con.cursor() as cursor:\n    p = {\n        'cardIdn': parameters['cardIdn'],\n        'accountNo': cursor.var(str),\n        'idAcc': cursor.var(int),\n        'idAccDep': cursor.var(int),\n    }\n    cursor.execute(SQL, p)\n    \n    data = {\n        'accountNo': p['accountNo'].getvalue(),\n        'idAcc': p['idAcc'].getvalue(),\n        'idAccDep': p['idAccDep'].getvalue(),\n    }\n    "
            }
        },
        "getEmployerByCard": {
            "script": {
                "py": "from apng_core.db import fetchone\n\n# Получение работодателя по карте через зарплатный договор\ndef getEmployerByCard(params):\n\n    if not params.get('cardIdn'):\n        raise Exception('Не передан cardIdn')\n\n    with initDbSession(application='colvir_cbs').cursor() as cursor:\n        p = {\n            'cardIdn': params.get('cardIdn'),\n        }\n        \n        cursor.execute(\"\"\"\n            select\n                decode(employer.DEPCRD_ID,\n                    null, employerh.longname,\n                    C_pkgDep.IdDep2BnkName(employer.DEPCRD_ID)\n                )  employer_name,\n                employerh.taxcode employer_inn\n            from n_crd c, pp_salobj so, t_dea sdd, g_cli employer, g_clihst employerh\n            where c.cardidn=:cardIdn\n                and so.dea_dep_id=c.dep_id and so.dea_id=c.id\n                and sdd.dep_id=so.sal_dep_id and sdd.id=so.sal_id\n                and employer.dep_id=sdd.cli_dep_id and employer.id=sdd.cli_id\n                and employerh.dep_id=employer.dep_id and employerh.id=employer.id and p_maxdate between employerh.fromdate and employerh.todate\n        \"\"\", p)\n        \n        d = fetchone(cursor)\n        \n        if d:\n            return {\n                'name': d['EMPLOYER_NAME'],\n                'inn': d['EMPLOYER_INN'],\n            }\n        \n    return None\n\ndata = getEmployerByCard(parameters)\n"
            }
        }
    },
    "lists": {},
    "references": {}
}