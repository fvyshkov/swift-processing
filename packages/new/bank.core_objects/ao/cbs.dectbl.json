{
    "lists": {},
    "forms": {},
    "methods": {
        "evalByOrd": {
            "sql": {},
            "script": {
                "py": "def evalByOrd(params):\n    \n    try:\n        connection = initDbSession(application='bank')\n        with connection.cursor() as cursor:\n    \n            tblResult = cursor.var(str)\n            tblResultText = cursor.var(str)\n    \n            tblParams = {\n                'idDep': params['idDep'], \n                'idOrd': params['idOrd'], \n                'tblName': params['tblName'], \n                'result': tblResult,\n                'resultText': tblResultText,\n            }\n    \n            cursor.execute(\"\"\"\n                declare\n                    idTbl integer;\n                    rUP C_PKGSBJUTL.rUsedProcess;\n                    dl C_PkgDecTbl.tDecisionList;\n                    decisionIndex integer;\n                    decision C_PkgDecTbl.tDecision;\n                begin\n                    idTbl := C_PkgDecTbl.fTblId(:tblName);\n                    \n                    begin\n                        select\n                            pm.ID, NULL, pm.BOP_ID, NULL, '1', pm.DEP_ID, pm.ORD_ID\n                        into rUp\n                        from COLVIR.T_PROCMEM pm\n                        where pm.DEP_ID=:idDep and pm.ORD_ID=:idOrd and pm.MAINFL='1';\n                    exception when no_data_found then\n                        raise_application_error(-20000, COLVIR.LocalFrmt(\n                            'Документ DEP_ID=%%0:s, ID=%%1:s не найден',\n                            vargs(:idDep, :idOrd)\n                        ));\n                    end;\n                    \n                    dl := C_PkgDecTbl.fSbjDecision(idTbl, rUP, true);\n                    decisionIndex := dl.first();\n                    if decisionIndex is not null then\n                        decision := dl(decisionIndex);\n                        :result := decision.SOLUTION;\n                        :resultText := decision.LONGNAME;\n                    else\n                        :result := null;\n                        :resultText := null;\n                    end if;\n                    \n                end;/\"\"\",\n                tblParams\n            )\n        \n        if params.get('withDescription', False) == True:\n            r = {\n                'value': tblResult.getvalue(),\n                'name': tblResultText.getvalue(),\n            }\n        else:\n            r = tblResult.getvalue()\n            \n    except Exception as e:\n        raise UserException(\n            'Ошибка вычисления таблицы решений {} для документа ({},{})'.format(\n                params['tblName'], params['idDep'], params['idOrd']\n            ).withError(e)\n        )\n    \n    if params.get('required') and params.get('required') == True and not r:\n         raise UserException('Таблица решений %s не определила решение. Настройте таблицу.' % (params['tblName'])) from None\n\n    return r\n    \ndata = evalByOrd(parameters)\n"
            }
        },
        "eval": {
            "script": {
                "py": "import json\n\ndef eval_dectbl(params):\n    \n        connection = initDbSession(application='bank')\n        with connection.cursor() as cursor:\n    \n            p = {\n                'tblName': params['tblName'],\n                'tblParams': json.dumps(params.get('params'), ensure_ascii=False),\n                'needAll': params.get('needAll'), \n                'result': cursor.var(str),\n            }\n    \n            cursor.execute(\"\"\"\n                declare\n                    dl C_PkgDecTbl.tDecisionList;\n                    idTbl integer;\n                    jParams json_object_t;\n                    jResultList json_array_t;\n                    jResultRec json_object_t;\n                    tblParam C_PkgDecTbl.tNamedAttr;\n                    tblParams C_PkgDecTbl.tNamedAttrList;\n                    keys JSON_KEY_LIST;\n                    i integer;\n                    \n                begin\n                    jParams := treat(json_element_t.parse(nvl(:tblParams, '{}')) as json_object_t);\n                    keys := jParams.get_keys();\n                    i := keys.first();\n                    while i is not null loop\n                        tblParam.ATTR_NAME := keys(i);\n                        tblParam.VALUE := jParams.get_String(keys(i));\n                        tblParams(i) := tblParam;\n                        i := keys.next(i);\n                    end loop;\n                    \n                    dl := C_PkgDecTbl.fDecisionAll(\n                        sTblAlias => :tblName,\n                        NamedList => tblParams,\n                        bFirst    => :needAll=0,\n                        UseInternalCache => true\n                    );\n                    \n                    jResultList := json_array_t();\n                    i := dl.first();\n                    while i is not null loop\n                        jResultRec := json_object_t();\n                        jResultRec.put('index', dl(i).NPP);\n                        jResultRec.put('value', dl(i).SOLUTION);\n                        jResultRec.put('name', dl(i).LONGNAME);\n                        \n                        jResultList.append(jResultRec);\n                        \n                        i := dl.next(i);\n                    end loop;\n                    \n                    :result := jResultList.to_string();\n                end;/\"\"\",\n                p\n            )\n    \n            jd = p['result'].getvalue()\n            \n            j = json.loads(jd)\n            return j\n\ndata = eval_dectbl(parameters)\n"
            },
            "sql": {}
        }
    },
    "references": {},
    "js": {}
}