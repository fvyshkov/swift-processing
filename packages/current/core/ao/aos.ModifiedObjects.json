{
    "forms": {
        "historyTask": {
            "title": "История объекта",
            "className": "vertical task task-panel",
            "style": {
                "height": "100%",
                "overflow": "hidden"
            },
            "$": {
                "@form": {
                    "style": {
                        "padding": "8px",
                        "overflow": "hidden"
                    },
                    "object": "aos.ModifiedObjects",
                    "form": "historyForm"
                }
            },
            "actions": {
                "onTaskCreated": [
                    {
                        "js": "return backend.post('/aos/getObjectInfo', {model: task.params.model, objectId: task.params.objectId}).then((r)=>{ mem.object=r;})"
                    },
                    {
                        "name": "onLoadHistory"
                    },
                    {
                        "js": "forceUpdate()"
                    }
                ],
                "onLoadHistory": {
                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'aos.ModifiedObjects', method: 'getObjectHistory', params: {model: task.params.model, objectId: task.params.objectId}}).then((r)=>{mem.history=r})"
                }
            }
        },
        "historyForm": {
            "className": "vertical",
            "style": {
                "height": "100%",
                "overflow": "hidden"
            },
            "$": {
                "@objectInfo": {
                    "object": "aos.ModifiedObjects",
                    "form": "objectInfoForm"
                },
                "@history": {
                    "title": "История изменения",
                    "style": {
                        "flexGrow": 1,
                        "overflow": "hidden"
                    },
                    "$": {
                        ".ap": {
                            "control": "ActionPanel",
                            "controlOpts": {
                                "actions": [
                                    {
                                        "title": "Обновить",
                                        "icon": "refresh",
                                        "mini": true,
                                        "action": [
                                            {
                                                "name": "onLoadHistory"
                                            },
                                            {
                                                "js": ";"
                                            }
                                        ]
                                    },
                                    {
                                        "title": "Сравнить",
                                        "action": [
                                            {
                                                "js": "return backend.post('/aoa/execObjectMethod', {object: 'aos.ModifiedObjects', method: 'getObject', params: {model: task.params.model, objectId: task.params.objectId}}).then((r)=>{context.objLeft=r})"
                                            },
                                            {
                                                "js": "return backend.post('/aoa/execObjectMethod', {object: 'aos.ModifiedObjects', method: 'getHistoryObject', params: {id: context.selectedHistory?.id}}).then((r)=>{context.objRight=r})"
                                            },
                                            {
                                                "js": "tm.newTask({title: 'Сравнение', path: '/aos/diffviewer', data: {diff: {left: {title: 'Объект в системе', data: context.objLeft}, right: {title: 'Объект в истории', data: context.objRight}}}})",
                                                "disableUpdate": true
                                            }
                                        ],
                                        "disabled$": "!context.selectedHistory"
                                    },
                                    {
                                        "title": "Установить",
                                        "action": [
                                            {
                                                "js": "return backend.post('/aoa/execObjectMethod', {object: 'aos.ModifiedObjects', method: 'installHistoryObject', params: {id: context.selectedHistory.id}})"
                                            },
                                            {
                                                "name": "onTaskCreated"
                                            }
                                        ],
                                        "disabled$": "!context.selectedHistory"
                                    }
                                ]
                            }
                        },
                        "@history": {
                            "style": {
                                "height": "100%",
                                "overflow": "auto"
                            },
                            "$": {
                                "|history": {
                                    "control": "ListTable",
                                    "controlOpts": {
                                        "columns!": {
                                            "created": {
                                                "label": "Дата",
                                                "width": 180,
                                                "format": "datetimesec"
                                            },
                                            "user": {
                                                "label": "Пользователь",
                                                "width": 160
                                            },
                                            "hash": {
                                                "label": "hash",
                                                "width": 300
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "onSelectionChanged": {
                            "js": "context.selectedHistory = selectedRow;"
                        }
                    }
                }
            }
        },
        "objectInfoForm": {
            "title": "Информация об объекте",
            "style": {
                "paddingTop": "4px"
            },
            "$": {
                "object": {
                    "className": "horizontal",
                    "$": {
                        "@g1": {
                            "className": "vertical",
                            "style": {
                                "flexGrow": 1
                            },
                            "$": {
                                "name": {
                                    "label": "Наименование объекта",
                                    "control": "TextEdit"
                                },
                                "file_name": {
                                    "label": "Имя файла",
                                    "control": "TextEdit"
                                }
                            }
                        },
                        "@g2": {
                            "className": "vertical",
                            "style": {
                                "flexGrow": 1
                            },
                            "$": {
                                "id": {
                                    "label": "Идентификатор объекта",
                                    "control": "TextEdit"
                                },
                                "hash": {
                                    "label": "hash",
                                    "control": "TextEdit"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "methods": {
        "getList": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from apng_core.aos.models import ModifiedObject\nfrom apng_core.aoa.services import applyFilterModel2, applySortModel\n\nquery = ModifiedObject.objects\n\nif parameters.get('id'):\n    query = query.filter(id=parameters['id'])\nelse:\n    filterModel2 = parameters['request'].get('filterModel2') if parameters.get('request') else None\n        \n    if filterModel2:\n        if 'package' in filterModel2:\n            from django.db.models import Exists, OuterRef, F, CharField\n            from django.db.models.functions import Cast\n            from apng_core.aos.models import PackageObject\n            \n            po = PackageObject.objects.filter(deployment_id=filterModel2['package'])\n\n            query = query.annotate(\n                id_str=Cast('object_id', output_field=CharField())\n            ).annotate(\n                isInPackage=Exists(po.filter(object_id=OuterRef('id_str')))\n            ).filter(isInPackage=True)\n            \n\n            del filterModel2['package']\n        \n        query = applyFilterModel2(query, filterModel2)\n    else:\n        query = query.all()\n    \n    if len(parameters.get('request', {}).get('sortModel', []))>0:\n        query = applySortModel(query, parameters['request']['sortModel'])\n    else: \n        query = query.order_by('-modified')\n    \n    if parameters.get('request', {}).get('startRow') is not None:\n        query = query[parameters['request']['startRow']:parameters['request']['endRow']]\n\ndata = []\nfor r in query:\n    data.append({\n        'id': r.id.__str__(),\n        'model_name': r.model_name,\n        'object_id': r.object_id,\n        'model_title': r.model_title,\n        'state': r.state,\n        'code': r.code,\n        'description': r.description,\n        'modified': r.modified,\n        'user': r.user,\n    })"
            }
        },
        "getObjectHistory": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from apng_core.aos.models import ObjectHistory\n\nl = ObjectHistory.objects.filter(model_name=parameters['model'], object_id=parameters['objectId']).order_by('-created')\n\ndata = []\nfor r in l:\n    data.append({\n        'id': r.id,\n        'created': r.created,\n        'user': r.user,\n        'hash': r.hash\n    })"
            }
        },
        "getObject": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from apng_core.aos import services as svc\n\ncfg = svc.loadObjectConfig(parameters['model'])\nobj = svc.loadObjectWithConfig(cfg, parameters['objectId'])\ndata = svc.evalExport(cfg, obj)['data']\n"
            }
        },
        "getHistoryObject": {
            "sql": {},
            "script": {
                "params": [],
                "py": "from apng_core.aos.models import ObjectHistory\n#from aos import services as svc\n\noh = ObjectHistory.objects.get(id=parameters['id'])\ndata = oh.data['data']\n \n#cfg = svc.loadObjectConfig(parameters['model'])\n#obj = svc.loadObjectWithConfig(cfg, parameters['objectId'])\n#data = svc.evalExport(cfg, obj)\n "
            }
        },
        "installHistoryObject": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from apng_core.aos.models import ObjectHistory\nfrom apng_core.aos import services as svc\n\nho = ObjectHistory.objects.get(id=parameters['id'])\n\nif ho.data.get('description') is None:\n    raise UserError('Историческая запись не содержит описания объекта, установка не возможна')\n\ncfg = svc.loadObjectConfig(ho.model_name)\nsvc.evalImport(cfg, ho.object_id, ho.data['data'], object_attrs=ho.data['description'].get('attrs'))\n"
            }
        },
        "exportObjectsToFolder": {
            "sql": {},
            "script": {
                "py": "#\n# Выгрузка объектов по списку в папки пакетов\n#\nfrom apng_core.aos.models import PackageObject\nfrom apng_core.aos.services import exportPackageObjectsToFolder\n\n# Строим список пакетов и объектов\nexport_list = {}\nfor oid in parameters['objects']:\n    for po in PackageObject.objects.filter(model_name=oid['model'], object_id=oid['objectId']):\n        pid = po.deployment.id.__str__()\n        if pid not in export_list:\n            export_list[pid] = []\n        export_list[pid].append(po.id.__str__())\n\n# Выгрузка в разрезе пакетов\nfor p in export_list.keys():\n    exportPackageObjectsToFolder({\n        'packageId': p,\n        'objects': export_list[p]\n    })\n\n"
            }
        },
        "getObjectTask": {
            "script": {
                "py": "#\n# Вычисление параметров запуска задачи ведения для объекта\n#\n# Входные параметры\n#   model - наименование модели\n#   objectId - идентификатор объекта\n# Выходные параметры\n#   объект запуска задачи\nfrom apng_core.aos import services as svc\n\ncfg = svc.loadObjectConfig(parameters['model']).parsed\n\nif cfg.get('task') is None or cfg.get('task', {}).get('path') is None or cfg.get('task', {}).get('path') == '':\n    raise UserError('Для модели %s не настроена задача ведения' % parameters['model'])\n    \ntask = {\n    'path': cfg['task']['path'],\n    'params': {}\n}\nfor p in cfg['task'].get('parameters', []):\n    ctx = {\n        **globals(),\n        'objectId': parameters['objectId'],\n    }\n    value = None\n    if p.get('expression') is not None and p['expression'] != '':\n        try:\n            value = eval(p['expression'], ctx)\n        except Exception as e:\n            raise UserException('Ошибка вычисления параметра задачи %s' % p['name']).withError(e)\n            \n    task['params'][p['name']] = value\n    \ndata = task\n"
            },
            "sql": {}
        },
        "downloadCustomPackage": {
            "script": {
                "py": "import os\nimport io\nimport uuid\nimport zipfile\n\nfrom apng_core.aos import services as svc\n\n\nfrom django.http import HttpResponse\n\n\npackageInfo = {\n    'packageId': uuid.uuid4().__str__(),\n    'packageName': 'custom',\n    'type': 'custom',\n    'configs': [],\n    'content': [],\n}\n\nconfigs = {}\n\n# Создаём архив\nzip_buffer = io.BytesIO()\nzh = zipfile.ZipFile(zip_buffer, \"a\", zipfile.ZIP_DEFLATED, False)\n\n\nfor o in parameters['objects']:\n    if o['model'] not in configs:\n        configs[o['model']] = svc.loadObjectConfig(o['model'])\n        \n    cfg = configs[o['model']]\n    #raise UserException('%s' % cfg)\n    obj = svc.loadObjectWithConfig(cfg, o['objectId'])\n    dsc = svc.evalDescription(cfg, obj)\n    obj_data = svc.evalExport(cfg, obj)['data']\n    \n    file_name = os.path.join(dsc.get('file_path'), dsc.get('file_name'))\n    packageInfo['content'].append({\n            'model_name': cfg.model_name,\n            'model_title': cfg.name,\n            'object_id': o['objectId'],\n            'object_name': dsc.get('name'),\n            'object_attrs': dsc.get('attrs'),\n            'file_name': file_name,\n    })\n    \n    zh.writestr(file_name, obj_data);\n    \n\nzh.writestr('.package.info', json.dumps(packageInfo, ensure_ascii=False, indent=4))\n\nzh.close()\n\nbinary = zip_buffer.getvalue()\n\ndata = HttpResponse(\n    content_type=\"application/zip\", \n    content=zip_buffer.getvalue(),\n)\ndata['Content-Disposition'] = 'inline; filename=\"%s\"' % ('package_custom.zip')\n\n    \n#raise UserException('%s' % json.dumps(packageInfo, indent=4, ensure_ascii=False))"
            },
            "sql": {}
        },
        "getObjectPackages": {
            "sql": {},
            "script": {
                "py": "from apng_core.aos.models import PackageObject\n\npol = PackageObject.objects.filter(model_name=parameters['model_name'], object_id=parameters['object_id']).all()\n\ndata = []\nfor p in pol:\n    data.append({\n        'id': p.deployment.id.__str__(),\n        'name': p.deployment.name\n    })\n"
            }
        }
    },
    "lists": {
        "default": {
            "id": "id",
            "getRowStyle": "data?.state=='modified'?{color: 'red'}:undefined",
            "rowSelection": "multiple",
            "columns": {
                "model_title": {
                    "title": "Вид объекта",
                    "width": 180
                },
                "code": {
                    "title": "Код",
                    "width": 180
                },
                "description": {
                    "title": "Описание",
                    "flex": 1
                },
                "state": {
                    "title": "Сотсояние",
                    "width": 150
                },
                "modified": {
                    "title": "Дата",
                    "width": 160,
                    "format": "datetime"
                },
                "user": {
                    "title": "Пользователь",
                    "width": 160
                }
            },
            "actions": [
                {
                    "title": "Обновить",
                    "icon": "refresh",
                    "mini": true,
                    "command": {
                        "type": "standard",
                        "call": "refresh"
                    }
                },
                {
                    "title": "Открыть",
                    "icon": "view",
                    "mini": true,
                    "command": {
                        "js": "backend.post('/aoa/execObjectMethod', {object: 'aos.ModifiedObjects', method: 'getObjectTask', params: {objectId: $listRow.object_id, model: $listRow.model_name}}).then((t)=>{tm.newTask(t)})"
                    },
                    "disabled": "$listRows?.length!=1"
                },
                {
                    "title": "Инструменты",
                    "actions": [
                        {
                            "title": "Пакеты",
                            "command": {
                                "type": "js",
                                "js": "frontend.dialog({object: 'package', form: 'objectPackageDialog', mem: {}, params: {objectId: $listRow.object_id, model: $listRow.model_name}, context: {}})"
                            },
                            "disabled": "!$listRow || $listRows?.length>1"
                        },
                        {
                            "title": "История",
                            "command": {
                                "type": "task",
                                "call": "/aoa/ObjectTask",
                                "title$": "`История объекта ${$listRow.description}`",
                                "params": {
                                    "object": "aos.ModifiedObjects",
                                    "form": "historyTask",
                                    "model$": "$listRow.model_name",
                                    "objectId$": "$listRow.object_id"
                                }
                            },
                            "disabled": "!$listRow || $listRows?.length>1"
                        }
                    ],
                    "disabled": "!$listRows?.length>0"
                },
                {
                    "title": "Объект",
                    "actions": [
                        {
                            "title": "Сравнить с папкой",
                            "command": {
                                "js": "backend.post('/aoa/execObjectMethod', {object: 'aos.ModifiedObjects', method: 'getObjectPackages', params: {object_id: $listRow.object_id, model_name: $listRow.model_name}}).then((r)=>r[0]).then((r)=>backend.post('/aos/getObjectForCompare', {id: r.id, objectId: $listRow.object_id, storage: 'path'})).then((r)=>{tm.newTask({path: '/aos/diffviewer', title: `Сравнение объекта ${$listRow.code}`, data: {diff: r}});})",
                                "disableUpdate": true
                            },
                            "disabled": "!($listRows?.length==1)"
                        },
                        {
                            "title": "Выгрузить в папку",
                            "command": {
                                "js": "backend.post('/aoa/execObjectMethod', {object: 'aos.ModifiedObjects', method: 'exportObjectsToFolder', params: {objects: $listRows.map((r)=>({model: r.model_name, objectId: r.object_id}))}}).then(()=>{task.events.fireEvent('onRefreshSelected')})",
                                "disableUpdate": true
                            },
                            "disabled": "!($listRows?.length>0)"
                        },
                        {
                            "title": "Сравнить с дистрибутивом",
                            "command": {
                                "js": "backend.post('/aoa/execObjectMethod', {object: 'aos.ModifiedObjects', method: 'getObjectPackages', params: {object_id: $listRow.object_id, model_name: $listRow.model_name}}).then((r)=>r[0]).then((r)=>backend.post('/aos/getObjectForCompare', {id: r.id, objectId: $listRow.object_id, storage: 'zip'})).then((r)=>{tm.newTask({path: '/aos/diffviewer', title: `Сравнение объекта ${$listRow.code}`, data: {diff: r}});})",
                                "disableUpdate": true
                            },
                            "disabled": "!($listRows?.length==1)"
                        },
                        {
                            "title": "Скачать пакетом",
                            "command": {
                                "js": "backend.post('/aoa/execObjectMethod', {object: 'aos.ModifiedObjects', method: 'downloadCustomPackage', params: {objects: $listRows.map((r)=>({model: r.model_name, objectId: r.object_id}))}}).then((r)=>{fileDownload(r.blob, r.fileName)})",
                                "disableUpdate": true
                            },
                            "disabled": "!($listRows?.length>0)",
                            "visible": true
                        }
                    ],
                    "disabled": "!($listRows?.length>0)"
                }
            ],
            "filter": {
                "form": {
                    "style": {
                        "width": "360px",
                        "overflow": "hidden",
                        "paddingRight": "0px"
                    },
                    "title": "Фильтр",
                    "className": "panel vertical",
                    "$": {
                        "@fields": {
                            "className": "vertical",
                            "style": {
                                "paddingTop": "8px",
                                "paddingRight": "8px",
                                "overflowY": "auto",
                                "flexGrow": 1
                            },
                            "$": {
                                "state": {
                                    "label": "Состояние",
                                    "control": "SelectList",
                                    "controlProps": {
                                        "list": [
                                            {
                                                "value": "modified",
                                                "name": "Изменен"
                                            },
                                            {
                                                "value": "imported",
                                                "name": "Импортирован"
                                            },
                                            {
                                                "value": "exported",
                                                "name": "Экспортирован"
                                            },
                                            {
                                                "value": "deleted",
                                                "name": "Удален"
                                            }
                                        ]
                                    }
                                },
                                "user": {
                                    "label": "Пользователь",
                                    "control": "TextEdit"
                                },
                                "code": {
                                    "label": "Код",
                                    "control": "TextEdit"
                                },
                                "package": {
                                    "label": "Пакет",
                                    "control": "ObjectSelectList",
                                    "controlProps": {
                                        "object": "package",
                                        "method": "getList",
                                        "params": {}
                                    },
                                    "controlOpts": {
                                        "translate": {
                                            "value": "id",
                                            "name": "name"
                                        }
                                    }
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnClear": {
                                    "control": "Button",
                                    "label": "Очистить",
                                    "controlProps": {
                                        "variant": "outlined",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "clean"
                                    }
                                },
                                "btnApply": {
                                    "control": "Button",
                                    "label": "Применить",
                                    "controlProps": {
                                        "variant": "contained",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "js": "actions.apply(mem);",
                                        "disableUpdate": true
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "clean": {
                            "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                        }
                    }
                }
            }
        }
    },
    "references": {},
    "js": {}
}