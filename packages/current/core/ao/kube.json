{
    "forms": {
        "podsForm": {
            "title": "Pods",
            "className": "vertical",
            "style": {
                "height": "100%"
            },
            "$": {
                "@c": {
                    "title": "Виртуальные машины",
                    "className": "vertical",
                    "style": {
                        "height": "100%"
                    },
                    "$": {
                        ".ap": {
                            "control": "ActionPanel",
                            "controlOpts": {
                                "actions": [
                                    {
                                        "title": "Обновить",
                                        "icon": "refresh",
                                        "mini": true,
                                        "action": {
                                            "js": "task.events.fireEvent('onRefreshPods');"
                                        }
                                    }
                                ]
                            }
                        },
                        ".components": {
                            "style": {
                                "flexGrow": 1
                            },
                            "control": "ListTable",
                            "controlOpts": {
                                "rowModelType": "infinite",
                                "id": "id",
                                "refreshEvent": "onRefreshPods",
                                "columns!": {
                                    "name": {
                                        "label": "Имя",
                                        "flex": 1,
                                        "compact": true,
                                        "getter": "data?.metadata?.name"
                                    },
                                    "date": {
                                        "label": "Дата",
                                        "compact": true,
                                        "getter": "data?.metadata?.creationTimestamp",
                                        "format": "datetime",
                                        "width": 140
                                    },
                                    "version": {
                                        "label": "Версия",
                                        "compact": true,
                                        "getter": "data?.metadata?.annotations?.version",
                                        "width": 80
                                    },
                                    "status": {
                                        "label": "Статус",
                                        "width": 120,
                                        "compact": true,
                                        "getter": "data?.status?.phase"
                                    }
                                }
                            },
                            "controlProps": {
                                "style": {
                                    "height": "100%"
                                },
                                "gridOptions": {
                                    "domLayout": "normal"
                                }
                            },
                            "actions": {
                                "onGetRows": {
                                    "js": "backend.post('/aoa/execObjectMethod', {object: 'kube', method: 'pods'}).then((r)=>{onSuccess(r.items)})"
                                }
                            }
                        }
                    }
                }
            }
        },
        "deploymentForm": {
            "title": "Deployment",
            "className": "vertical",
            "$": {
                "@deployment": {
                    "className": "vertical",
                    "title": "Приложение",
                    "$": {
                        "deployment": {
                            "className": "vertical",
                            "init$": "action({name: 'onLoadDeployment'})||{}",
                            "$": {
                                "metadata": {
                                    "$": {
                                        "creationTimestamp": {
                                            "label": "Дата установки",
                                            "control": "TextEdit",
                                            "getter": "formatters.datetime(mem.creationTimestamp, true)"
                                        }
                                    }
                                },
                                ".image": {
                                    "label": "Имидж",
                                    "control": "TextEdit",
                                    "getter": "mem?.spec?.template?.spec?.containers?.[0]?.image"
                                }
                            }
                        }
                    }
                }
            },
            "actions": {
                "onLoadDeployment": {
                    "js": "backend.post('/aoa/execObjectMethod', {object: 'kube', method: 'deployments'}, {silent: true}).then((r)=>{mem.deployment=r;});"
                }
            }
        }
    },
    "methods": {
        "kube": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "import requests\nimport urllib\nimport traceback\n\nclass Kube:\n    def __init__(self, **kwargs):\n        if not 'url' in kwargs:\n            raise Exception('Не задана ссылка для kubernetes')\n        if not 'token' in kwargs:\n            raise Exception('Не задан токен авторизации kubernetes')\n        if not 'namespace' in kwargs:\n            raise Exception('Не задан namespace')\n        \n        self.host = kwargs['url']\n        self.url = kwargs['url']+'/api/v1'\n        self.token = kwargs['token']\n        self.namespace = kwargs['namespace']\n    \n    def __enter__(self):\n        return self\n    \n    def __exit__(self, type, value, traceback):\n        pass    \n    \n    def get(self, url):\n    \n        try:\n            response = requests.get(\n                url,\n                headers = {\n                    'Authorization': 'Bearer %s' % self.token\n                },\n               verify=False\n            )\n            \n        except Exception as e:\n            raise UserException({\n                'message': 'Ошибка подключения к %s\\n%s' % (url, e),\n                'trace': traceback.format_exc()\n            })\n            \n        if response.status_code != 200:\n            try:\n                j = json.loads(response.text)\n                msg_text = json.dumps(j, indent=4, ensure_ascii=False)\n            except:\n                msg_text = response.text\n                \n            raise UserException({\n                'message': 'Ошибка запроса %s\\n%s' % (url, msg_text)\n            })\n            \n        return response\n            \n    \n    def getPods(self, **kwargs):\n        url_path = self.host+'/api/v1/namespaces/{namespace}/pods'.format(namespace=self.namespace)\n        \n        if len(kwargs)>0:\n            url_path = url_path + '?'\n            for p in kwargs:\n                if p=='label':\n                    url_path=url_path+'labelSelector=' + kwargs['label']\n            \n        response = self.get(url_path)\n        return json.loads(response.content)\n        \n    def getDeployments(self, deployment=None):\n        request_url = '/apis/apps/v1/namespaces/{namespace}/deployments'.format(namespace=self.namespace)\n        if deployment:\n            request_url = request_url + '/' + deployment\n        \n        response = self.get(self.host + request_url)\n        \n        return json.loads(response.content)\n        \ndata = Kube(**parameters)"
            }
        },
        "pods": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from django.conf import settings\nfrom apng_core.aoa.services import execObjectMethod\n\nif not hasattr(settings, 'CIDI') or settings.CIDI.get('KUBE') is None:\n    raise UserException('Не настроена интеграция с Kubernetes, CIDI.KUBE')\n    \nkube = settings.CIDI['KUBE']\n\n\n#if not gitlab.get('project'):\n#    raise UserException('Не задан проект gitlab: project')\n\nwith execObjectMethod({'object': 'kube', 'method': 'kube', 'params': kube}) as g:\n    p = g.getPods(label='app='+kube.get('deployment'))\n    \n    data = p\n\n"
            }
        },
        "deployments": {
            "sql": {
                "params": []
            },
            "script": {
                "params": [],
                "py": "from django.conf import settings\nfrom apng_core.aoa.services import execObjectMethod\n\nif not hasattr(settings, 'CIDI') or settings.CIDI.get('KUBE') is None:\n    raise UserException('Не настроена интеграция с Kubernetes, CIDI.KUBE')\n    \nkube = settings.CIDI['KUBE']\n\n\n#if not gitlab.get('project'):\n#    raise UserException('Не задан проект gitlab: project')\n\nwith execObjectMethod({'object': 'kube', 'method': 'kube', 'params': kube}) as g:\n    p = g.getDeployments(kube.get('deployment'))\n    \n    data = p\n\n"
            }
        }
    },
    "reference": {
        "method": {}
    }
}