{
    "lists": {
        "default": {
            "columns": {
                "DVAL": {
                    "title": "Дата",
                    "width": 120,
                    "fields": {
                        "DVAL": {
                            "format": "date"
                        }
                    }
                },
                "TXT_PAY": {
                    "title": "Отправитель",
                    "flex": 1
                },
                "TXT_BEN": {
                    "title": "Получатель",
                    "flex": 1
                },
                "SDOK": {
                    "title": "Сумма",
                    "cellStyle": {
                        "textAlign": "right"
                    },
                    "fields|": {
                        "NSDOK": {
                            "format": "currency"
                        },
                        "VAL_CODE": {}
                    }
                },
                "STATE_CODE": {
                    "title": "Состояние",
                    "width": 175,
                    "control": "chip",
                    "decode": {
                        "DEL": {
                            "value": "Удален",
                            "color": "#2D9CDB"
                        },
                        "POST": {
                            "value": "Исполнен",
                            "color": "#F2994A"
                        },
                        "FIN": {
                            "value": "Подтвержден",
                            "color": "#F2994A"
                        },
                        "READY2SEND": {
                            "value": "Передан на отправку",
                            "color": "#00AA44"
                        },
                        "STF": {
                            "value": "Штафель",
                            "color": "#00AA44"
                        },
                        "WAITROUTE": {
                            "value": "Требует маршрутизации",
                            "color": "#EB5757"
                        }
                    }
                }
            },
            "id": "ID",
            "actions": [
                {
                    "title": "Refresh",
                    "icon": "refresh",
                    "mini": true,
                    "command": {
                        "type": "standard",
                        "call": "refresh"
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "View",
                    "icon": "view",
                    "mini": true,
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "",
                        "params": {
                            "object": "swiftOutcome",
                            "form": "appEditTask",
                            "objectKey$": "{dep_id: $listRow.DEP_ID, id: $listRow.ID}"
                        }
                    }
                },
                {
                    "title": "Операции",
                    "split": true,
                    "actions": [
                        {
                            "title": "Отправить",
                            "command": {
                                "type": "js",
                                "js": "backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'send', params: {dep_id: $listRow.DEP_ID, id: $listRow.ID}})"
                            },
                            "confirm": {
                                "message$": "`Отправить?`",
                                "yes": "Yes",
                                "no": "No"
                            },
                            "disabled$": "['DEL', 'TEST'].includes($listRow.STATE_CODE) "
                        },
                        {
                            "title": "Отмена отправки",
                            "command": {
                                "type": "js",
                                "js": "backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'sendUndo', params: {dep_id: $listRow.DEP_ID, id: $listRow.ID}})"
                            },
                            "confirm": {
                                "message$": "`Отменить отправку?`",
                                "yes": "Yes",
                                "no": "No"
                            },
                            "visible$": "['DEL', 'TEST'].includes($listRow.STATE_CODE) "
                        }
                    ],
                    "disabled$": "!$listRow"
                }
            ],
            "filter": {
                "form": {
                    "style": {
                        "width": "360px",
                        "overflow": "hidden",
                        "paddingRight": "0px"
                    },
                    "title": "Filter",
                    "className": "panel vertical",
                    "$": {
                        "@fields": {
                            "className": "vertical",
                            "style": {
                                "paddingRight": "8px",
                                "overflowY": "auto"
                            },
                            "$": {
                                "@app": {
                                    "title": "Payment",
                                    "className": "vertical",
                                    "$": {
                                        "@period": {
                                            "$": {
                                                "@chips": {
                                                    "$": {
                                                        "week": {
                                                            "label": "Week",
                                                            "action": {
                                                                "name": "setWeek"
                                                            },
                                                            "control": "Chip",
                                                            "controlProps": {
                                                                "style": {
                                                                    "height": "24px"
                                                                }
                                                            }
                                                        },
                                                        "month": {
                                                            "label": "Month",
                                                            "action": {
                                                                "name": "setMonth"
                                                            },
                                                            "control": "Chip",
                                                            "controlProps": {
                                                                "style": {
                                                                    "height": "24px"
                                                                }
                                                            }
                                                        },
                                                        "3months": {
                                                            "label": "3 Months",
                                                            "action": {
                                                                "name": "set3Months"
                                                            },
                                                            "control": "Chip",
                                                            "controlProps": {
                                                                "style": {
                                                                    "height": "24px"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "className": "horizontal"
                                                },
                                                "@dates": {
                                                    "$": {
                                                        "fromDate": {
                                                            "label": "From",
                                                            "style": {
                                                                "flexGrow": 1
                                                            },
                                                            "control": "DateEdit"
                                                        },
                                                        "toDate": {
                                                            "label": "To",
                                                            "style": {
                                                                "flexGrow": 1
                                                            },
                                                            "control": "DateEdit"
                                                        }
                                                    },
                                                    "className": "horizontal"
                                                }
                                            },
                                            "actions": {
                                                "setWeek": {
                                                    "jsScript": "let dt = new Date(); let df = new Date(); df.setDate(df.getDate()-7); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                                },
                                                "setMonth": {
                                                    "jsScript": "let dt = new Date(); let df = new Date(); df.setMonth(df.getMonth()-1); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                                },
                                                "set3Months": {
                                                    "jsScript": "let dt = new Date(); let df = new Date(); df.setMonth(df.getMonth()-3); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                                }
                                            },
                                            "className": "vertical"
                                        },
                                        "txtPay": {
                                            "label": "Sender",
                                            "control": "TextEdit"
                                        },
                                        "txtBen": {
                                            "control": "TextEdit",
                                            "label": "Receiver"
                                        },
                                        "state": {
                                            "label": "State",
                                            "control": "SelectList",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "value": "Удален",
                                                        "name": "Удален"
                                                    },
                                                    {
                                                        "value": "Подтвержден",
                                                        "name": "Подтвержден"
                                                    },
                                                    {
                                                        "value": "Исполнен",
                                                        "name": "Исполнен"
                                                    },
                                                    {
                                                        "value": "Передан на отправку",
                                                        "name": "Передан на отправку"
                                                    },
                                                    {
                                                        "value": "Штафель",
                                                        "name": "Штафель"
                                                    },
                                                    {
                                                        "value": "Требует маршрутизации",
                                                        "name": "Требует маршрутизации"
                                                    }
                                                ]
                                            }
                                        },
                                        "userName": {
                                            "control": "TextEdit",
                                            "label": "Initiator"
                                        }
                                    }
                                },
                                "@loan": {
                                    "className": "vertical",
                                    "title": "Amount",
                                    "$": {
                                        "@amount": {
                                            "className": "horizontal",
                                            "$": {
                                                "minAmount": {
                                                    "control": "CurrencyField",
                                                    "label": "Amount from"
                                                },
                                                "maxAmount": {
                                                    "control": "CurrencyField",
                                                    "label": "Amount to"
                                                }
                                            }
                                        },
                                        "currency": {
                                            "control": "SelectList",
                                            "label": "Currency",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "name": "UZS",
                                                        "value": "UZS"
                                                    },
                                                    {
                                                        "name": "USD",
                                                        "value": "USD"
                                                    },
                                                    {
                                                        "name": "EUR",
                                                        "value": "EUR"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnClear": {
                                    "control": "Button",
                                    "label": "Clear",
                                    "controlProps": {
                                        "variant": "outlined",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "clean"
                                    }
                                },
                                "btnApply": {
                                    "control": "Button",
                                    "label": "Apply",
                                    "controlProps": {
                                        "variant": "contained",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "js": "actions.apply(mem);",
                                        "params": {
                                            "disableUpdate": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "clean": {
                            "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                        }
                    }
                },
                "query": {
                    "fromDate": {
                        "sql": "dval >= to_date(:fromDate, 'yyyy-mm-dd')"
                    },
                    "toDate": {
                        "sql": "dval <= to_date(:toDate, 'yyyy-mm-dd')"
                    },
                    "state": {
                        "sql": "state = :state"
                    },
                    "txtPay": {
                        "sql": "upper(txt_pay) like '%%'||upper(:txtPay)||'%%'"
                    },
                    "txtBen": {
                        "sql": "upper(txt_Ben) like '%%'||upper(:txtBen)||'%%'"
                    },
                    "maxAmount": {
                        "sql": "nsdok <= :maxAmount"
                    },
                    "minAmount": {
                        "sql": "nsdok >= :minAmount"
                    },
                    "currency": {
                        "sql": "val_code = :currency"
                    }
                }
            },
            "events": {
                "onTaskCreated": [
                    {
                        "js": "task.data.$isFilterOpen = true;"
                    }
                ],
                "onRowDoubleClicked": {
                    "js": "tm.newTask({path: '/aoa/ObjectTask', title: `Заявка ${$listRow.appNo} от ${$formatters.date($listRow.dord)}`, params: {object: 'app', form: 'appEditTask', objectKey: {dep_id: params.selectedRow.dep_id, id: params.selectedRow.id}, componentPath: params.selectedRow.baseComponent}})"
                }
            }
        }
    },
    "forms": {
        "editFormInner": {
            "title": "Исходящее сообщение",
            "className": "vertical",
            "style": {
                "width": "860px"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "padding": "4px"
                    },
                    "$": {
                        "@info": {
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@cost": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "amount": {
                                                    "label": "Сумма",
                                                    "style": {
                                                        "width": "300px"
                                                    },
                                                    "control": "CurrencyField",
                                                    "controlOpts": {
                                                        "currencyAttr": "currency_code"
                                                    },
                                                    "readOnly$": true
                                                },
                                                "dval": {
                                                    "label": "Дата валютирования",
                                                    "style": {
                                                        "width": "200px"
                                                    },
                                                    "control": "DateEdit",
                                                    "readOnly$": true
                                                },
                                                "uetr_code": {
                                                    "label": "Номер",
                                                    "style": {
                                                        "width": "350px"
                                                    },
                                                    "control": "TextEdit",
                                                    "readOnly$": true
                                                }
                                            }
                                        },
                                        "message": {
                                            "label": "Сообщение",
                                            "readOnly$": true,
                                            "style": {
                                                "width": "860px"
                                            },
                                            "control": "TextEdit",
                                            "controlProps": {
                                                "multiline": true,
                                                "minRows": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@sender": {
                            "title": "Отправитель",
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@send": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "snd_acc": {
                                                    "label": "Счет",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "snd_name": {
                                                    "label": "Наименование",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        },
                                        "@bank-send": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "snd_bank": {
                                                    "label": "БИК",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "snd_bank_name": {
                                                    "label": "Наименование банка",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        },
                                        "@bank-corr-send": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "snd_mid_bank_acc": {
                                                    "label": "Корреспондентский счет",
                                                    "style": {
                                                        "width": "250px"
                                                    },
                                                    "control": "ObjectReference",
                                                    "controlProps": {
                                                        "object": "swiftBankAccount"
                                                    },
                                                    "readOnly$": true,
                                                    "actions": {
                                                        "onChange": [
                                                            {
                                                                "js": "const copy = { ...params.row }; console.log(mem); mem.snd_mid_bank = copy.BANK; mem.snd_mid_bank_acc_val = copy.VAL_CODE; mem.snd_mid_bank_acc = copy.ACC_CODE; mem.snd_mid_bank_name = copy.BANK_NAME;  "
                                                            }
                                                        ]
                                                    }
                                                },
                                                "snd_mid_bank": {
                                                    "label": "БИК",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "150px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "snd_mid_bank_acc_val": {
                                                    "label": "Валюта",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "70px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "snd_mid_bank_name": {
                                                    "label": "Наименование банка",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "360px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        },
                                        "snd_address": {
                                            "label": "Адрес",
                                            "readOnly$": true,
                                            "style": {
                                                "width": "860px"
                                            },
                                            "control": "TextEdit",
                                            "controlProps": {
                                                "multiline": true,
                                                "minRows": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@receiver": {
                            "title": "Получатель",
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@bank-send": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "rcv_bank": {
                                                    "label": "БИК",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "rcv_bank_name": {
                                                    "label": "Наименование банка",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        },
                                        "@rcv": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "rcv_acc": {
                                                    "label": "Счет",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "rcv_name": {
                                                    "label": "Наименование",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        },
                                        "rcv_address": {
                                            "label": "Адрес",
                                            "readOnly$": true,
                                            "style": {
                                                "width": "860px"
                                            },
                                            "control": "TextEdit",
                                            "controlProps": {
                                                "multiline": true,
                                                "minRows": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@out_fields": {
                            "title": "Исходящая информация, получатель",
                            "className": "vertical",
                            "style": {
                                "padding": "4px",
                                "margin-top": "10px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@row-111": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "rcv_postal_code": {
                                                    "label": "Почтовый индекс",
                                                    "style": {
                                                        "width": "300px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "rcv_country": {
                                                    "label": "Страна получателя",
                                                    "style": {
                                                        "width": "500px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "rcv_region": {
                                                    "label": "Регион/область",
                                                    "style": {
                                                        "width": "500px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        },
                                        "@row-2222": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "rcv_city": {
                                                    "label": "Город получателя",
                                                    "style": {
                                                        "width": "500px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "rcv_street": {
                                                    "label": "Улица",
                                                    "style": {
                                                        "width": "500px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "rcv_building": {
                                                    "label": "Номер здания",
                                                    "style": {
                                                        "width": "300px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@record-1": {
                            "title": "Сформированное сообщение",
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "content": {
                                            "style": {
                                                "height": "200px",
                                                "overflow": "hidden",
                                                "width": "860px"
                                            },
                                            "control": "AceEditor",
                                            "controlProps": {
                                                "editorId": "listFormEdit",
                                                "mode": "xml"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "justifyContent": "end"
                    },
                    "$": {
                        "btnGetXML": {
                            "label": "Сформировать XML",
                            "control": "Button",
                            "controlProps": {
                                "variant": "outlined",
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'recalcXML', params: {app: mem}}).then((r)=>{ tm.setTaskTitle(task.key, `Исходящее сообщение`); })"
                                },
                                {
                                    "js": "return !task.params?.componentPath && task.params?.objectKey && backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'get', params: {...task.params.objectKey}}).then((r)=>{mem.record=r; mem.out_fields =r;if(!task.params.taskId)action({name: 'onSetTaskTitle'});  forceUpdate();})"
                                }
                            ]
                        },
                        "btnRecalc": {
                            "label": "Пересчитать исходящую информацию",
                            "control": "Button",
                            "controlProps": {
                                "variant": "outlined",
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'recalc', params: {app: mem}}).then((r)=>{ tm.setTaskTitle(task.key, `Исходящее сообщение`); })"
                                },
                                {
                                    "js": "return !task.params?.componentPath && task.params?.objectKey && backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'get', params: {...task.params.objectKey}}).then((r)=>{mem.record=r; mem.out_fields =r;if(!task.params.taskId)action({name: 'onSetTaskTitle'});  forceUpdate();})"
                                }
                            ]
                        },
                        "btnCancel": {
                            "label": "Отмена",
                            "control": "Button",
                            "controlProps": {
                                "variant": "outlined",
                                "color": "primary"
                            },
                            "action": {
                                "js": "frontend.closeTask()",
                                "disableUpdate": true
                            }
                        },
                        "btnApply": {
                            "label": "Сохранить",
                            "control": "Button",
                            "controlProps": {
                                "variant": "contained",
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "if (!validate()){throw 'Abort';}"
                                },
                                {
                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'save', params: {app: mem}}).then((r)=>{ tm.setTaskTitle(task.key, `Paymment`); })"
                                },
                                {
                                    "js": "frontend.closeTask()"
                                }
                            ]
                        }
                    }
                }
            }
        },
        "appEditTask": {
            "title": "SWIFT Income",
            "className": "vertical task task-panel",
            "style": {
                "height": "100%",
                "overflow": "hidden"
            },
            "$": {
                "@form": {
                    "style": {
                        "padding": "8px",
                        "overflow": "auto"
                    },
                    "form": "editFormInner"
                }
            },
            "actions": {
                "onTaskCreated": [
                    {
                        "js": "return !task.params?.componentPath && task.params?.objectKey && backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'get', params: {...task.params.objectKey}}).then((r)=>{mem.record=r; mem.out_fields =r;if(!task.params.taskId)action({name: 'onSetTaskTitle'});  forceUpdate();})"
                    },
                    {
                        "js": "if(task.params.app){mem.app = task.params.app} else if(!task.params?.componentPath && !task.params?.objectKey){mem.app = task.data.forms}"
                    },
                    {
                        "js": "context.readOnly = (task.params && 'readOnly' in task.params)?task.params.readOnly : mem.app?.state && mem.app?.state != 'START'"
                    }
                ],
                "onSetTaskTitle": {
                    "js": "tm.setTaskTitle(task.key, `Payment`);"
                }
            }
        }
    },
    "methods": {
        "getList": {
            "script": {
                "py": "import time\nfrom apng_core.db import fetchall\nimport logging\nlogger = logging.getLogger('loanapp')\n\n\ndef filterModelRank(filterModel):\n    default_rank = 1\n    ranks = {\n        'appId': 1000,\n        'appNo': 1000,\n        'fromDate': 0,\n        'toDate': 0,\n    }\n    \n    rank = 0\n    \n    for k in filterModel.keys():\n        r = ranks.get(k)\n        if r:\n            rank += r\n        else:\n            rank += default_rank\n    return rank\n\ndef doQuery(sql, params):\n    with initDbSession(application='colvir_cbs').cursor() as cursor:\n        #print(sql)\n        start_time = time.time()\n        cursor.execute(sql, params)\n        #logger.debug('getApplicationList execute in %0.2f', time.time()-start_time)\n        \n        start_time = time.time()\n        d = fetchall(cursor)\n        #logger.debug('getApplicationList fetch in %0.2f', time.time()-start_time)\n\n    return d\n\ndef getApplicationList(params):\n    \n    rawSQL =\"\"\"\n      --begin c_pkgconnect.pOpen; end;\n--begin c_pkgconnect.popen; end;\n\nselect /*+ rule*/\n  J.DVAL, J.DEP_ID, J.ID, \n  J.REFER,\n  J.DIMPORT,\n  SUBSTR(T_PKGMONEY.FTRNVALUETOMONEY(J.SDOK),1,27) as SDOK,\n  J.SDOK as NSDOK,\n -- P_PKGORD_UTL.fGetCodeBclExt(j.DEP_ID, j.ID) as CODE_BCL,\n  --P_PKGORD_UTL.fGetCodeAclExt(j.DEP_ID, j.ID) as CODE_ACL,\n  --P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID) as CODE_BCR,\n  --P_PKGORD_UTL.fGetCodeAcrExt(j.DEP_ID, j.ID) as CODE_ACR,\n  SUBSTR(decode(j.INCOMFL, '1', TXT_BEN, TXT_PAY),1,250) TXT_PAY,\n  SUBSTR(decode(j.INCOMFL, '1', TXT_PAY, TXT_BEN),1,250) TXT_BEN,\n  j.MIDDLE_BNK_1, j.MIDDLE_ACC_1,\n  O.POSTFL,O.FLZO,\n  nvl(J.PAYORD_CODE, O.CODE) as ORD_CODE,\n  O.DRECV,O.VAL_ID, J.PRIORITY,\n  V.CODE as VAL_CODE,\n  J.TXT_DSCR||J.TXT_ADD as TXT_DSCR,\n  ST.CODE STATE_CODE,\n  ST.NAME as STATE, ST.COLOR as STATCOLOR, ST.FINISHFL, PR.ID as PROC_ID, PR.BOP_ID, PR.NSTAT,\n  P_PkgSvd.fIsSvd(J.DEP_ID, J.ID) as SVD_FLAG,\n  J.PAYSND_ID,\n  J.PAYRCV_ID,\n  S1.CODE as PAYRCV_CODE,\n  S2.CODE as PAYSND_CODE,\n  C_PKGRATIFY.isRatWait(PR.ID) as VRFFL,\n  P_PkgErr.fHasErr(J.DEP_ID, J.ID) as ERRFL,\n  P_PkgErr.fHasNotInfoErr(J.DEP_ID, J.ID) as ERRFL2,\n  t_pkgRunOprUtl.fIsPrcMember(J.DEP_ID, J.ID, 'PSP_IQS', 'PAY') as IN_IQSFL,\n  nvl(E.DELAYFL, '0') as DELAYFL\n  , j.SPEEDFL\n  --, COALESCE( P_PKGPAYSYST.fGetBnkCodeBy_AbnId(p.RECEVIER_ID, P_PKGPAYSYST.fGetChnlBy_PSys(J.PAYRCV_ID)),  \n  --    C_PKGIMEABN.fImeAdrName(p.RECEVIER_ID) ) RCV_MESS_BNK \n  , J.PAYTYPE\n  , j.EARLYFL\n  , j.GUARANTFL\n  , case when nvl(j.SPEEDFL,'0')='1' or nvl(j.EARLYFL,'0')='1' or nvl(j.GUARANTFL,'0')='1' then 1 else 0 end PAYOPTIONFL\n  , decode(nvl(PATTR.CVALUE,'0'),'1','1','2','0','3','0','4','1','5','0','') as POS_ATTR\n  , P_PKGORD_UTL.fGetPcktRefer(J.DEP_ID, J.ID) REFER_SV\n  , P_PKGORD_UTL.fGetMsgRefer(J.DEP_ID, J.ID) REFER_MSG\n  --, P_PKGORD_UTL.fGetMsgStateName(J.DEP_ID, J.ID,1) as MSGSTATE\n  , J.UETR_CODE\n  , J.REAL_TIME_PAY\n  , J.SESSION_CODE\n  , case when DS.CODE = 'PSP_IN' and j.CLIBEN_ID is not null then \n     C_PkgBS_DOM.DName('I_EXC_PAYVKSTATE', P_PKG_I_INTEGR.fGetPayVKState(j.DEP_ID, j.ID), 'N') else null end PayVKStateName\n  , J.WORK_DEP_ID\n  , C_PKGDEP.fGetCodeDep(J.WORK_DEP_ID) WORK_DEP \n  , J.INSTR_IDN\n  , J.UETR_CODE_LOCAL\n  , decode(j.INCOMFL, '1', j.CLIBEN_DEP_ID, j.CLI_DEP_ID) as CLI_DEP_ID\n  , decode(j.INCOMFL, '1', j.CLIBEN_ID, j.CLI_ID) as CLI_ID\n  , decode(j.INCOMFL, '1', j.CLI_DEP_ID, j.CLIBEN_DEP_ID) as CLIBEN_DEP_ID\n  , decode(j.INCOMFL, '1', j.CLI_ID, j.CLIBEN_ID) as CLIBEN_ID\n  , decode(j.INCOMFL, '1', j.BEN_JURFL, j.PAY_JURFL) as CLI_JURFL\n  , decode(j.INCOMFL, '1', j.PAY_JURFL, j.BEN_JURFL) as CLIBEN_JURFL\n  , J.VO\n  , substr(bs_dom.DName('P_ORD_VO', J.VO), 1, 250) as VO_NAME\n  , P_PKGPNS.fChkOrdPens(J.DEP_ID, J.ID) as HASDTLFL\n  , SS.CODE as STF_CODE\n  \nfrom  P_ORDROUTE P, C_USR U, P_ORDEXT E,\n      P_SYS_STD S1, P_SYS_STD S2,\n      T_BOP_STAT ST, T_BOP_DSCR DS, T_PROCESS PR, T_PROCMEM PM, T_VAL_STD V, T_ORD O, P_ORD J\n      ,T_PROCDET PATTR\n    , P_STFORD SF\n    , P_STF_STD SS\n    , P_ORDMSG MSG\nwhere msg.work_dep_id = j.dep_id\n  and msg.work_id = j.id \n  and msg.rcv_adr_id is not null and g_pkgaddress.fGetFullAddr(msg.rcv_adr_id) is not null\n  and j.dval = to_date('05.02.2021', 'dd.mm.yyyy')\n  and msg.rcv_adr_id is not null\n  and O.DEP_ID = J.DEP_ID\n  and O.ID = J.ID\n  and V.ID = O.VAL_ID\n  and PM.ORD_ID = O.ID\n  and PM.DEP_ID = O.DEP_ID\n  and PM.MAINFL IN ('1', CASE WHEN ST.CODE = 'STF' AND DS.CODE IN ('PSP_IN', 'PSP_OUT') THEN '0' ELSE '1' END)\n  and PR.ID = PM.ID\n  and DS.ID = PR.BOP_ID\n  and ST.ID = DS.ID\n  and ST.NORD = PR.NSTAT\n  and P.DEP_ID(+) = j.DEP_ID\n  and P.ID(+) = J.ID\n  and U.ID(+) = O.ID_US\n  and E.ID(+) = J.EXT_ID\n  and S1.ID(+) = J.PAYRCV_ID\n  and S2.ID(+) = J.PAYSND_ID\n  and SF.DEP_ID(+) = J.DEP_ID\n  and SF.ORD_ID(+) = J.ID\n  and SS.ID(+) = SF.STF_ID\n  and O.PLANFL = 0\n  and exists (\n    select 1 from DUAL\n   where C_PKGGRANT.FCHKGRNDEP(O.DEP_ID, O.ID, 3)=1)  \n  and PATTR.ID(+) = PR.ID and PATTR.CODE(+) = 'POS'\n  and BS_OPERATION.fIsParentWait(PR.ID) = 0 \n  --and (DS.CODE||'' = 'PSP_OUT' and G_PKGBNKGRP.fChkOwnBnkCode(J.CODE_BCR) = 0) \n  --and (P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID) is null or G_pkgBnk.fBnkOwnState(P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID))=0)\n    --and J.DIMPORT BETWEEN to_date('28.01.2021') and to_date('28.01.2021')+1\n   --and J.DVAL BETWEEN to_date('28.01.2021') and to_date('28.01.2021')+1\n        and ds.CODE||'' = 'PSP_OUT'\n    \"\"\"\n    \n    accessSQL = \"\"\"\n        exists (select 1 from DUAL where GRN$L_REQDEA$.fAccess(DEP_ID, ID, 3)=1)\n    \"\"\"\n    \n    dep_id     = params.get('dep_id')\n    ord_id     = params.get('id')\n    \n    if ord_id is None and params.get('request',{}).get('filterModel2', {}).get('idReq'):\n        import re\n        r = re.match(r'([0-9]+)([ ]*\\,[ ]*)([0-9]+)', params['request']['filterModel2']['idReq'])\n        if r and len(r.groups())==3:\n            dep_id=int(r[1])\n            ord_id=int(r[3])\n        else:\n            raise UserException('Неправильный формат идентификатора заявки, используйте dep_id,id')\n\n    #raise Exception (str(params))\n    if dep_id and ord_id:\n        rawSQL = rawSQL + ' and r.DEP_ID=to_number(:dep_id) and r.ID=to_number(:ord_id)'\n        q  = doQuery(rawSQL, {\n            'dep_id': dep_id,\n            'ord_id': ord_id,\n        })\n    elif params.get('appId'):\n        rawSQL = rawSQL + ' and re.appId=to_number(:appId)'\n        q  = doQuery(rawSQL, {\n            'appId': params['appId'],\n        })\n        \n    else:\n        request = params.get('request')\n\n        queryParams = {}\n        \n        rank = 0\n        \n        if request:\n            filterModel2 = request.get('filterModel2', {})\n            if filterModel2.get('filterData'):\n                filterModel2 = filterModel2['filterData']\n            \n            rank = filterModelRank(filterModel2)\n\n            #if (rank==0):\n            #    rawSQL = 'select * from (' + rawSQL + ')' + ' where \"dord\" between P_OPERDAY-100 and P_OPERDAY+7 '\n                \n                \n            if filterModel2:\n                from apng_core.aoa.services import filter as aoa\n                filterDef = aoa.buildFilterSql({\n                    'objectCode': 'swiftInputJob',\n                    'filterData': filterModel2\n                })\n                #raise Exception (filterDef['sql'])\n                filter_text = filterDef['sql'].replace('\"','')\n                rawSQL =  'select * from (' + rawSQL + ') '+ filter_text\n                #raise Exception (rawSQL)\n                queryParams = {\n                    **queryParams,\n                    **filterDef['params']\n                }\n        \n        #if rank==0:\n        #    import re\n        #    rawSQL = re.sub('{index_sort}', '+index_desc(r, ie_l_reqdea_sort)', rawSQL)\n        #else:\n        #    rawSQL = rawSQL + ' ORDER BY \"dord\" desc, \"appNo\" desc'\n        \n\n        #rawSQL = rawSQL + ' ORDER BY \"dord\" desc, \"appNo\" desc'\n\n        \n        #rawSQL = 'select * from (' + rawSQL + ') where ' + accessSQL \n        \n        if request and request.get('startRow') is not None:\n            # Ограничение по количеству записей\n            startRow = int(request.get('startRow'))\n            endRow = int(request.get('endRow'))\n            if request:\n                rawSQL = rawSQL + \\\n                    ' OFFSET %s ROWS FETCH NEXT %s ROWS ONLY' % (startRow, endRow-startRow+1)\n        \n        q = doQuery(rawSQL, queryParams)\n        \n    return q\n    \nlst = getApplicationList(parameters)\n\ndata = []\nfor r in lst:\n    row = r\n    #del row['JSON']\n    data.append(row)\n\n"
            },
            "sql": {}
        },
        "get": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\n\nSQL = \"\"\"\nselect /*+ rule*/\n  J.DVAL, J.DEP_ID, J.ID, \n  J.REFER,\n  J.DIMPORT,\n  SUBSTR(T_PKGMONEY.FTRNVALUETOMONEY(J.SDOK),1,27) as SDOK,\n  J.SDOK as amount,\n J.SDOK as NSDOK,\n  P_PKGORD_UTL.fGetCodeBnkBen(j.DEP_ID, j.ID) as CODE_BCL,\n  P_PKGORD_UTL.fGetCodeBnkPay(j.DEP_ID, j.ID) as CODE_ACL,\n  SUBSTR(decode(j.INCOMFL, '1', TXT_BEN, TXT_PAY),1,250) TXT_PAY,\n  SUBSTR(decode(j.INCOMFL, '1', TXT_PAY, TXT_BEN),1,250) TXT_BEN,\n  j.MIDDLE_BNK_1, j.MIDDLE_ACC_1,\n  O.POSTFL,O.FLZO,\n  nvl(J.PAYORD_CODE, O.CODE) as ORD_CODE,\n  O.DRECV,O.VAL_ID, J.PRIORITY,\n  V.CODE as VAL_CODE,\n  J.TXT_DSCR||J.TXT_ADD as TXT_DSCR,\n  ST.CODE STATE_CODE,\n  ST.NAME as STATE, ST.COLOR as STATCOLOR, ST.FINISHFL, PR.ID as PROC_ID, PR.BOP_ID, PR.NSTAT,\n  P_PkgSvd.fIsSvd(J.DEP_ID, J.ID) as SVD_FLAG,\n  J.PAYSND_ID,\n  J.PAYRCV_ID,\n  S1.CODE as PAYRCV_CODE,\n  S2.CODE as PAYSND_CODE,\n  C_PKGRATIFY.isRatWait(PR.ID) as VRFFL,\n  P_PkgErr.fHasErr(J.DEP_ID, J.ID) as ERRFL,\n  P_PkgErr.fHasNotInfoErr(J.DEP_ID, J.ID) as ERRFL2,\n  t_pkgRunOprUtl.fIsPrcMember(J.DEP_ID, J.ID, 'PSP_IQS', 'PAY') as IN_IQSFL,\n  nvl(E.DELAYFL, '0') as DELAYFL\n  , j.SPEEDFL\n  --, COALESCE( P_PKGPAYSYST.fGetBnkCodeBy_AbnId(p.RECEVIER_ID, P_PKGPAYSYST.fGetChnlBy_PSys(J.PAYRCV_ID)),  \n  --    C_PKGIMEABN.fImeAdrName(p.RECEVIER_ID) ) RCV_MESS_BNK \n  , J.PAYTYPE\n  , j.EARLYFL\n  , j.GUARANTFL\n  , case when nvl(j.SPEEDFL,'0')='1' or nvl(j.EARLYFL,'0')='1' or nvl(j.GUARANTFL,'0')='1' then 1 else 0 end PAYOPTIONFL\n  , decode(nvl(PATTR.CVALUE,'0'),'1','1','2','0','3','0','4','1','5','0','') as POS_ATTR\n  , P_PKGORD_UTL.fGetPcktRefer(J.DEP_ID, J.ID) REFER_SV\n  , P_PKGORD_UTL.fGetMsgRefer(J.DEP_ID, J.ID) REFER_MSG\n  --, P_PKGORD_UTL.fGetMsgStateName(J.DEP_ID, J.ID,1) as MSGSTATE\n  , J.UETR_CODE\n  , J.REAL_TIME_PAY\n  , J.SESSION_CODE\n  , case when DS.CODE = 'PSP_IN' and j.CLIBEN_ID is not null then \n     C_PkgBS_DOM.DName('I_EXC_PAYVKSTATE', P_PKG_I_INTEGR.fGetPayVKState(j.DEP_ID, j.ID), 'N') else null end PayVKStateName\n  , J.WORK_DEP_ID\n  , C_PKGDEP.fGetCodeDep(J.WORK_DEP_ID) WORK_DEP \n  , J.INSTR_IDN\n  , J.UETR_CODE_LOCAL\n  , decode(j.INCOMFL, '1', j.CLIBEN_DEP_ID, j.CLI_DEP_ID) as CLI_DEP_ID\n  , decode(j.INCOMFL, '1', j.CLIBEN_ID, j.CLI_ID) as CLI_ID\n  , decode(j.INCOMFL, '1', j.CLI_DEP_ID, j.CLIBEN_DEP_ID) as CLIBEN_DEP_ID\n  , decode(j.INCOMFL, '1', j.CLI_ID, j.CLIBEN_ID) as CLIBEN_ID\n  , decode(j.INCOMFL, '1', j.BEN_JURFL, j.PAY_JURFL) as CLI_JURFL\n  , decode(j.INCOMFL, '1', j.PAY_JURFL, j.BEN_JURFL) as CLIBEN_JURFL\n  , J.VO\n  , substr(bs_dom.DName('P_ORD_VO', J.VO), 1, 250) as VO_NAME\n  , P_PKGPNS.fChkOrdPens(J.DEP_ID, J.ID) as HASDTLFL\n  , SS.CODE as STF_CODE,\n     J.TXT_DSCR||J.TXT_ADD as message,\n  J.SDOK as amount,\n  P_PKGORD_UTL.fGetCodeAccBen(j.DEP_ID, j.ID) as rcv_acc,\n  j.code_acl snd_acc,\n  SUBSTR(decode(j.INCOMFL, '1', TXT_BEN, TXT_PAY),1,250) snd_name,\n  SUBSTR(decode(j.INCOMFL, '1', TXT_PAY, TXT_BEN),1,250) rcv_name,\n  j.code_bcl snd_bank,\n  j.code_bcr rcv_bank,\n  j.code_acr rcv_acc,\n  g_pkgaddress.fGetFullAddr(msg.rcv_adr_id) rcv_address,\ng_pkgaddress.fGetFullAddr(msg.snd_adr_id) snd_address\nfrom  P_ORDROUTE P, C_USR U, P_ORDEXT E,\n      P_SYS_STD S1, P_SYS_STD S2,\n      T_BOP_STAT ST, T_BOP_DSCR DS, T_PROCESS PR, T_PROCMEM PM, T_VAL_STD V, T_ORD O, P_ORD J\n      ,T_PROCDET PATTR\n    , P_STFORD SF\n    , P_STF_STD SS\n    , P_ORDMSG MSG\nwhere msg.work_dep_id(+) = j.dep_id\n  and msg.work_id(+) = j.id \n  and O.DEP_ID = J.DEP_ID\n  and O.ID = J.ID\n  and V.ID = O.VAL_ID\n  and PM.ORD_ID = O.ID\n  and PM.DEP_ID = O.DEP_ID\n  and PM.MAINFL IN ('1', CASE WHEN ST.CODE = 'STF' AND DS.CODE IN ('PSP_IN', 'PSP_OUT') THEN '0' ELSE '1' END)\n  and PR.ID = PM.ID\n  and DS.ID = PR.BOP_ID\n  and ST.ID = DS.ID\n  and ST.NORD = PR.NSTAT\n  and P.DEP_ID(+) = j.DEP_ID\n  and P.ID(+) = J.ID\n  and U.ID(+) = O.ID_US\n  and E.ID(+) = J.EXT_ID\n  and S1.ID(+) = J.PAYRCV_ID\n  and S2.ID(+) = J.PAYSND_ID\n  and SF.DEP_ID(+) = J.DEP_ID\n  and SF.ORD_ID(+) = J.ID\n  and SS.ID(+) = SF.STF_ID\n  and O.PLANFL = 0\n  and exists (\n    select 1 from DUAL\n   where C_PKGGRANT.FCHKGRNDEP(O.DEP_ID, O.ID, 3)=1)  \n  and PATTR.ID(+) = PR.ID and PATTR.CODE(+) = 'POS'\n  and BS_OPERATION.fIsParentWait(PR.ID) = 0 \n  and ds.CODE||'' = 'PSP_OUT'\n  and j.id = %(id)s \n  and  j.dep_id = %(dep_id)s \n\n  --and (DS.CODE||'' = 'PSP_OUT' and G_PKGBNKGRP.fChkOwnBnkCode(J.CODE_BCR) = 0) \n  --and (P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID) is null or G_pkgBnk.fBnkOwnState(P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID))=0)\n  --and J.DIMPORT BETWEEN to_date('28.01.2021') and to_date('28.01.2021')+1\n  --and J.DVAL BETWEEN to_date('28.01.2021') and to_date('28.01.2021')+1\n        \n\"\"\"\nwith initDbSession(application='colvir_cbs').cursor() as c:\n  c.execute(SQL, {'id': parameters.get('id'), 'dep_id': parameters.get('dep_id')})\n  data = fetchone(c)\n  attrs = list(data.keys())\n  for attr in attrs:\n      data[attr.lower()] = data[attr]\nwith initDbSession(database='default').cursor() as c:   \n    SQL = \"\"\"\n        select * \n        from swift_out_fields \n        where id = %(id)s \n        and  dep_id = %(dep_id)s \n    \"\"\"\n    c.execute(SQL, {'id': parameters.get('id'), 'dep_id': parameters.get('dep_id')})\n    data_out = fetchone(c)\n    \nif data_out:\n    data = data | data_out or {}  \n#raise Exception(data)\n"
            },
            "sql": {}
        },
        "save": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\nfrom apng_core.auth import getUser\n\n\nwith initDbSession(database='default').cursor() as c:\n    SQL = \"\"\"\n        insert into swift_out_fields (dep_id, id, field1, field2)\n        values (%(dep_id)s, %(id)s, %(field1)s, %(field2)s)\n        on conflict (dep_id, id)\n        do update set\n            field1 = excluded.field1,\n            field2 = excluded.field2;\n    \"\"\"\n    #raise Exception( parameters)\n    try:\n      user = getUser()\n      user_str = user.code\n      \n      c.execute(SQL, { 'dep_id': parameters.get('app').get('record').get('DEP_ID'), 'id': parameters.get('app').get('record').get('ID'), 'field1': parameters.get('app').get('out_fields').get('field1'), 'field2': parameters.get('app').get('out_fields').get('field2') })\n      #r = fetchone(c)\n      #data = { 'id': r['id'], 'dep_id': r['dep_id'] }\n    except Exception as e:\n      raise UserException({'message': str(e)})\n"
            },
            "sql": {}
        },
        "delete": {
            "script": {
                "py": "SQL = 'DELETE FROM swift_input_job WHERE id = %(id)s'\nwith initDbSession(database='default').cursor() as c:\n  c.execute(SQL, {'id': parameters.get('id')})\n  data = {'success': True}\n"
            },
            "sql": {}
        },
        "send": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\nfrom apng_core.auth import getUser\n\n#raise Exception(parameters)\n\nwith initDbSession(application='colvir_cbs').cursor() as c:\n    SQL = \"\"\"\n        declare \n           sdep_id  int := :dep_id;\n           sid      int := :id;\n        begin\n            \n            raise_application_error(-20000,'send '||sdep_id||';'||sid);\n        end;\n    \"\"\"\n    try:\n      c.execute(SQL, { 'dep_id': parameters.get('dep_id'), 'id': parameters.get('id')})\n    except Exception as e:\n      raise UserException({'message': str(e)})\n"
            },
            "sql": {}
        },
        "sendUndo": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\nfrom apng_core.auth import getUser\n\n#raise Exception(parameters)\n\nwith initDbSession(application='colvir_cbs').cursor() as c:\n    SQL = \"\"\"\n        declare \n           sdep_id  int := :dep_id;\n           sid      int := :id;\n        begin\n            \n            raise_application_error(-20000,'send Undo = '||sdep_id||';'||sid);\n        end;\n    \"\"\"\n    try:\n      c.execute(SQL, { 'dep_id': parameters.get('dep_id'), 'id': parameters.get('id')})\n    except Exception as e:\n      raise UserException({'message': str(e)})\n"
            }
        },
        "recalc": {
            "script": {
                "py": "import json\nimport logging\nimport requests\nfrom apng_core.db import initDbSession, fetchone\nfrom apng_core.exceptions import UserException\nfrom apng_core.auth import getUser\n\n# Initialize logger\nlogger = logging.getLogger('recalc')\n\n# Together AI configuration\nTOGETHER_API_KEY = \"fb64c5f9af4418fa785aebcc1dd47b0d1462691be8a1e04d0c84dec490c4d18c\"\nTOGETHER_API_URL = \"https://api.together.xyz/v1/chat/completions\"\n# Recommended models for structured output\nTOGETHER_MODEL = \"meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo\"  # Good for JSON\n\n\ndef parse_address_with_llm(address_string):\n    \"\"\"Parse address using Together AI API with robust response handling\"\"\"\n    \n    if not address_string or not address_string.strip():\n        return {\n            'postal_code': None,\n            'country': None,\n            'region': None,\n            'city': None,\n            'street': None,\n            'building': None\n        }\n    \n    prompt = f\"\"\"Разбери следующий адрес на структурированные поля. Верни ТОЛЬКО валидный JSON объект с такими ключами: postal_code, country, region, city, street, building.\n\nАдрес: {address_string}\n\nПравила парсинга:\n- Если поле отсутствует в адресе, используй null\n- Извлеки почтовый индекс, если есть\n- Определи страну (УЗБЕКИСТАН, Россия, Казахстан и т.д.)\n- В поле region объедини все административные единицы: республики (Респ), области (обл, вилоят), районы (рн, тумани)\n  Например: \"КАРАКАЛПАКСТАН Респ, ТУРТКУЛЬСКИЙ рн\" - это всё в region\n- В поле city извлеки населенный пункт:\n  * ссг (село сельского говета) - это ГОРОД\n  * шахри (город), город (г, гор) - это ГОРОД\n  * махалля (квартал) - это ГОРОД\n  * Пример: \"АТАУБА ссг\" → city = \"АТАУБА\"\n- В поле street извлеки название улицы (ул, кўча, проспект, пр-т)\n- В поле building извлеки номер дома/здания (д, дом, уй)\n\nВАЖНО для узбекских адресов:\n- Все регионы, области, районы → в region (через запятую)\n- Только село/город/махалля → в city (без сокращений ссг/шахри/махалля)\n\nВерни ТОЛЬКО валидный JSON объект, без объяснений, без markdown, только чистый JSON.\"\"\"\n\n    headers = {\n        \"Authorization\": f\"Bearer {TOGETHER_API_KEY}\",\n        \"Content-Type\": \"application/json\"\n    }\n    \n    payload = {\n        \"model\": TOGETHER_MODEL,\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"Ты помощник, который разбирает адреса на структурированные поля в формате JSON. Всегда возвращай только валидный JSON без markdown форматирования и без объяснений. Особое внимание уделяй узбекским адресам с сокращениями: ссг (село), рн (район), Респ (республика), вилоят (область), тумани (район), махалля (квартал).\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": prompt\n            }\n        ],\n        \"max_tokens\": 500,\n        \"temperature\": 0.1,\n        \"top_p\": 0.9,\n        \"stop\": [\"```\", \"\\n\\n\\n\"]\n    }\n    \n    response = requests.post(\n        TOGETHER_API_URL,\n        headers=headers,\n        json=payload,\n        timeout=30\n    )\n    \n    logger.debug(f\"Response status code: {response.status_code}\")\n    \n    if response.status_code != 200:\n        logger.error(f\"Together API error: {response.status_code}\")\n        logger.error(f\"Response: {response.text}\")\n        raise UserException({\n            'message': f'Together API error: {response.status_code}',\n            'description': response.text\n        })\n    \n    response_data = response.json()\n    logger.debug(f\"Full response: {json.dumps(response_data, indent=2)}\")\n    #raise Exception(response_data)\n    # Extract text from response - handle different response formats\n    response_text = None\n    \n    # Try to get content from choices\n    if 'choices' in response_data and len(response_data['choices']) > 0:\n        choice = response_data['choices'][0]\n        \n        # Check 'message' field\n        if 'message' in choice:\n            message = choice['message']\n            \n            # Priority 1: content field\n            if 'content' in message and message['content']:\n                response_text = message['content'].strip()\n                logger.debug(f\"Got response from 'content' field\")\n            \n            # Priority 2: reasoning field (some models use this)\n            elif 'reasoning' in message and message['reasoning']:\n                response_text = message['reasoning'].strip()\n                logger.debug(f\"Got response from 'reasoning' field\")\n        \n        # Check 'text' field directly in choice\n        elif 'text' in choice and choice['text']:\n            response_text = choice['text'].strip()\n            logger.debug(f\"Got response from 'text' field\")\n    \n    if not response_text:\n        logger.error(f\"Could not extract text from response: {response_data}\")\n        raise UserException({\n            'message': 'Empty response from AI',\n            'description': 'No content found in API response'\n        })\n    \n    logger.debug(f\"Raw response text: {response_text}\")\n    \n    # Clean up response - remove markdown\n    if '```json' in response_text:\n        response_text = response_text.split('```json')[1].split('```')[0].strip()\n    elif '```' in response_text:\n        # Find JSON between first ``` and last ```\n        parts = response_text.split('```')\n        if len(parts) >= 3:\n            response_text = parts[1].strip()\n    \n    # Remove JSON word at start if present\n    if response_text.lower().startswith('json'):\n        response_text = response_text[4:].strip()\n    \n    # Extract just the JSON object if there's text before/after\n    if '{' in response_text and '}' in response_text:\n        start_idx = response_text.find('{')\n        end_idx = response_text.rfind('}')\n        response_text = response_text[start_idx:end_idx + 1]\n    \n    # Попытка парсинга JSON\n    parsed = None\n    try:\n        parsed = json.loads(response_text)\n    except json.JSONDecodeError as e:\n        logger.warning(f\"First JSON parse failed: {e}\")\n        logger.debug(f\"Failed text: {response_text}\")\n        \n        # Try to fix common issues\n        response_text_fixed = response_text.replace(\"'\", '\"')\n        response_text_fixed = response_text_fixed.replace('None', 'null')\n        response_text_fixed = response_text_fixed.replace('True', 'true')\n        response_text_fixed = response_text_fixed.replace('False', 'false')\n        \n        try:\n            parsed = json.loads(response_text_fixed)\n        except json.JSONDecodeError as e2:\n            logger.error(f\"Failed to parse JSON after fixes\")\n            logger.error(f\"Original: {response_text}\")\n            logger.error(f\"Fixed: {response_text_fixed}\")\n            \n            # Return empty result instead of failing\n            return {\n                'postal_code': None,\n                'country': None,\n                'region': None,\n                'city': None,\n                'street': None,\n                'building': None\n            }\n    \n    # Формируем результат\n    result = {\n        'postal_code': parsed.get('postal_code'),\n        'country': parsed.get('country'),\n        'region': parsed.get('region'),\n        'city': parsed.get('city'),\n        'street': parsed.get('street'),\n        'building': parsed.get('building')\n    }\n    \n    \n    logger.info(f\"Successfully parsed address: {address_string}\")\n    logger.debug(f\"Result: {result}\")\n    \n    return result\n    \n    \n\n\n# Main execution\nuser = getUser()\nuser_str = user.code\n\ndep_id = parameters.get('app').get('record').get('DEP_ID')\nid = parameters.get('app').get('record').get('ID')\n\nif not dep_id or not id:\n    raise UserException({'message': 'Missing dep_id or id in parameters'})\n\nlogger.debug(f\"Processing dep_id={dep_id}, id={id}, user={user_str}\")\n\n# Read addresses from Colvir CBS\nwith initDbSession(application='colvir_cbs').cursor() as cursor:\n    address_sql = \"\"\"\n        select g_pkgaddress.fGetFullAddr(msg.rcv_adr_id) rcv_address,\n               g_pkgaddress.fGetFullAddr(msg.snd_adr_id) snd_address\n        from  P_ORDROUTE P, C_USR U, P_ORDEXT E,\n              P_SYS_STD S1, P_SYS_STD S2,\n              T_BOP_STAT ST, T_BOP_DSCR DS, T_PROCESS PR, T_PROCMEM PM, T_VAL_STD V, T_ORD O, P_ORD J\n              ,T_PROCDET PATTR\n            , P_STFORD SF\n            , P_STF_STD SS\n            , P_ORDMSG MSG\n        where msg.work_dep_id(+) = j.dep_id\n          and msg.work_id(+) = j.id \n          and O.DEP_ID = J.DEP_ID\n          and O.ID = J.ID\n          and V.ID = O.VAL_ID\n          and PM.ORD_ID = O.ID\n          and PM.DEP_ID = O.DEP_ID\n          and PM.MAINFL IN ('1', CASE WHEN ST.CODE = 'STF' AND DS.CODE IN ('PSP_IN', 'PSP_OUT') THEN '0' ELSE '1' END)\n          and PR.ID = PM.ID\n          and DS.ID = PR.BOP_ID\n          and ST.ID = DS.ID\n          and ST.NORD = PR.NSTAT\n          and P.DEP_ID(+) = j.DEP_ID\n          and P.ID(+) = J.ID\n          and U.ID(+) = O.ID_US\n          and E.ID(+) = J.EXT_ID\n          and S1.ID(+) = J.PAYRCV_ID\n          and S2.ID(+) = J.PAYSND_ID\n          and SF.DEP_ID(+) = J.DEP_ID\n          and SF.ORD_ID(+) = J.ID\n          and SS.ID(+) = SF.STF_ID\n          and O.PLANFL = 0\n          and exists (\n            select 1 from DUAL\n           where C_PKGGRANT.FCHKGRNDEP(O.DEP_ID, O.ID, 3)=1)  \n          and PATTR.ID(+) = PR.ID and PATTR.CODE(+) = 'POS'\n          and BS_OPERATION.fIsParentWait(PR.ID) = 0 \n          and ds.CODE||'' = 'PSP_OUT'\n          and j.id = :id\n          and j.dep_id = :dep_id\n    \"\"\"\n    \n    cursor.execute(address_sql, {'id': id, 'dep_id': dep_id})\n    address_row = fetchone(cursor)\n    \n    if not address_row:\n        raise UserException({\n            'message': 'No data found for specified dep_id and id',\n            'description': f'dep_id={dep_id}, id={id}'\n        })\n    \n    rcv_address = address_row.get('RCV_ADDRESS', '')\n    snd_address = address_row.get('SND_ADDRESS', '')\n    \n    logger.debug(f\"Receiver address from Colvir CBS: {rcv_address}\")\n    logger.debug(f\"Sender address from Colvir CBS: {snd_address}\")\n\n# Parse addresses using Together AI\nlogger.info(\"Parsing receiver address with AI...\")\nrcv_parsed = parse_address_with_llm(rcv_address)\n\nlogger.info(\"Parsing sender address with AI...\")\nsnd_parsed = parse_address_with_llm(snd_address)\n\n# Write parsed data to PostgreSQL\nwith initDbSession(database='default').cursor() as c:\n    insert_sql = \"\"\"\n        insert into swift_out_fields (\n            dep_id, id, \n            rcv_postal_code, rcv_country, rcv_region, rcv_city, rcv_street, rcv_building,\n            snd_postal_code, snd_country, snd_region, snd_city, snd_street, snd_building,\n            modified\n        )\n        values (\n            %(dep_id)s, %(id)s,\n            %(rcv_postal_code)s, %(rcv_country)s, %(rcv_region)s, %(rcv_city)s, %(rcv_street)s, %(rcv_building)s,\n            %(snd_postal_code)s, %(snd_country)s, %(snd_region)s, %(snd_city)s, %(snd_street)s, %(snd_building)s,\n            now()\n        )\n        on conflict (dep_id, id)\n        do update set\n            rcv_postal_code = excluded.rcv_postal_code,\n            rcv_country = excluded.rcv_country,\n            rcv_region = excluded.rcv_region,\n            rcv_city = excluded.rcv_city,\n            rcv_street = excluded.rcv_street,\n            rcv_building = excluded.rcv_building,\n            snd_postal_code = excluded.snd_postal_code,\n            snd_country = excluded.snd_country,\n            snd_region = excluded.snd_region,\n            snd_city = excluded.snd_city,\n            snd_street = excluded.snd_street,\n            snd_building = excluded.snd_building,\n            modified = now();\n    \"\"\"\n    \n    c.execute(insert_sql, {\n        'dep_id': dep_id,\n        'id': id,\n        'rcv_postal_code': rcv_parsed['postal_code'],\n        'rcv_country': rcv_parsed['country'],\n        'rcv_region': rcv_parsed['region'],\n        'rcv_city': rcv_parsed['city'],\n        'rcv_street': rcv_parsed['street'],\n        'rcv_building': rcv_parsed['building'],\n        'snd_postal_code': snd_parsed['postal_code'],\n        'snd_country': snd_parsed['country'],\n        'snd_region': snd_parsed['region'],\n        'snd_city': snd_parsed['city'],\n        'snd_street': snd_parsed['street'],\n        'snd_building': snd_parsed['building']\n    })\n    \n    c.connection.commit()\n\nlogger.info(\"✓ Address parsing and saving completed successfully\")\n\n"
            },
            "sql": {}
        },
        "getInputList": {
            "sql": {},
            "script": {
                "py": "# Get all records from simple_list table\nfrom apng_core.db import fetchall\nfrom apng_core.exceptions import UserException\n\nSQL = \"\"\"\n    SELECT id, name\n    FROM swift_input\n\"\"\"\n\nwith initDbSession(database='default').cursor() as c:\n    try:\n        c.execute(SQL)\n        data = fetchall(c)\n    except Exception as e:\n        raise UserException({\n            'message': 'Error fetching records',\n            'description': 'SQL:\\n%s' % SQL\n        }).withError(e)\n"
            }
        },
        "recalcXML": {
            "script": {
                "py": "import logging\nimport uuid\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom xml.etree import ElementTree as ET\nfrom xml.dom import minidom\nfrom apng_core.db import initDbSession, fetchone\nfrom apng_core.exceptions import UserException\nfrom apng_core.auth import getUser\n\n# Initialize logger\nlogger = logging.getLogger('recalcXml')\n\n\ndef generate_pacs008_xml(payment_data, address_data):\n    \"\"\"\n    Generate pacs.008 XML for outgoing payment.\n    \n    Args:\n        payment_data: dict with payment information from Oracle\n        address_data: dict with parsed address fields from swift_out_fields\n        \n    Returns:\n        str: formatted XML content\n    \"\"\"\n    # Generate unique identifiers\n    msg_id = f\"PACS008-{payment_data.get('DEP_ID')}-{payment_data.get('ID')}\"\n    instr_id = payment_data.get('INSTR_IDN') or msg_id\n    end_to_end_id = payment_data.get('REFER') or f\"E2E-{payment_data.get('ID')}\"\n    uetr = payment_data.get('UETR_CODE') or str(uuid.uuid4())\n    \n    # Current timestamp\n    cre_dt_tm = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')\n    \n    # Settlement date\n    dval = payment_data.get('DVAL')\n    if dval:\n        if isinstance(dval, str):\n            sttlm_dt = dval[:10]\n        else:\n            sttlm_dt = dval.strftime('%Y-%m-%d')\n    else:\n        sttlm_dt = datetime.now().strftime('%Y-%m-%d')\n    \n    # Amount and currency\n    amount = payment_data.get('AMOUNT') or payment_data.get('SDOK') or 0\n    if isinstance(amount, Decimal):\n        amount_str = str(amount)\n    else:\n        amount_str = str(amount)\n    \n    currency = payment_data.get('VAL_CODE') or 'USD'\n    \n    # Create XML structure\n    # Envelope\n    envelope = ET.Element('Envelope', {\n        'xmlns': 'urn:swift:xsd:envelope',\n        'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance'\n    })\n    \n    # AppHdr\n    app_hdr = ET.SubElement(envelope, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}AppHdr')\n    \n    # From\n    fr = ET.SubElement(app_hdr, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}Fr')\n    fi_id_fr = ET.SubElement(fr, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}FIId')\n    fin_instn_id_fr = ET.SubElement(fi_id_fr, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}FinInstnId')\n    bicfi_fr = ET.SubElement(fin_instn_id_fr, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}BICFI')\n    bicfi_fr.text = payment_data.get('SND_BANK') or 'UNKNOWNXXX'\n    \n    # To\n    to = ET.SubElement(app_hdr, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}To')\n    fi_id_to = ET.SubElement(to, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}FIId')\n    fin_instn_id_to = ET.SubElement(fi_id_to, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}FinInstnId')\n    bicfi_to = ET.SubElement(fin_instn_id_to, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}BICFI')\n    bicfi_to.text = payment_data.get('RCV_BANK') or 'UNKNOWNXXX'\n    \n    # BizMsgIdr\n    biz_msg_idr = ET.SubElement(app_hdr, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}BizMsgIdr')\n    biz_msg_idr.text = msg_id\n    \n    # MsgDefIdr\n    msg_def_idr = ET.SubElement(app_hdr, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}MsgDefIdr')\n    msg_def_idr.text = 'pacs.008.001.08'\n    \n    # CreDt\n    cre_dt = ET.SubElement(app_hdr, '{urn:iso:std:iso:20022:tech:xsd:head.001.001.02}CreDt')\n    cre_dt.text = cre_dt_tm\n    \n    # Document\n    document = ET.SubElement(envelope, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Document')\n    fi_to_fi = ET.SubElement(document, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}FIToFICstmrCdtTrf')\n    \n    # GrpHdr\n    grp_hdr = ET.SubElement(fi_to_fi, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}GrpHdr')\n    \n    msg_id_elem = ET.SubElement(grp_hdr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}MsgId')\n    msg_id_elem.text = msg_id\n    \n    cre_dt_tm_elem = ET.SubElement(grp_hdr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}CreDtTm')\n    cre_dt_tm_elem.text = cre_dt_tm\n    \n    nb_of_txs = ET.SubElement(grp_hdr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}NbOfTxs')\n    nb_of_txs.text = '1'\n    \n    sttlm_inf = ET.SubElement(grp_hdr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}SttlmInf')\n    sttlm_mtd = ET.SubElement(sttlm_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}SttlmMtd')\n    sttlm_mtd.text = 'INDA'\n    \n    # CdtTrfTxInf\n    cdt_trf_tx_inf = ET.SubElement(fi_to_fi, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}CdtTrfTxInf')\n    \n    # PmtId\n    pmt_id = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}PmtId')\n    \n    instr_id_elem = ET.SubElement(pmt_id, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}InstrId')\n    instr_id_elem.text = instr_id\n    \n    end_to_end_id_elem = ET.SubElement(pmt_id, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}EndToEndId')\n    end_to_end_id_elem.text = end_to_end_id\n    \n    uetr_elem = ET.SubElement(pmt_id, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}UETR')\n    uetr_elem.text = uetr\n    \n    # IntrBkSttlmAmt\n    intr_bk_sttlm_amt = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}IntrBkSttlmAmt')\n    intr_bk_sttlm_amt.set('Ccy', currency)\n    intr_bk_sttlm_amt.text = amount_str\n    \n    # IntrBkSttlmDt\n    intr_bk_sttlm_dt = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}IntrBkSttlmDt')\n    intr_bk_sttlm_dt.text = sttlm_dt\n    \n    # ChrgBr\n    chrg_br = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}ChrgBr')\n    chrg_br.text = 'SHAR'\n    \n    # InstgAgt\n    instg_agt = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}InstgAgt')\n    fin_instn_id_instg = ET.SubElement(instg_agt, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}FinInstnId')\n    bicfi_instg = ET.SubElement(fin_instn_id_instg, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}BICFI')\n    bicfi_instg.text = payment_data.get('SND_BANK') or 'UNKNOWNXXX'\n    \n    # InstdAgt\n    instd_agt = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}InstdAgt')\n    fin_instn_id_instd = ET.SubElement(instd_agt, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}FinInstnId')\n    bicfi_instd = ET.SubElement(fin_instn_id_instd, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}BICFI')\n    bicfi_instd.text = payment_data.get('RCV_BANK') or 'UNKNOWNXXX'\n    \n    # Dbtr (Debtor - Sender)\n    dbtr = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Dbtr')\n    dbtr_nm = ET.SubElement(dbtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Nm')\n    dbtr_nm.text = payment_data.get('SND_NAME') or 'Unknown Sender'\n    \n    # Dbtr PstlAdr (from parsed address)\n    if any([address_data.get('snd_street'), address_data.get('snd_city'), address_data.get('snd_country')]):\n        pstl_adr_dbtr = ET.SubElement(dbtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}PstlAdr')\n        \n        if address_data.get('snd_street'):\n            strt_nm = ET.SubElement(pstl_adr_dbtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}StrtNm')\n            strt_nm.text = address_data['snd_street']\n        \n        if address_data.get('snd_building'):\n            bldg_nb = ET.SubElement(pstl_adr_dbtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}BldgNb')\n            bldg_nb.text = address_data['snd_building']\n        \n        if address_data.get('snd_postal_code'):\n            pst_cd = ET.SubElement(pstl_adr_dbtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}PstCd')\n            pst_cd.text = address_data['snd_postal_code']\n        \n        if address_data.get('snd_city'):\n            twn_nm = ET.SubElement(pstl_adr_dbtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}TwnNm')\n            twn_nm.text = address_data['snd_city']\n        \n        if address_data.get('snd_region'):\n            ctry_sub_dvsn = ET.SubElement(pstl_adr_dbtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}CtrySubDvsn')\n            ctry_sub_dvsn.text = address_data['snd_region']\n        \n        if address_data.get('snd_country'):\n            ctry = ET.SubElement(pstl_adr_dbtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Ctry')\n            ctry.text = address_data['snd_country'][:2].upper() if len(address_data['snd_country']) > 2 else address_data['snd_country']\n    \n    # DbtrAcct\n    dbtr_acct = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}DbtrAcct')\n    dbtr_acct_id = ET.SubElement(dbtr_acct, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Id')\n    \n    snd_acc = payment_data.get('SND_ACC')\n    if snd_acc:\n        # Check if it's IBAN format\n        if snd_acc and len(snd_acc) > 15:\n            iban_elem = ET.SubElement(dbtr_acct_id, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}IBAN')\n            iban_elem.text = snd_acc\n        else:\n            othr_dbtr = ET.SubElement(dbtr_acct_id, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Othr')\n            othr_id_dbtr = ET.SubElement(othr_dbtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Id')\n            othr_id_dbtr.text = snd_acc\n    \n    # DbtrAgt\n    dbtr_agt = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}DbtrAgt')\n    fin_instn_id_dbtr_agt = ET.SubElement(dbtr_agt, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}FinInstnId')\n    bicfi_dbtr_agt = ET.SubElement(fin_instn_id_dbtr_agt, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}BICFI')\n    bicfi_dbtr_agt.text = payment_data.get('SND_BANK') or 'UNKNOWNXXX'\n    \n    # CdtrAgt\n    cdtr_agt = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}CdtrAgt')\n    fin_instn_id_cdtr_agt = ET.SubElement(cdtr_agt, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}FinInstnId')\n    bicfi_cdtr_agt = ET.SubElement(fin_instn_id_cdtr_agt, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}BICFI')\n    bicfi_cdtr_agt.text = payment_data.get('RCV_BANK') or 'UNKNOWNXXX'\n    \n    # Cdtr (Creditor - Receiver)\n    cdtr = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Cdtr')\n    cdtr_nm = ET.SubElement(cdtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Nm')\n    cdtr_nm.text = payment_data.get('RCV_NAME') or 'Unknown Receiver'\n    \n    # Cdtr PstlAdr (from parsed address)\n    if any([address_data.get('rcv_street'), address_data.get('rcv_city'), address_data.get('rcv_country')]):\n        pstl_adr_cdtr = ET.SubElement(cdtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}PstlAdr')\n        \n        if address_data.get('rcv_street'):\n            strt_nm = ET.SubElement(pstl_adr_cdtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}StrtNm')\n            strt_nm.text = address_data['rcv_street']\n        \n        if address_data.get('rcv_building'):\n            bldg_nb = ET.SubElement(pstl_adr_cdtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}BldgNb')\n            bldg_nb.text = address_data['rcv_building']\n        \n        if address_data.get('rcv_postal_code'):\n            pst_cd = ET.SubElement(pstl_adr_cdtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}PstCd')\n            pst_cd.text = address_data['rcv_postal_code']\n        \n        if address_data.get('rcv_city'):\n            twn_nm = ET.SubElement(pstl_adr_cdtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}TwnNm')\n            twn_nm.text = address_data['rcv_city']\n        \n        if address_data.get('rcv_region'):\n            ctry_sub_dvsn = ET.SubElement(pstl_adr_cdtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}CtrySubDvsn')\n            ctry_sub_dvsn.text = address_data['rcv_region']\n        \n        if address_data.get('rcv_country'):\n            ctry = ET.SubElement(pstl_adr_cdtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Ctry')\n            ctry.text = address_data['rcv_country'][:2].upper() if len(address_data['rcv_country']) > 2 else address_data['rcv_country']\n    \n    # CdtrAcct\n    cdtr_acct = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}CdtrAcct')\n    cdtr_acct_id = ET.SubElement(cdtr_acct, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Id')\n    \n    rcv_acc = payment_data.get('RCV_ACC')\n    if rcv_acc:\n        # Check if it's IBAN format\n        if rcv_acc and len(rcv_acc) > 15:\n            iban_elem = ET.SubElement(cdtr_acct_id, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}IBAN')\n            iban_elem.text = rcv_acc\n        else:\n            othr_cdtr = ET.SubElement(cdtr_acct_id, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Othr')\n            othr_id_cdtr = ET.SubElement(othr_cdtr, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Id')\n            othr_id_cdtr.text = rcv_acc\n    \n    # RmtInf (Remittance Information)\n    message = payment_data.get('MESSAGE') or payment_data.get('TXT_DSCR')\n    if message:\n        rmt_inf = ET.SubElement(cdt_trf_tx_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}RmtInf')\n        ustrd = ET.SubElement(rmt_inf, '{urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08}Ustrd')\n        ustrd.text = message[:140]  # Limit to 140 chars\n    \n    # Convert to string with pretty formatting\n    rough_string = ET.tostring(envelope, encoding='unicode')\n    reparsed = minidom.parseString(rough_string)\n    pretty_xml = reparsed.toprettyxml(indent=\"  \", encoding='UTF-8').decode('UTF-8')\n    \n    # Remove extra blank lines\n    lines = [line for line in pretty_xml.split('\\n') if line.strip()]\n    return '\\n'.join(lines)\n\n\n# Main execution\nuser = getUser()\nuser_str = user.code\n\ndep_id = parameters.get('app').get('record').get('DEP_ID')\nid = parameters.get('app').get('record').get('ID')\n\nif not dep_id or not id:\n    raise UserException({'message': 'Missing dep_id or id in parameters'})\n\nlogger.debug(f\"Generating XML for outgoing payment: dep_id={dep_id}, id={id}, user={user_str}\")\n\n# Read payment data from Colvir CBS (Oracle) database\nwith initDbSession(application='colvir_cbs').cursor() as cursor:\n    payment_sql = \"\"\"\n        select /*+ rule*/\n          J.DVAL, J.DEP_ID, J.ID, \n          J.REFER,\n          J.DIMPORT,\n          SUBSTR(T_PKGMONEY.FTRNVALUETOMONEY(J.SDOK),1,27) as SDOK,\n          J.SDOK as amount,\n          J.SDOK as NSDOK,\n          P_PKGORD_UTL.fGetCodeBnkBen(j.DEP_ID, j.ID) as CODE_BCL,\n          P_PKGORD_UTL.fGetCodeBnkPay(j.DEP_ID, j.ID) as CODE_ACL,\n          SUBSTR(decode(j.INCOMFL, '1', TXT_BEN, TXT_PAY),1,250) TXT_PAY,\n          SUBSTR(decode(j.INCOMFL, '1', TXT_PAY, TXT_BEN),1,250) TXT_BEN,\n          j.MIDDLE_BNK_1, j.MIDDLE_ACC_1,\n          O.POSTFL,O.FLZO,\n          nvl(J.PAYORD_CODE, O.CODE) as ORD_CODE,\n          O.DRECV,O.VAL_ID, J.PRIORITY,\n          V.CODE as VAL_CODE,\n          J.TXT_DSCR||J.TXT_ADD as TXT_DSCR,\n          ST.CODE STATE_CODE,\n          J.INSTR_IDN,\n          J.UETR_CODE_LOCAL,\n          J.UETR_CODE,\n          J.TXT_DSCR||J.TXT_ADD as message,\n          J.SDOK as amount,\n          P_PKGORD_UTL.fGetCodeAccBen(j.DEP_ID, j.ID) as rcv_acc,\n          j.code_acl snd_acc,\n          SUBSTR(decode(j.INCOMFL, '1', TXT_BEN, TXT_PAY),1,250) snd_name,\n          SUBSTR(decode(j.INCOMFL, '1', TXT_PAY, TXT_BEN),1,250) rcv_name,\n          j.code_bcl snd_bank,\n          j.code_bcr rcv_bank\n        from  P_ORDROUTE P, C_USR U, P_ORDEXT E,\n              P_SYS_STD S1, P_SYS_STD S2,\n              T_BOP_STAT ST, T_BOP_DSCR DS, T_PROCESS PR, T_PROCMEM PM, T_VAL_STD V, T_ORD O, P_ORD J\n              ,T_PROCDET PATTR\n            , P_STFORD SF\n            , P_STF_STD SS\n            , P_ORDMSG MSG\n        where msg.work_dep_id(+) = j.dep_id\n          and msg.work_id(+) = j.id \n          and O.DEP_ID = J.DEP_ID\n          and O.ID = J.ID\n          and V.ID = O.VAL_ID\n          and PM.ORD_ID = O.ID\n          and PM.DEP_ID = O.DEP_ID\n          and PM.MAINFL IN ('1', CASE WHEN ST.CODE = 'STF' AND DS.CODE IN ('PSP_IN', 'PSP_OUT') THEN '0' ELSE '1' END)\n          and PR.ID = PM.ID\n          and DS.ID = PR.BOP_ID\n          and ST.ID = DS.ID\n          and ST.NORD = PR.NSTAT\n          and P.DEP_ID(+) = j.DEP_ID\n          and P.ID(+) = J.ID\n          and U.ID(+) = O.ID_US\n          and E.ID(+) = J.EXT_ID\n          and S1.ID(+) = J.PAYRCV_ID\n          and S2.ID(+) = J.PAYSND_ID\n          and SF.DEP_ID(+) = J.DEP_ID\n          and SF.ORD_ID(+) = J.ID\n          and SS.ID(+) = SF.STF_ID\n          and O.PLANFL = 0\n          and exists (\n            select 1 from DUAL\n           where C_PKGGRANT.FCHKGRNDEP(O.DEP_ID, O.ID, 3)=1)  \n          and PATTR.ID(+) = PR.ID and PATTR.CODE(+) = 'POS'\n          and BS_OPERATION.fIsParentWait(PR.ID) = 0 \n          and ds.CODE||'' = 'PSP_OUT'\n          and j.id = :id\n          and j.dep_id = :dep_id\n    \"\"\"\n    \n    cursor.execute(payment_sql, {'id': id, 'dep_id': dep_id})\n    payment_row = fetchone(cursor)\n    \n    if not payment_row:\n        raise UserException({\n            'message': 'No payment data found for specified dep_id and id',\n            'description': f'dep_id={dep_id}, id={id}'\n        })\n    \n    logger.debug(f\"Payment data loaded: {payment_row.get('REFER')}\")\n\n# Read parsed address fields from PostgreSQL\nwith initDbSession(database='default').cursor() as c:\n    address_sql = \"\"\"\n        select \n            rcv_postal_code, rcv_country, rcv_region, rcv_city, rcv_street, rcv_building,\n            snd_postal_code, snd_country, snd_region, snd_city, snd_street, snd_building\n        from swift_out_fields\n        where dep_id = %(dep_id)s and id = %(id)s\n    \"\"\"\n    \n    c.execute(address_sql, {'dep_id': dep_id, 'id': id})\n    address_row = fetchone(c)\n    \n    if not address_row:\n        logger.warning(f\"No parsed address data found for dep_id={dep_id}, id={id}. Using empty addresses.\")\n        address_row = {}\n\n# Generate XML\nlogger.info(\"Generating pacs.008 XML...\")\nxml_content = generate_pacs008_xml(payment_row, address_row)\n\nlogger.debug(f\"Generated XML length: {len(xml_content)} bytes\")\n\n# Save XML to database\nwith initDbSession(database='default').cursor() as c:\n    update_sql = \"\"\"\n        update swift_out_fields\n        set content = %(content)s,\n            modified = now()\n        where dep_id = %(dep_id)s and id = %(id)s\n    \"\"\"\n    \n    c.execute(update_sql, {\n        'dep_id': dep_id,\n        'id': id,\n        'content': xml_content\n    })\n    \n    if c.rowcount == 0:\n        # Record doesn't exist, insert it\n        insert_sql = \"\"\"\n            insert into swift_out_fields (dep_id, id, content, modified)\n            values (%(dep_id)s, %(id)s, %(content)s, now())\n        \"\"\"\n        c.execute(insert_sql, {\n            'dep_id': dep_id,\n            'id': id,\n            'content': xml_content\n        })\n    \n    c.connection.commit()\n    logger.info(f\"XML saved to swift_out_fields for dep_id={dep_id}, id={id}\")\n\nlogger.info(\"✓ XML generation completed successfully\")\n\n"
            },
            "sql": {}
        }
    },
    "actions": [],
    "filter": {},
    "references": {},
    "js": {
        "setStatusTimer": "console.log('==================') ;\nconsole.log(arguments[0]    ) ;\nfunction updateDeploymentsStatus(){\n    \n    const activeTask = tm.getActiveTask();\n    console.log(activeTask);\n    \n    if (activeTask && activeTask.title == \"SWIFT Input Jobs\"){\n        if (context.modified){\n            context.updateTimer = setTimeout(updateDeploymentsStatus, 5000);\n            return\n        }\n        console.log(1, activeTask.data);\n        if (activeTask.data.$selectedRow){\n            activeTask.data.$selectedRow.created = new Date();\n        };\n        console.log(10500);\n        //forceRefreshList();\n        context.updateTimer = setTimeout(updateDeploymentsStatus, 5000);\n        \n        \n    }\n}\n\nif (context.updateTimer){\n    clearInterval(context.updateTimer);\n}\nupdateDeploymentsStatus();\n",
        "runJob": "console.log('runJob', paramaters);"
    }
}