{
    "lists": {
        "default": {
            "columns": {
                "DVAL": {
                    "title": "Dval",
                    "width": 120,
                    "fields": {
                        "DVAL": {
                            "format": "date"
                        }
                    }
                },
                "WORK_DEP": {
                    "title": "Department",
                    "width": 100
                },
                "TXT_PAY": {
                    "title": "Sender",
                    "flex": 1
                },
                "TXT_BEN": {
                    "title": "Receiver",
                    "flex": 1
                },
                "SDOK": {
                    "title": "Amount",
                    "cellStyle": {
                        "textAlign": "right"
                    },
                    "fields|": {
                        "NSDOK": {
                            "format": "currency"
                        },
                        "VAL_CODE": {}
                    }
                },
                "STATE_CODE": {
                    "title": "State",
                    "width": 175,
                    "control": "chip",
                    "decode": {
                        "DEL": {
                            "value": "Удален",
                            "color": "#2D9CDB"
                        },
                        "POST": {
                            "value": "Исполнен",
                            "color": "#F2994A"
                        },
                        "FIN": {
                            "value": "Подтвержден",
                            "color": "#F2994A"
                        },
                        "READY2SEND": {
                            "value": "Передан на отправку",
                            "color": "#00AA44"
                        },
                        "STF": {
                            "value": "Штафель",
                            "color": "#00AA44"
                        },
                        "WAITROUTE": {
                            "value": "Требует маршрутизации",
                            "color": "#EB5757"
                        }
                    }
                }
            },
            "id": "ID",
            "actions": [
                {
                    "title": "Refresh",
                    "icon": "refresh",
                    "mini": true,
                    "command": {
                        "type": "standard",
                        "call": "refresh"
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "View",
                    "icon": "view",
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "",
                        "params": {
                            "object": "swiftOutcome",
                            "form": "appEditTask",
                            "objectKey$": "{dep_id: $listRow.DEP_ID, id: $listRow.ID}"
                        }
                    }
                },
                {
                    "title": "Journal",
                    "icon": "history",
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "",
                        "params": {
                            "object": "easyflow",
                            "form": "objectJournalTask",
                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                        }
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Operations",
                    "split": true,
                    "actions": [
                        {
                            "title": "Send",
                            "command": {
                                "type": "js",
                                "js": "backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'send', params: {dep_id: $listRow.DEP_ID, id: $listRow.ID}})"
                            },
                            "confirm": {
                                "message$": "`Send?`",
                                "yes": "Yes",
                                "no": "No"
                            },
                            "disabled$": "['DEL', 'TEST'].includes($listRow.STATE_CODE) "
                        },
                        {
                            "title": "Send Undo",
                            "command": {
                                "type": "js",
                                "js": "backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'sendUndo', params: {dep_id: $listRow.DEP_ID, id: $listRow.ID}})"
                            },
                            "confirm": {
                                "message$": "`Undo Send?`",
                                "yes": "Yes",
                                "no": "No"
                            },
                            "visible$": "['DEL', 'TEST'].includes($listRow.STATE_CODE) "
                        }
                    ],
                    "disabled$": "!$listRow"
                }
            ],
            "filter": {
                "form": {
                    "style": {
                        "width": "360px",
                        "overflow": "hidden",
                        "paddingRight": "0px"
                    },
                    "title": "Filter",
                    "className": "panel vertical",
                    "$": {
                        "@fields": {
                            "className": "vertical",
                            "style": {
                                "paddingRight": "8px",
                                "overflowY": "auto"
                            },
                            "$": {
                                "@app": {
                                    "title": "Payment",
                                    "className": "vertical",
                                    "$": {
                                        "@period": {
                                            "$": {
                                                "@chips": {
                                                    "$": {
                                                        "week": {
                                                            "label": "Week",
                                                            "action": {
                                                                "name": "setWeek"
                                                            },
                                                            "control": "Chip",
                                                            "controlProps": {
                                                                "style": {
                                                                    "height": "24px"
                                                                }
                                                            }
                                                        },
                                                        "month": {
                                                            "label": "Month",
                                                            "action": {
                                                                "name": "setMonth"
                                                            },
                                                            "control": "Chip",
                                                            "controlProps": {
                                                                "style": {
                                                                    "height": "24px"
                                                                }
                                                            }
                                                        },
                                                        "3months": {
                                                            "label": "3 Months",
                                                            "action": {
                                                                "name": "set3Months"
                                                            },
                                                            "control": "Chip",
                                                            "controlProps": {
                                                                "style": {
                                                                    "height": "24px"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "className": "horizontal"
                                                },
                                                "@dates": {
                                                    "$": {
                                                        "fromDate": {
                                                            "label": "From",
                                                            "style": {
                                                                "flexGrow": 1
                                                            },
                                                            "control": "DateEdit"
                                                        },
                                                        "toDate": {
                                                            "label": "To",
                                                            "style": {
                                                                "flexGrow": 1
                                                            },
                                                            "control": "DateEdit"
                                                        }
                                                    },
                                                    "className": "horizontal"
                                                }
                                            },
                                            "actions": {
                                                "setWeek": {
                                                    "jsScript": "let dt = new Date(); let df = new Date(); df.setDate(df.getDate()-7); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                                },
                                                "setMonth": {
                                                    "jsScript": "let dt = new Date(); let df = new Date(); df.setMonth(df.getMonth()-1); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                                },
                                                "set3Months": {
                                                    "jsScript": "let dt = new Date(); let df = new Date(); df.setMonth(df.getMonth()-3); mem.fromDate = df.toISOString().substring(0,10); mem.toDate = dt.toISOString().substring(0,10);"
                                                }
                                            },
                                            "className": "vertical"
                                        },
                                        "txtPay": {
                                            "label": "Sender",
                                            "control": "TextEdit"
                                        },
                                        "txtBen": {
                                            "control": "TextEdit",
                                            "label": "Receiver"
                                        },
                                        "state": {
                                            "label": "State",
                                            "control": "SelectList",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "value": "Удален",
                                                        "name": "Удален"
                                                    },
                                                    {
                                                        "value": "Подтвержден",
                                                        "name": "Подтвержден"
                                                    },
                                                    {
                                                        "value": "Исполнен",
                                                        "name": "Исполнен"
                                                    },
                                                    {
                                                        "value": "Передан на отправку",
                                                        "name": "Передан на отправку"
                                                    },
                                                    {
                                                        "value": "Штафель",
                                                        "name": "Штафель"
                                                    },
                                                    {
                                                        "value": "Требует маршрутизации",
                                                        "name": "Требует маршрутизации"
                                                    }
                                                ]
                                            }
                                        },
                                        "userName": {
                                            "control": "TextEdit",
                                            "label": "Initiator"
                                        }
                                    }
                                },
                                "@loan": {
                                    "className": "vertical",
                                    "title": "Amount",
                                    "$": {
                                        "@amount": {
                                            "className": "horizontal",
                                            "$": {
                                                "minAmount": {
                                                    "control": "CurrencyField",
                                                    "label": "Amount from"
                                                },
                                                "maxAmount": {
                                                    "control": "CurrencyField",
                                                    "label": "Amount to"
                                                }
                                            }
                                        },
                                        "currency": {
                                            "control": "SelectList",
                                            "label": "Currency",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "name": "UZS",
                                                        "value": "UZS"
                                                    },
                                                    {
                                                        "name": "USD",
                                                        "value": "USD"
                                                    },
                                                    {
                                                        "name": "EUR",
                                                        "value": "EUR"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnClear": {
                                    "control": "Button",
                                    "label": "Clear",
                                    "controlProps": {
                                        "variant": "outlined",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "clean"
                                    }
                                },
                                "btnApply": {
                                    "control": "Button",
                                    "label": "Apply",
                                    "controlProps": {
                                        "variant": "contained",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "js": "actions.apply(mem);",
                                        "params": {
                                            "disableUpdate": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "clean": {
                            "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                        }
                    }
                },
                "query": {
                    "fromDate": {
                        "sql": "dval >= to_date(:fromDate, 'yyyy-mm-dd')"
                    },
                    "toDate": {
                        "sql": "dval <= to_date(:toDate, 'yyyy-mm-dd')"
                    },
                    "state": {
                        "sql": "state = :state"
                    },
                    "txtPay": {
                        "sql": "upper(txt_pay) like '%%'||upper(:txtPay)||'%%'"
                    },
                    "txtBen": {
                        "sql": "upper(txt_Ben) like '%%'||upper(:txtBen)||'%%'"
                    },
                    "maxAmount": {
                        "sql": "nsdok <= :maxAmount"
                    },
                    "minAmount": {
                        "sql": "nsdok >= :minAmount"
                    },
                    "currency": {
                        "sql": "val_code = :currency"
                    }
                }
            },
            "events": {
                "onTaskCreated": [
                    {
                        "js": "task.data.$isFilterOpen = true;"
                    }
                ],
                "onRowDoubleClicked": {
                    "js": "tm.newTask({path: '/aoa/ObjectTask', title: `Заявка ${$listRow.appNo} от ${$formatters.date($listRow.dord)}`, params: {object: 'app', form: 'appEditTask', objectKey: {dep_id: params.selectedRow.dep_id, id: params.selectedRow.id}, componentPath: params.selectedRow.baseComponent}})"
                }
            }
        }
    },
    "forms": {
        "editFormInner": {
            "title": "Payment",
            "className": "vertical",
            "style": {
                "width": "860px"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "padding": "4px"
                    },
                    "$": {
                        "@record": {
                            "title": "Input Fields",
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "TXT_PAY": {
                                            "label": "Sender",
                                            "readOnly$": true,
                                            "style": {
                                                "width": "860px"
                                            },
                                            "control": "TextEdit"
                                        },
                                        "TXT_BEN": {
                                            "label": "Receiver",
                                            "readOnly$": true,
                                            "style": {
                                                "width": "860px"
                                            },
                                            "control": "TextEdit"
                                        },
                                        "@cost": {
                                            "className": "horizontal",
                                            "$": {
                                                "NSDOK": {
                                                    "label": "Amount",
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "CurrencyField",
                                                    "controlOpts": {
                                                        "currencyAttr": "cost_currency"
                                                    },
                                                    "readOnly$": true
                                                },
                                                "DVAL": {
                                                    "label": "Dval",
                                                    "style": {
                                                        "width": "280px"
                                                    },
                                                    "control": "DateEdit",
                                                    "readOnly$": true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@out_fields": {
                            "title": "Output Fields",
                            "className": "vertical",
                            "style": {
                                "padding": "4px",
                                "margin-top": "10px"
                            },
                            "$": {
                                "out_fields": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "field1": {
                                            "label": "Filed1",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "control": "TextEdit"
                                        },
                                        "field2": {
                                            "label": "Filed2",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "control": "TextEdit"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "justifyContent": "end"
                    },
                    "$": {
                        "btnRecalc": {
                            "label": "Re-Calc Output Feilds",
                            "control": "Button",
                            "controlProps": {
                                "variant": "outlined",
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'recalc', params: {app: mem}}).then((r)=>{ tm.setTaskTitle(task.key, `Paymment`); })"
                                },
                                {
                                    "js": "return !task.params?.componentPath && task.params?.objectKey && backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'get', params: {...task.params.objectKey}}).then((r)=>{mem.record=r; mem.out_fields =r;if(!task.params.taskId)action({name: 'onSetTaskTitle'});  forceUpdate();})"
                                }
                            ]
                        },
                        "btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "controlProps": {
                                "variant": "outlined",
                                "color": "primary"
                            },
                            "action": {
                                "js": "frontend.closeTask()",
                                "disableUpdate": true
                            }
                        },
                        "btnApply": {
                            "label": "Save",
                            "control": "Button",
                            "controlProps": {
                                "variant": "contained",
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "if (!validate()){throw 'Abort';}"
                                },
                                {
                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'save', params: {app: mem}}).then((r)=>{ tm.setTaskTitle(task.key, `Paymment`); })"
                                },
                                {
                                    "js": "frontend.closeTask()"
                                }
                            ]
                        }
                    }
                }
            }
        },
        "appEditTask": {
            "title": "SWIFT Income",
            "className": "vertical task task-panel",
            "style": {
                "height": "100%",
                "overflow": "hidden"
            },
            "$": {
                "@form": {
                    "style": {
                        "padding": "8px",
                        "overflow": "auto"
                    },
                    "form": "editFormInner"
                }
            },
            "actions": {
                "onTaskCreated": [
                    {
                        "js": "return !task.params?.componentPath && task.params?.objectKey && backend.post('/aoa/execObjectMethod', {object: 'swiftOutcome', method: 'get', params: {...task.params.objectKey}}).then((r)=>{mem.record=r; mem.out_fields =r;if(!task.params.taskId)action({name: 'onSetTaskTitle'});  forceUpdate();})"
                    },
                    {
                        "js": "if(task.params.app){mem.app = task.params.app} else if(!task.params?.componentPath && !task.params?.objectKey){mem.app = task.data.forms}"
                    },
                    {
                        "js": "context.readOnly = (task.params && 'readOnly' in task.params)?task.params.readOnly : mem.app?.state && mem.app?.state != 'START'"
                    }
                ],
                "onSetTaskTitle": {
                    "js": "tm.setTaskTitle(task.key, `Payment`);"
                }
            }
        }
    },
    "methods": {
        "getList": {
            "script": {
                "py": "import time\nfrom apng_core.db import fetchall\nimport logging\nlogger = logging.getLogger('loanapp')\n\n\ndef filterModelRank(filterModel):\n    default_rank = 1\n    ranks = {\n        'appId': 1000,\n        'appNo': 1000,\n        'fromDate': 0,\n        'toDate': 0,\n    }\n    \n    rank = 0\n    \n    for k in filterModel.keys():\n        r = ranks.get(k)\n        if r:\n            rank += r\n        else:\n            rank += default_rank\n    return rank\n\ndef doQuery(sql, params):\n    with initDbSession(application='colvir_cbs').cursor() as cursor:\n        #print(sql)\n        start_time = time.time()\n        cursor.execute(sql, params)\n        #logger.debug('getApplicationList execute in %0.2f', time.time()-start_time)\n        \n        start_time = time.time()\n        d = fetchall(cursor)\n        #logger.debug('getApplicationList fetch in %0.2f', time.time()-start_time)\n\n    return d\n\ndef getApplicationList(params):\n    \n    rawSQL =\"\"\"\n      --begin c_pkgconnect.pOpen; end;\n--begin c_pkgconnect.popen; end;\n\nselect /*+ rule*/\n  J.DVAL, J.DEP_ID, J.ID, \n  J.REFER,\n  J.DIMPORT,\n  SUBSTR(T_PKGMONEY.FTRNVALUETOMONEY(J.SDOK),1,27) as SDOK,\n  J.SDOK as NSDOK,\n -- P_PKGORD_UTL.fGetCodeBclExt(j.DEP_ID, j.ID) as CODE_BCL,\n  --P_PKGORD_UTL.fGetCodeAclExt(j.DEP_ID, j.ID) as CODE_ACL,\n  --P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID) as CODE_BCR,\n  --P_PKGORD_UTL.fGetCodeAcrExt(j.DEP_ID, j.ID) as CODE_ACR,\n  SUBSTR(decode(j.INCOMFL, '1', TXT_BEN, TXT_PAY),1,250) TXT_PAY,\n  SUBSTR(decode(j.INCOMFL, '1', TXT_PAY, TXT_BEN),1,250) TXT_BEN,\n  j.MIDDLE_BNK_1, j.MIDDLE_ACC_1,\n  O.POSTFL,O.FLZO,\n  nvl(J.PAYORD_CODE, O.CODE) as ORD_CODE,\n  O.DRECV,O.VAL_ID, J.PRIORITY,\n  V.CODE as VAL_CODE,\n  J.TXT_DSCR||J.TXT_ADD as TXT_DSCR,\n  ST.CODE STATE_CODE,\n  ST.NAME as STATE, ST.COLOR as STATCOLOR, ST.FINISHFL, PR.ID as PROC_ID, PR.BOP_ID, PR.NSTAT,\n  P_PkgSvd.fIsSvd(J.DEP_ID, J.ID) as SVD_FLAG,\n  J.PAYSND_ID,\n  J.PAYRCV_ID,\n  S1.CODE as PAYRCV_CODE,\n  S2.CODE as PAYSND_CODE,\n  C_PKGRATIFY.isRatWait(PR.ID) as VRFFL,\n  P_PkgErr.fHasErr(J.DEP_ID, J.ID) as ERRFL,\n  P_PkgErr.fHasNotInfoErr(J.DEP_ID, J.ID) as ERRFL2,\n  t_pkgRunOprUtl.fIsPrcMember(J.DEP_ID, J.ID, 'PSP_IQS', 'PAY') as IN_IQSFL,\n  nvl(E.DELAYFL, '0') as DELAYFL\n  , j.SPEEDFL\n  --, COALESCE( P_PKGPAYSYST.fGetBnkCodeBy_AbnId(p.RECEVIER_ID, P_PKGPAYSYST.fGetChnlBy_PSys(J.PAYRCV_ID)),  \n  --    C_PKGIMEABN.fImeAdrName(p.RECEVIER_ID) ) RCV_MESS_BNK \n  , J.PAYTYPE\n  , j.EARLYFL\n  , j.GUARANTFL\n  , case when nvl(j.SPEEDFL,'0')='1' or nvl(j.EARLYFL,'0')='1' or nvl(j.GUARANTFL,'0')='1' then 1 else 0 end PAYOPTIONFL\n  , decode(nvl(PATTR.CVALUE,'0'),'1','1','2','0','3','0','4','1','5','0','') as POS_ATTR\n  , P_PKGORD_UTL.fGetPcktRefer(J.DEP_ID, J.ID) REFER_SV\n  , P_PKGORD_UTL.fGetMsgRefer(J.DEP_ID, J.ID) REFER_MSG\n  --, P_PKGORD_UTL.fGetMsgStateName(J.DEP_ID, J.ID,1) as MSGSTATE\n  , J.UETR_CODE\n  , J.REAL_TIME_PAY\n  , J.SESSION_CODE\n  , case when DS.CODE = 'PSP_IN' and j.CLIBEN_ID is not null then \n     C_PkgBS_DOM.DName('I_EXC_PAYVKSTATE', P_PKG_I_INTEGR.fGetPayVKState(j.DEP_ID, j.ID), 'N') else null end PayVKStateName\n  , J.WORK_DEP_ID\n  , C_PKGDEP.fGetCodeDep(J.WORK_DEP_ID) WORK_DEP \n  , J.INSTR_IDN\n  , J.UETR_CODE_LOCAL\n  , decode(j.INCOMFL, '1', j.CLIBEN_DEP_ID, j.CLI_DEP_ID) as CLI_DEP_ID\n  , decode(j.INCOMFL, '1', j.CLIBEN_ID, j.CLI_ID) as CLI_ID\n  , decode(j.INCOMFL, '1', j.CLI_DEP_ID, j.CLIBEN_DEP_ID) as CLIBEN_DEP_ID\n  , decode(j.INCOMFL, '1', j.CLI_ID, j.CLIBEN_ID) as CLIBEN_ID\n  , decode(j.INCOMFL, '1', j.BEN_JURFL, j.PAY_JURFL) as CLI_JURFL\n  , decode(j.INCOMFL, '1', j.PAY_JURFL, j.BEN_JURFL) as CLIBEN_JURFL\n  , J.VO\n  , substr(bs_dom.DName('P_ORD_VO', J.VO), 1, 250) as VO_NAME\n  , P_PKGPNS.fChkOrdPens(J.DEP_ID, J.ID) as HASDTLFL\n  , SS.CODE as STF_CODE\nfrom  P_ORDROUTE P, C_USR U, P_ORDEXT E,\n      P_SYS_STD S1, P_SYS_STD S2,\n      T_BOP_STAT ST, T_BOP_DSCR DS, T_PROCESS PR, T_PROCMEM PM, T_VAL_STD V, T_ORD O, P_ORD J\n      ,T_PROCDET PATTR\n    , P_STFORD SF\n    , P_STF_STD SS\nwhere O.DEP_ID = J.DEP_ID\n  and O.ID = J.ID\n  and V.ID = O.VAL_ID\n  and PM.ORD_ID = O.ID\n  and PM.DEP_ID = O.DEP_ID\n  and PM.MAINFL IN ('1', CASE WHEN ST.CODE = 'STF' AND DS.CODE IN ('PSP_IN', 'PSP_OUT') THEN '0' ELSE '1' END)\n  and PR.ID = PM.ID\n  and DS.ID = PR.BOP_ID\n  and ST.ID = DS.ID\n  and ST.NORD = PR.NSTAT\n  and P.DEP_ID(+) = j.DEP_ID\n  and P.ID(+) = J.ID\n  and U.ID(+) = O.ID_US\n  and E.ID(+) = J.EXT_ID\n  and S1.ID(+) = J.PAYRCV_ID\n  and S2.ID(+) = J.PAYSND_ID\n  and SF.DEP_ID(+) = J.DEP_ID\n  and SF.ORD_ID(+) = J.ID\n  and SS.ID(+) = SF.STF_ID\n  and O.PLANFL = 0\n  and exists (\n    select 1 from DUAL\n   where C_PKGGRANT.FCHKGRNDEP(O.DEP_ID, O.ID, 3)=1)  \n  and PATTR.ID(+) = PR.ID and PATTR.CODE(+) = 'POS'\n  and BS_OPERATION.fIsParentWait(PR.ID) = 0 \n  --and (DS.CODE||'' = 'PSP_OUT' and G_PKGBNKGRP.fChkOwnBnkCode(J.CODE_BCR) = 0) \n  --and (P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID) is null or G_pkgBnk.fBnkOwnState(P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID))=0)\n    --and J.DIMPORT BETWEEN to_date('28.01.2021') and to_date('28.01.2021')+1\n   --and J.DVAL BETWEEN to_date('28.01.2021') and to_date('28.01.2021')+1\n        and ds.CODE||'' = 'PSP_OUT'\n    \"\"\"\n    \n    accessSQL = \"\"\"\n        exists (select 1 from DUAL where GRN$L_REQDEA$.fAccess(DEP_ID, ID, 3)=1)\n    \"\"\"\n    \n    dep_id     = params.get('dep_id')\n    ord_id     = params.get('id')\n    \n    if ord_id is None and params.get('request',{}).get('filterModel2', {}).get('idReq'):\n        import re\n        r = re.match(r'([0-9]+)([ ]*\\,[ ]*)([0-9]+)', params['request']['filterModel2']['idReq'])\n        if r and len(r.groups())==3:\n            dep_id=int(r[1])\n            ord_id=int(r[3])\n        else:\n            raise UserException('Неправильный формат идентификатора заявки, используйте dep_id,id')\n\n    #raise Exception (str(params))\n    if dep_id and ord_id:\n        rawSQL = rawSQL + ' and r.DEP_ID=to_number(:dep_id) and r.ID=to_number(:ord_id)'\n        q  = doQuery(rawSQL, {\n            'dep_id': dep_id,\n            'ord_id': ord_id,\n        })\n    elif params.get('appId'):\n        rawSQL = rawSQL + ' and re.appId=to_number(:appId)'\n        q  = doQuery(rawSQL, {\n            'appId': params['appId'],\n        })\n        \n    else:\n        request = params.get('request')\n\n        queryParams = {}\n        \n        rank = 0\n        \n        if request:\n            filterModel2 = request.get('filterModel2', {})\n            if filterModel2.get('filterData'):\n                filterModel2 = filterModel2['filterData']\n            \n            rank = filterModelRank(filterModel2)\n\n            #if (rank==0):\n            #    rawSQL = 'select * from (' + rawSQL + ')' + ' where \"dord\" between P_OPERDAY-100 and P_OPERDAY+7 '\n                \n                \n            if filterModel2:\n                from apng_core.aoa.services import filter as aoa\n                filterDef = aoa.buildFilterSql({\n                    'objectCode': 'swiftInputJob',\n                    'filterData': filterModel2\n                })\n                #raise Exception (filterDef['sql'])\n                filter_text = filterDef['sql'].replace('\"','')\n                rawSQL =  'select * from (' + rawSQL + ') '+ filter_text\n                #raise Exception (rawSQL)\n                queryParams = {\n                    **queryParams,\n                    **filterDef['params']\n                }\n        \n        #if rank==0:\n        #    import re\n        #    rawSQL = re.sub('{index_sort}', '+index_desc(r, ie_l_reqdea_sort)', rawSQL)\n        #else:\n        #    rawSQL = rawSQL + ' ORDER BY \"dord\" desc, \"appNo\" desc'\n        \n\n        #rawSQL = rawSQL + ' ORDER BY \"dord\" desc, \"appNo\" desc'\n\n        \n        #rawSQL = 'select * from (' + rawSQL + ') where ' + accessSQL \n        \n        if request and request.get('startRow') is not None:\n            # Ограничение по количеству записей\n            startRow = int(request.get('startRow'))\n            endRow = int(request.get('endRow'))\n            if request:\n                rawSQL = rawSQL + \\\n                    ' OFFSET %s ROWS FETCH NEXT %s ROWS ONLY' % (startRow, endRow-startRow+1)\n        \n        q = doQuery(rawSQL, queryParams)\n        \n    return q\n    \nlst = getApplicationList(parameters)\n\ndata = []\nfor r in lst:\n    row = r\n    #del row['JSON']\n    data.append(row)\n\n"
            },
            "sql": {}
        },
        "get": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\n\nSQL = \"\"\"\nselect /*+ rule*/\n  J.DVAL, J.DEP_ID, J.ID, \n  J.REFER,\n  J.DIMPORT,\n  SUBSTR(T_PKGMONEY.FTRNVALUETOMONEY(J.SDOK),1,27) as SDOK,\n  J.SDOK as NSDOK,\n -- P_PKGORD_UTL.fGetCodeBclExt(j.DEP_ID, j.ID) as CODE_BCL,\n  --P_PKGORD_UTL.fGetCodeAclExt(j.DEP_ID, j.ID) as CODE_ACL,\n  --P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID) as CODE_BCR,\n  --P_PKGORD_UTL.fGetCodeAcrExt(j.DEP_ID, j.ID) as CODE_ACR,\n  SUBSTR(decode(j.INCOMFL, '1', TXT_BEN, TXT_PAY),1,250) TXT_PAY,\n  SUBSTR(decode(j.INCOMFL, '1', TXT_PAY, TXT_BEN),1,250) TXT_BEN,\n  j.MIDDLE_BNK_1, j.MIDDLE_ACC_1,\n  O.POSTFL,O.FLZO,\n  nvl(J.PAYORD_CODE, O.CODE) as ORD_CODE,\n  O.DRECV,O.VAL_ID, J.PRIORITY,\n  V.CODE as VAL_CODE,\n  J.TXT_DSCR||J.TXT_ADD as TXT_DSCR,\n  ST.CODE STATE_CODE,\n  ST.NAME as STATE, ST.COLOR as STATCOLOR, ST.FINISHFL, PR.ID as PROC_ID, PR.BOP_ID, PR.NSTAT,\n  P_PkgSvd.fIsSvd(J.DEP_ID, J.ID) as SVD_FLAG,\n  J.PAYSND_ID,\n  J.PAYRCV_ID,\n  S1.CODE as PAYRCV_CODE,\n  S2.CODE as PAYSND_CODE,\n  C_PKGRATIFY.isRatWait(PR.ID) as VRFFL,\n  P_PkgErr.fHasErr(J.DEP_ID, J.ID) as ERRFL,\n  P_PkgErr.fHasNotInfoErr(J.DEP_ID, J.ID) as ERRFL2,\n  t_pkgRunOprUtl.fIsPrcMember(J.DEP_ID, J.ID, 'PSP_IQS', 'PAY') as IN_IQSFL,\n  nvl(E.DELAYFL, '0') as DELAYFL\n  , j.SPEEDFL\n  --, COALESCE( P_PKGPAYSYST.fGetBnkCodeBy_AbnId(p.RECEVIER_ID, P_PKGPAYSYST.fGetChnlBy_PSys(J.PAYRCV_ID)),  \n  --    C_PKGIMEABN.fImeAdrName(p.RECEVIER_ID) ) RCV_MESS_BNK \n  , J.PAYTYPE\n  , j.EARLYFL\n  , j.GUARANTFL\n  , case when nvl(j.SPEEDFL,'0')='1' or nvl(j.EARLYFL,'0')='1' or nvl(j.GUARANTFL,'0')='1' then 1 else 0 end PAYOPTIONFL\n  , decode(nvl(PATTR.CVALUE,'0'),'1','1','2','0','3','0','4','1','5','0','') as POS_ATTR\n  , P_PKGORD_UTL.fGetPcktRefer(J.DEP_ID, J.ID) REFER_SV\n  , P_PKGORD_UTL.fGetMsgRefer(J.DEP_ID, J.ID) REFER_MSG\n  --, P_PKGORD_UTL.fGetMsgStateName(J.DEP_ID, J.ID,1) as MSGSTATE\n  , J.UETR_CODE\n  , J.REAL_TIME_PAY\n  , J.SESSION_CODE\n  , case when DS.CODE = 'PSP_IN' and j.CLIBEN_ID is not null then \n     C_PkgBS_DOM.DName('I_EXC_PAYVKSTATE', P_PKG_I_INTEGR.fGetPayVKState(j.DEP_ID, j.ID), 'N') else null end PayVKStateName\n  , J.WORK_DEP_ID\n  , C_PKGDEP.fGetCodeDep(J.WORK_DEP_ID) WORK_DEP \n  , J.INSTR_IDN\n  , J.UETR_CODE_LOCAL\n  , decode(j.INCOMFL, '1', j.CLIBEN_DEP_ID, j.CLI_DEP_ID) as CLI_DEP_ID\n  , decode(j.INCOMFL, '1', j.CLIBEN_ID, j.CLI_ID) as CLI_ID\n  , decode(j.INCOMFL, '1', j.CLI_DEP_ID, j.CLIBEN_DEP_ID) as CLIBEN_DEP_ID\n  , decode(j.INCOMFL, '1', j.CLI_ID, j.CLIBEN_ID) as CLIBEN_ID\n  , decode(j.INCOMFL, '1', j.BEN_JURFL, j.PAY_JURFL) as CLI_JURFL\n  , decode(j.INCOMFL, '1', j.PAY_JURFL, j.BEN_JURFL) as CLIBEN_JURFL\n  , J.VO\n  , substr(bs_dom.DName('P_ORD_VO', J.VO), 1, 250) as VO_NAME\n  , P_PKGPNS.fChkOrdPens(J.DEP_ID, J.ID) as HASDTLFL\n  , SS.CODE as STF_CODE\nfrom  P_ORDROUTE P, C_USR U, P_ORDEXT E,\n      P_SYS_STD S1, P_SYS_STD S2,\n      T_BOP_STAT ST, T_BOP_DSCR DS, T_PROCESS PR, T_PROCMEM PM, T_VAL_STD V, T_ORD O, P_ORD J\n      ,T_PROCDET PATTR\n    , P_STFORD SF\n    , P_STF_STD SS\nwhere O.DEP_ID = J.DEP_ID\n  and O.ID = J.ID\n  and V.ID = O.VAL_ID\n  and PM.ORD_ID = O.ID\n  and PM.DEP_ID = O.DEP_ID\n  and PM.MAINFL IN ('1', CASE WHEN ST.CODE = 'STF' AND DS.CODE IN ('PSP_IN', 'PSP_OUT') THEN '0' ELSE '1' END)\n  and PR.ID = PM.ID\n  and DS.ID = PR.BOP_ID\n  and ST.ID = DS.ID\n  and ST.NORD = PR.NSTAT\n  and P.DEP_ID(+) = j.DEP_ID\n  and P.ID(+) = J.ID\n  and U.ID(+) = O.ID_US\n  and E.ID(+) = J.EXT_ID\n  and S1.ID(+) = J.PAYRCV_ID\n  and S2.ID(+) = J.PAYSND_ID\n  and SF.DEP_ID(+) = J.DEP_ID\n  and SF.ORD_ID(+) = J.ID\n  and SS.ID(+) = SF.STF_ID\n  and O.PLANFL = 0\n  and exists (\n    select 1 from DUAL\n   where C_PKGGRANT.FCHKGRNDEP(O.DEP_ID, O.ID, 3)=1)  \n  and PATTR.ID(+) = PR.ID and PATTR.CODE(+) = 'POS'\n  and BS_OPERATION.fIsParentWait(PR.ID) = 0 \n  and ds.CODE||'' = 'PSP_OUT'\n  --and (DS.CODE||'' = 'PSP_OUT' and G_PKGBNKGRP.fChkOwnBnkCode(J.CODE_BCR) = 0) \n  --and (P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID) is null or G_pkgBnk.fBnkOwnState(P_PKGORD_UTL.fGetCodeBcrExt(j.DEP_ID, j.ID))=0)\n    --and J.DIMPORT BETWEEN to_date('28.01.2021') and to_date('28.01.2021')+1\n   --and J.DVAL BETWEEN to_date('28.01.2021') and to_date('28.01.2021')+1\n        \n  and j.id = %(id)s \n  and  j.dep_id = %(dep_id)s \n\"\"\"\nwith initDbSession(application='colvir_cbs').cursor() as c:\n  c.execute(SQL, {'id': parameters.get('id'), 'dep_id': parameters.get('dep_id')})\n  data = fetchone(c)\n    \nwith initDbSession(database='default').cursor() as c:   \n    SQL = \"\"\"\n        select * \n        from swift_out_fields \n        where id = %(id)s \n        and  dep_id = %(dep_id)s \n    \"\"\"\n    c.execute(SQL, {'id': parameters.get('id'), 'dep_id': parameters.get('dep_id')})\n    data_out = fetchone(c)\n    \nif data_out:\n    data = data | data_out or {}  \n#raise Exception(data)\n"
            },
            "sql": {}
        },
        "save": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\nfrom apng_core.auth import getUser\n\n\nwith initDbSession(database='default').cursor() as c:\n    SQL = \"\"\"\n        insert into swift_out_fields (dep_id, id, field1, field2)\n        values (%(dep_id)s, %(id)s, %(field1)s, %(field2)s)\n        on conflict (dep_id, id)\n        do update set\n            field1 = excluded.field1,\n            field2 = excluded.field2;\n    \"\"\"\n    #raise Exception( parameters)\n    try:\n      user = getUser()\n      user_str = user.code\n      \n      c.execute(SQL, { 'dep_id': parameters.get('app').get('record').get('DEP_ID'), 'id': parameters.get('app').get('record').get('ID'), 'field1': parameters.get('app').get('out_fields').get('field1'), 'field2': parameters.get('app').get('out_fields').get('field2') })\n      #r = fetchone(c)\n      #data = { 'id': r['id'], 'dep_id': r['dep_id'] }\n    except Exception as e:\n      raise UserException({'message': str(e)})\n"
            },
            "sql": {}
        },
        "delete": {
            "script": {
                "py": "SQL = 'DELETE FROM swift_input_job WHERE id = %(id)s'\nwith initDbSession(database='default').cursor() as c:\n  c.execute(SQL, {'id': parameters.get('id')})\n  data = {'success': True}\n"
            },
            "sql": {}
        },
        "DATABASE_UPDATE": {
            "sql": {
                "sqlType": "script",
                "database": "default",
                "sql": "create extension if not exists \"pgcrypto\";\n\ncreate table if not exists swift_input_job (\n  id uuid primary key default gen_random_uuid(),\n  state text not null,\n  created timestamp without time zone not null default now(),\n  folder_in text not null,\n  folder_out text not null,\n  \"user\" character varying(60) not null\n);\n\ncreate table if not exists swift_input_job_item (\n  id uuid primary key default gen_random_uuid(),\n  job_id uuid not null references swift_input_job(id) on delete cascade,\n  file_name text not null,\n  status text not null, -- init|success|fail\n  content bytea,\n  start_date timestamp without time zone default now(),\n  finish_date timestamp without time zone\n);\n\n\ncreate table if not exists swift_out_fields (\n    dep_id integer not null,\n    id integer not null,\n    field1 text,\n    field2 text,\n    modified timestamp without time zone,\n    primary key (dep_id, id)\n);  "
            },
            "script": {}
        },
        "send": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\nfrom apng_core.auth import getUser\n\n#raise Exception(parameters)\n\nwith initDbSession(application='colvir_cbs').cursor() as c:\n    SQL = \"\"\"\n        declare \n           sdep_id  int := :dep_id;\n           sid      int := :id;\n        begin\n            \n            raise_application_error(-20000,'send '||sdep_id||';'||sid);\n        end;\n    \"\"\"\n    try:\n      c.execute(SQL, { 'dep_id': parameters.get('dep_id'), 'id': parameters.get('id')})\n    except Exception as e:\n      raise UserException({'message': str(e)})\n"
            },
            "sql": {}
        },
        "sendUndo": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\nfrom apng_core.auth import getUser\n\n#raise Exception(parameters)\n\nwith initDbSession(application='colvir_cbs').cursor() as c:\n    SQL = \"\"\"\n        declare \n           sdep_id  int := :dep_id;\n           sid      int := :id;\n        begin\n            \n            raise_application_error(-20000,'send Undo = '||sdep_id||';'||sid);\n        end;\n    \"\"\"\n    try:\n      c.execute(SQL, { 'dep_id': parameters.get('dep_id'), 'id': parameters.get('id')})\n    except Exception as e:\n      raise UserException({'message': str(e)})\n"
            }
        },
        "recalc": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\nfrom apng_core.auth import getUser\nimport time\n\nwith initDbSession(database='default').cursor() as c:\n    SQL = \"\"\"\n        insert into swift_out_fields (dep_id, id, field1, field2)\n        values (%(dep_id)s, %(id)s, %(field1)s, %(field2)s)\n        on conflict (dep_id, id)\n        do update set\n            field1 = excluded.field1,\n            field2 = excluded.field2;\n    \"\"\"\n    #raise Exception( parameters)\n    try:\n      user = getUser()\n      user_str = user.code\n      \n      field_1_new_val = str(time.time())\n      field_2_new_val = str(time.time())\n      \n      c.execute(SQL, { \n            'dep_id': parameters.get('app').get('record').get('DEP_ID'), \n            'id': parameters.get('app').get('record').get('ID'), \n            'field1': field_1_new_val, \n            'field2': field_2_new_val \n          \n      })\n      #r = fetchone(c)\n      #data = { 'id': r['id'], 'dep_id': r['dep_id'] }\n    except Exception as e:\n      raise UserException({'message': str(e)})\n"
            }
        },
        "getInputList": {
            "sql": {},
            "script": {
                "py": "# Get all records from simple_list table\nfrom apng_core.db import fetchall\nfrom apng_core.exceptions import UserException\n\nSQL = \"\"\"\n    SELECT id, name\n    FROM swift_input\n\"\"\"\n\nwith initDbSession(database='default').cursor() as c:\n    try:\n        c.execute(SQL)\n        data = fetchall(c)\n    except Exception as e:\n        raise UserException({\n            'message': 'Error fetching records',\n            'description': 'SQL:\\n%s' % SQL\n        }).withError(e)\n"
            }
        }
    },
    "actions": [],
    "filter": {},
    "references": {},
    "js": {
        "setStatusTimer": "console.log('==================') ;\nconsole.log(arguments[0]    ) ;\nfunction updateDeploymentsStatus(){\n    \n    const activeTask = tm.getActiveTask();\n    console.log(activeTask);\n    \n    if (activeTask && activeTask.title == \"SWIFT Input Jobs\"){\n        if (context.modified){\n            context.updateTimer = setTimeout(updateDeploymentsStatus, 5000);\n            return\n        }\n        console.log(1, activeTask.data);\n        if (activeTask.data.$selectedRow){\n            activeTask.data.$selectedRow.created = new Date();\n        };\n        console.log(10500);\n        //forceRefreshList();\n        context.updateTimer = setTimeout(updateDeploymentsStatus, 5000);\n        \n        \n    }\n}\n\nif (context.updateTimer){\n    clearInterval(context.updateTimer);\n}\nupdateDeploymentsStatus();\n",
        "runJob": "console.log('runJob', paramaters);"
    }
}