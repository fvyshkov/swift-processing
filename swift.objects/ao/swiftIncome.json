{
    "lists": {
        "default": {
            "columns": {
                "imported": {
                    "title": "Импортирован",
                    "width": 170,
                    "fields": {
                        "imported": {
                            "format": "datetimesec"
                        }
                    }
                },
                "msg_type": {
                    "title": "Тип",
                    "width": 170
                },
                "msg_type_name": {
                    "title": "Название",
                    "flex": 1
                },
                "file_name": {
                    "title": "Файл",
                    "width": 200
                },
                "SDOK": {
                    "title": "Сумма",
                    "cellStyle": {
                        "textAlign": "right"
                    },
                    "fields|": {
                        "amount": {
                            "format": "currency"
                        },
                        "currency_code": {}
                    }
                },
                "state": {
                    "title": "Состояние",
                    "width": 175,
                    "control": "chip",
                    "decode": {
                        "finished": {
                            "value": "finished",
                            "color": "#11ED28"
                        },
                        "error": {
                            "value": "error",
                            "color": "#ed1c24"
                        }
                    }
                }
            },
            "id": "id",
            "actions": [
                {
                    "title": "Refresh",
                    "icon": "refresh",
                    "mini": true,
                    "command": {
                        "type": "standard",
                        "call": "refresh"
                    }
                },
                {
                    "title": "View",
                    "icon": "view",
                    "mini": true,
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "",
                        "params": {
                            "object": "swiftIncome",
                            "form": "editForm",
                            "objectKey$": "{id: $listRow.id}"
                        },
                        "disabled$": "!$listRow"
                    }
                },
                {
                    "title": "Обработка файлов",
                    "icon": "addCircle",
                    "command": {
                        "type": "js",
                        "js": "backend.post('/aoa/execObjectMethod', {object: 'swiftIncome', method: 'job'}).then((r)=>{forceUpdate();})",
                        "title$": "",
                        "disabled$": "!$listRow"
                    }
                },
                {
                    "title": "Journal",
                    "icon": "history",
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "`${_('Application journal')} ${$listRow.appNo}, ${$listRow.cli_name}`",
                        "params": {
                            "object": "easyflow",
                            "form": "objectJournalTask",
                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                        }
                    },
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Operations",
                    "split": true,
                    "actions": [
                        {
                            "title": "Demo review",
                            "command": {
                                "type": "workflow",
                                "call": "AI try",
                                "params": {
                                    "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                }
                            }
                        },
                        {
                            "title": "Demo review 2",
                            "command": {
                                "type": "workflow",
                                "call": "AI_TEST_001",
                                "params": {
                                    "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                }
                            }
                        },
                        {
                            "title": "Customer refuse",
                            "command": {
                                "call": "APP_DECLINE_CLIENT",
                                "type": "workflow",
                                "params": {
                                    "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                }
                            },
                            "confirm": {
                                "message$": "`${_('Do execute customer refuse for application')} ${$listRow.appNo}?`",
                                "yes": "Yes",
                                "no": "No"
                            },
                            "visible$": "['CREDEA'].includes($listRow.state)"
                        },
                        {
                            "title": "Cancel review",
                            "command": {
                                "call": "APP_CANCEL_REVIEW",
                                "type": "workflow",
                                "params": {
                                    "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                }
                            },
                            "confirm": {
                                "message$": "`${_('Do cancel application review')} ${$listRow.appNo}`",
                                "yes": "Yes",
                                "no": "No"
                            },
                            "visible$": "['START', 'ON_REVIEW', 'CREDEA'].includes($listRow.state) && user.groups.includes('GO_ADMINS') "
                        },
                        {
                            "title": "Set government decision",
                            "command": {
                                "type": "workflow",
                                "call": "APP_SET_GOVERNMENT",
                                "params": {
                                    "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                }
                            },
                            "confirm": {
                                "message$": "`${_('Do set property \"Government decision\" for application')} ${$listRow.appNo}`",
                                "yes": "Yes",
                                "no": "No"
                            },
                            "visible$": "['START'].includes($listRow.state) && user.groups.includes('LOAN_ADMINS')"
                        },
                        {
                            "title": "Change initiator",
                            "command": {
                                "type": "task",
                                "call": "/aoa/ObjectTask",
                                "title$": "`${_('Do you want to change application initiator')} ${$listRow.appNo}, ${$listRow.cli_name}?`",
                                "params": {
                                    "object": "loanapp",
                                    "form": "changeInitiator",
                                    "mem$": "{user: $listRow.created_user, appId: $listRow.appId, objectKey:`loanapp:${$listRow.dep_id},${$listRow.id}`}"
                                }
                            },
                            "visible$": "user.superuser || user.groups.includes('LOAN_ADMINS')"
                        },
                        {
                            "title": "Generate new application Id",
                            "command": {
                                "call": "APP_RENEW_ID",
                                "type": "workflow",
                                "params": {
                                    "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                }
                            },
                            "confirm": {
                                "message$": "`${_('Do you want to generate new claim_id')} ${$listRow.appNo}?`",
                                "yes": "Да",
                                "no": "Нет"
                            },
                            "visible$": "user.superuser"
                        },
                        {
                            "title": "Requests",
                            "command": {
                                "type": "task",
                                "call": "/aoa/ObjectListTask",
                                "title$": "`${_('Application requests')} ${$listRow.appNo}`",
                                "params": {
                                    "object": "ext.request",
                                    "list": "default",
                                    "listParams": {
                                        "app": {
                                            "dep_id$": "$listRow.dep_id",
                                            "id$": "$listRow.id"
                                        }
                                    }
                                }
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "Technical information",
                            "command": {
                                "type": "js",
                                "js": "frontend.displayInfo(JSON.stringify($listRow, null, 4));"
                            },
                            "disabled$": "!$listRow"
                        },
                        {
                            "title": "Priveliged",
                            "split": true,
                            "actions": [
                                {
                                    "title": "Reconsideration",
                                    "command": {
                                        "type": "js",
                                        "js": "backend.post('/aoa/execObjectMethod', {object: 'loanapp', method: 'repeatReview', params: {dep_id: $listRow.dep_id, id: $listRow.id}})"
                                    }
                                },
                                {
                                    "title": "Delete processes",
                                    "command": {
                                        "type": "js",
                                        "js": "backend.post('/aoa/execObjectMethod', {object: 'loanapp', method: 'cleanReview', params: {dep_id: $listRow.dep_id, id: $listRow.id}})"
                                    },
                                    "confirm": {
                                        "message$": "`Удалить все процессы для заявки ${$listRow.appNo}`",
                                        "yes": "Да",
                                        "no": "Нет"
                                    },
                                    "visible$": "user.code == 'ASEMENOV' || user.code == 'KMATVEYONOK'"
                                },
                                {
                                    "title": "Link to contract",
                                    "command": {
                                        "type": "js",
                                        "js": "frontend.dialog({object: 'loanapp', form: 'linkToDeaDialog', mem: {}, params: {code: $listRow.appNo, dep_id: $listRow.dep_id, id: $listRow.id} });",
                                        "disableUpdate": true
                                    },
                                    "visible$": "user.superuser || user.groups.includes('LOAN_ADMINS')"
                                },
                                {
                                    "title": "Modify JSON",
                                    "command": {
                                        "type": "task",
                                        "call": "/aoa/ObjectTask",
                                        "title$": "`Коррекция заявки ${$listRow.appNo}`",
                                        "params": {
                                            "object": "app",
                                            "form": "appEditJsonTask",
                                            "appKey": {
                                                "dep_id$": "$listRow.dep_id",
                                                "id$": "$listRow.id"
                                            }
                                        }
                                    }
                                }
                            ],
                            "visible$": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                        },
                        {
                            "title": "Reregistration",
                            "split": true,
                            "actions": [
                                {
                                    "title": "Регистрация в ГРКИ онлайн",
                                    "command": {
                                        "call": "NIKI_REGISTER_ONLINE",
                                        "type": "workflow",
                                        "params": {
                                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`",
                                            "updateClient": false,
                                            "localReview": false
                                        }
                                    },
                                    "confirm": {
                                        "message$": "`Выполнить регистрацию в ГРКИ онлайн заявки ${$listRow.appNo}`",
                                        "yes": "Да",
                                        "no": "Нет"
                                    },
                                    "visible$": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                                },
                                {
                                    "title": "Регистрация в АСОКИ",
                                    "command": {
                                        "call": "KATM_REGISTER",
                                        "type": "workflow",
                                        "params": {
                                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`",
                                            "updateClient": false,
                                            "localReview": false
                                        }
                                    },
                                    "confirm": {
                                        "message$": "`Выполнить регистрацию в АСОКИ заявки ${$listRow.appNo}`",
                                        "yes": "Да",
                                        "no": "Нет"
                                    },
                                    "visible$": "user.superuser && user.groups.includes('LOAN_ADMINS')"
                                },
                                {
                                    "title": "Регистрация отказа в ГРКИ онлайн",
                                    "command": {
                                        "call": "NIKI_REJECT_ONLINE",
                                        "type": "workflow",
                                        "params": {
                                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                        }
                                    },
                                    "confirm": {
                                        "message$": "`Выполнить регистрацию отказа в ГРКИ онлайн заявки ${$listRow.appNo}`",
                                        "yes": "Да",
                                        "no": "Нет"
                                    },
                                    "visible$": "user.superuser || user.groups.includes('LOAN_ADMINS')"
                                },
                                {
                                    "title": "Регистрация отказа в АСОКИ",
                                    "command": {
                                        "call": "KATM_REJECT",
                                        "type": "workflow",
                                        "params": {
                                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                        }
                                    },
                                    "confirm": {
                                        "message$": "`Выполнить регистрацию отказа в АСОКИ заявки ${$listRow.appNo}`",
                                        "yes": "Да",
                                        "no": "Нет"
                                    },
                                    "visible$": "user.superuser || user.groups.includes('LOAN_ADMINS')"
                                },
                                {
                                    "title": "Изменение атрибутов заявки",
                                    "command": {
                                        "type": "workflow",
                                        "call": "APP_CHANGE_ATTR",
                                        "params": {
                                            "objectKey$": "`loanapp:${$listRow.dep_id},${$listRow.id}`"
                                        }
                                    },
                                    "visible$": "['ON_REVIEW', 'CREDEA'].includes($listRow.state) && (user.superuser || user.groups.includes('LOAN_ADMINS'))"
                                },
                                {
                                    "title": "Изменение решения по заявке",
                                    "command": {
                                        "js": "frontend.dialog({object: 'app', form: 'modifyDecisionDialog', mem: {}, params: {code: $listRow.appNo, dep_id: $listRow.dep_id, id: $listRow.id} });",
                                        "disableUpdate": true,
                                        "visible$": "user.groups.includes('GO_ADMINS') || user.groups.includes('LOAN_ADMINS')"
                                    }
                                }
                            ],
                            "visible$": "user.superuser || user.groups.includes('LOAN_ADMINS')"
                        }
                    ],
                    "disabled$": "!$listRow"
                },
                {
                    "title": "Delete",
                    "icon": "delete",
                    "command": {
                        "type": "js",
                        "js": "backend.post('/aoa/execObjectMethod', {object: 'app', method: 'deleteApplication', params: {dep_id: $listRow.dep_id, id: $listRow.id}})"
                    },
                    "confirm": {
                        "message$": "`Удалить заявку ${$listRow.appNo}, ${$listRow.cli_name} ?`",
                        "yes": "Да",
                        "no": "Нет"
                    },
                    "disabled$": "$listRow?.state != 'START'"
                }
            ],
            "filter": {
                "form": {
                    "style": {
                        "width": "360px",
                        "overflow": "hidden",
                        "paddingRight": "0px"
                    },
                    "title": "Filter",
                    "className": "panel vertical",
                    "$": {
                        "@fields": {
                            "className": "vertical",
                            "style": {
                                "paddingRight": "8px",
                                "overflowY": "auto"
                            },
                            "$": {
                                "@app": {
                                    "title": "Payment",
                                    "className": "vertical",
                                    "$": {
                                        "@fromDate": {
                                            "className": "horizontal",
                                            "$": {
                                                "fromDate": {
                                                    "label": "Imported From",
                                                    "control": "TextEdit",
                                                    "controlProps": {
                                                        "masked": {
                                                            "mask": [
                                                                "/\\d/",
                                                                "/\\d/",
                                                                ".",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                ".",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                " ",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                ":",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                ":",
                                                                "/\\d/",
                                                                "/\\d/"
                                                            ],
                                                            "placeholderChar": "_",
                                                            "showMask": true,
                                                            "guide": true,
                                                            "keepCharPositions": true
                                                        }
                                                    },
                                                    "controlOpts": {
                                                        "toValue": "(params.value||'').match(/\\d+/g) && params.value || ''"
                                                    }
                                                },
                                                ".btnNow": {
                                                    "control": "IconButton",
                                                    "controlProps": {
                                                        "icon": "time",
                                                        "style": {
                                                            "paddingTop": "6px"
                                                        }
                                                    },
                                                    "action": {
                                                        "name": "setNow"
                                                    }
                                                }
                                            },
                                            "actions": {
                                                "setNow": {
                                                    "js": " let d = new Date(); mem.fromDate = ('0'+d.getDate()).slice(-2) + '.' + ('0'+(d.getMonth()+1)).slice(-2) + '.' + d.getFullYear()+ ' ' + ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2) + ':' + ('0'+d.getSeconds()).slice(-2);"
                                                }
                                            }
                                        },
                                        "@todate": {
                                            "className": "horizontal",
                                            "$": {
                                                "toDate": {
                                                    "label": "Imported To",
                                                    "control": "TextEdit",
                                                    "controlProps": {
                                                        "masked": {
                                                            "mask": [
                                                                "/\\d/",
                                                                "/\\d/",
                                                                ".",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                ".",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                " ",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                ":",
                                                                "/\\d/",
                                                                "/\\d/",
                                                                ":",
                                                                "/\\d/",
                                                                "/\\d/"
                                                            ],
                                                            "placeholderChar": "_",
                                                            "showMask": true,
                                                            "guide": true,
                                                            "keepCharPositions": true
                                                        }
                                                    },
                                                    "controlOpts": {
                                                        "toValue": "(params.value||'').match(/\\d+/g) && params.value || ''"
                                                    }
                                                },
                                                ".btnNow": {
                                                    "control": "IconButton",
                                                    "controlProps": {
                                                        "icon": "time",
                                                        "style": {
                                                            "paddingTop": "6px"
                                                        }
                                                    },
                                                    "action": {
                                                        "name": "setNow"
                                                    }
                                                }
                                            },
                                            "actions": {
                                                "setNow": {
                                                    "js": " let d = new Date(); mem.toDate = ('0'+d.getDate()).slice(-2) + '.' + ('0'+(d.getMonth()+1)).slice(-2) + '.' + d.getFullYear()+ ' ' + ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2) + ':' + ('0'+d.getSeconds()).slice(-2);"
                                                }
                                            }
                                        },
                                        "txtPay": {
                                            "label": "Sender",
                                            "control": "TextEdit"
                                        },
                                        "txtBen": {
                                            "control": "TextEdit",
                                            "label": "Receiver"
                                        },
                                        "state": {
                                            "label": "State",
                                            "control": "SelectList",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "value": "active",
                                                        "name": "active"
                                                    },
                                                    {
                                                        "value": "finished",
                                                        "name": "finished"
                                                    },
                                                    {
                                                        "value": "error",
                                                        "name": "error"
                                                    }
                                                ]
                                            }
                                        },
                                        "file_name": {
                                            "control": "TextEdit",
                                            "label": "File Name"
                                        }
                                    }
                                },
                                "@loan": {
                                    "className": "vertical",
                                    "title": "Amount",
                                    "$": {
                                        "@amount": {
                                            "className": "horizontal",
                                            "$": {
                                                "minAmount": {
                                                    "control": "CurrencyField",
                                                    "label": "Amount from"
                                                },
                                                "maxAmount": {
                                                    "control": "CurrencyField",
                                                    "label": "Amount to"
                                                }
                                            }
                                        },
                                        "currency": {
                                            "control": "SelectList",
                                            "label": "Currency",
                                            "controlProps": {
                                                "list": [
                                                    {
                                                        "name": "UZS",
                                                        "value": "UZS"
                                                    },
                                                    {
                                                        "name": "USD",
                                                        "value": "USD"
                                                    },
                                                    {
                                                        "name": "EUR",
                                                        "value": "EUR"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@buttons": {
                            "className": "horizontal",
                            "$": {
                                "btnClear": {
                                    "control": "Button",
                                    "label": "Clear",
                                    "controlProps": {
                                        "variant": "outlined",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "name": "clean"
                                    }
                                },
                                "btnApply": {
                                    "control": "Button",
                                    "label": "Apply",
                                    "controlProps": {
                                        "variant": "contained",
                                        "color": "primary"
                                    },
                                    "action": {
                                        "js": "actions.apply(mem);",
                                        "params": {
                                            "disableUpdate": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "clean": {
                            "jsScript": "Object.keys(mem).forEach(function(key) { delete mem[key]; });"
                        }
                    }
                },
                "query": {
                    "fromDate": {
                        "sql": "imported >= %(fromDate)s"
                    },
                    "toDate": {
                        "sql": "imported <= %(toDate)s"
                    },
                    "state": {
                        "sql": "state = :state"
                    },
                    "txtPay": {
                        "sql": "upper(txt_pay) like '%%'||upper(:txtPay)||'%%'"
                    },
                    "txtBen": {
                        "sql": "upper(txt_Ben) like '%%'||upper(:txtBen)||'%%'"
                    },
                    "maxAmount": {
                        "sql": "nsdok <= :maxAmount"
                    },
                    "minAmount": {
                        "sql": "nsdok >= :minAmount"
                    },
                    "currency": {
                        "sql": "val_code = :currency"
                    }
                }
            },
            "events": {
                "onTaskCreated": [
                    {
                        "js": "task.data.$isFilterOpen = false;"
                    }
                ],
                "runJob": [
                    {
                        "js": "backend.post('/aoa/execObjectMethod', {object: 'swiftIncome', method: 'get'}).then((r)=>{forceUpdate();})"
                    }
                ],
                "onRowDoubleClicked": [
                    {
                        "command": {
                            "type": "task",
                            "call": "/aoa/ObjectTask",
                            "title$": "",
                            "params": {
                                "object": "swiftIncome",
                                "form": "editForm",
                                "objectKey$": "{id: $listRow.id}"
                            }
                        }
                    }
                ]
            }
        },
        "transactions": {
            "getList": "getTransactions",
            "columns": {
                "bookg_dt": {
                    "title": "Дата проводки",
                    "width": 200,
                    "fields": {
                        "bookg_dt": {
                            "format": "date"
                        }
                    }
                },
                "val_dt": {
                    "title": "Дата валютирования",
                    "width": 200,
                    "fields": {
                        "val_dt": {
                            "format": "date"
                        }
                    }
                },
                "amount": {
                    "title": "Сумма",
                    "width": 150,
                    "cellStyle": {
                        "textAlign": "right"
                    },
                    "fields|": {
                        "amt": {
                            "format": "currency"
                        },
                        "amt_ccy": {}
                    }
                },
                "cdt_dbt_ind": {
                    "title": "Дт/Кт",
                    "width": 60,
                    "control": "chip",
                    "decode": {
                        "CRDT": {
                            "value": "C",
                            "color": "#11ED28"
                        },
                        "DBIT": {
                            "value": "D",
                            "color": "#ed1c24"
                        }
                    }
                },
                "sts_cd_name": {
                    "title": "Статус",
                    "width": 200,
                    "control": "chip",
                    "decode": {
                        "BOOK": {
                            "value": "BOOK",
                            "color": "#11ED28"
                        },
                        "PDNG": {
                            "value": "PDNG",
                            "color": "#FFA500"
                        },
                        "INFO": {
                            "value": "INFO",
                            "color": "#3498db"
                        }
                    }
                },
                "bk_tx_codes": {
                    "title": "Банковские коды транзакции",
                    "flex": 1,
                    "fields|": {
                        "bk_tx_cd_domn_cd": {},
                        "bk_tx_cd_fmly_cd": {},
                        "bk_tx_cd_sub_fmly_cd": {}
                    }
                }
            },
            "id": "id",
            "actions": [
                {
                    "title": "",
                    "icon": "view",
                    "command": {
                        "type": "task",
                        "call": "/aoa/ObjectTask",
                        "title$": "",
                        "params": {
                            "object": "swiftIncome",
                            "form": "trnForm",
                            "objectKey$": "{id: $listRow.id}"
                        },
                        "disabled$": "!$listRow"
                    }
                }
            ]
        }
    },
    "forms": {
        "editForm": {
            "title": "SWIFT Income",
            "className": "vertical task task-panel",
            "style": {
                "height": "100%",
                "overflow": "hidden"
            },
            "$": {
                "@form-1": {
                    "style": {
                        "padding": "8px",
                        "overflow": "auto"
                    },
                    "form": "detail053",
                    "visible$": "mem.file?.msg_type && mem.file.msg_type=='camt.053'"
                },
                "@form": {
                    "style": {
                        "padding": "8px",
                        "overflow": "auto"
                    },
                    "form": "editFormInner",
                    "visible$": "mem.file?.msg_type && mem.file.msg_type=='pacs.008'"
                }
            },
            "actions": {
                "onTaskCreated": [
                    {
                        "js": "return !task.params?.componentPath && task.params?.objectKey && backend.post('/aoa/execObjectMethod', {object: 'swiftIncome', method: 'get', params: {...task.params.objectKey}}).then((r)=>{mem.file=r; mem.record=r; mem.out_fields =r;if(!task.params.taskId)action({name: 'onSetTaskTitle'});  forceUpdate(); })"
                    },
                    {
                        "js": "if(task.params.app){mem.app = task.params.app} else if(!task.params?.componentPath && !task.params?.objectKey){mem.app = task.data.forms}"
                    },
                    {
                        "js": "context.readOnly = (task.params && 'readOnly' in task.params)?task.params.readOnly : mem.app?.state && mem.app?.state != 'START'"
                    }
                ],
                "onSetTaskTitle": [
                    {
                        "js": "console.log('MMM', mem);"
                    },
                    {
                        "js": "tm.setTaskTitle(task.key, `${mem.record.msg_type_name} ${mem.record.msg_id || mem.record.code}`);"
                    }
                ]
            }
        },
        "editFormInner": {
            "title": "Payment",
            "className": "vertical",
            "style": {
                "width": "860px"
            },
            "$": {
                "@actions": {
                    "style": {
                        "margin": "16px 0px 16px 0px"
                    },
                    "$": {
                        ".ap": {
                            "control": "ActionPanel",
                            "controlOpts": {
                                "actions": [
                                    {
                                        "title": "",
                                        "icon": "save",
                                        "mini": false,
                                        "action": [
                                            {
                                                "js": "if (!validate()){throw 'Abort';}"
                                            },
                                            {
                                                "js": "return backend.post('/aoa/execObjectMethod', {object: 'swiftIncome', method: 'save', params: {app: mem}}).then((r)=>{ tm.setTaskTitle(task.key, `Paymment`); })"
                                            },
                                            {
                                                "js": "frontend.closeTask()"
                                            }
                                        ]
                                    },
                                    {
                                        "title": "",
                                        "icon": "view",
                                        "mini": false,
                                        "action": {
                                            "name": "saveUser"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "@form": {
                    "className": "vertical",
                    "style": {
                        "padding": "4px"
                    },
                    "$": {
                        "@info": {
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@cost": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "amount": {
                                                    "label": "Amount",
                                                    "style": {
                                                        "width": "300px"
                                                    },
                                                    "control": "CurrencyField",
                                                    "controlOpts": {
                                                        "currencyAttr": "currency_code"
                                                    },
                                                    "readOnly$": true
                                                },
                                                "dval": {
                                                    "label": "Dval",
                                                    "style": {
                                                        "width": "200px"
                                                    },
                                                    "control": "DateEdit",
                                                    "readOnly$": true
                                                },
                                                "imported": {
                                                    "label": "Imported",
                                                    "style": {
                                                        "width": "200px"
                                                    },
                                                    "control": "DateEdit",
                                                    "readOnly$": true
                                                },
                                                "code": {
                                                    "label": "Code",
                                                    "style": {
                                                        "width": "250px"
                                                    },
                                                    "control": "TextEdit",
                                                    "readOnly$": true
                                                }
                                            }
                                        },
                                        "message": {
                                            "label": "message",
                                            "readOnly$": true,
                                            "style": {
                                                "width": "860px"
                                            },
                                            "control": "TextEdit",
                                            "controlProps": {
                                                "multiline": true,
                                                "minRows": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@sender": {
                            "title": "Sender",
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@send": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "snd_acc": {
                                                    "label": "Sender Account",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "snd_name": {
                                                    "label": "Sender Name",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        },
                                        "@bank-send": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "snd_bank": {
                                                    "label": "Bank",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "snd_bank_name": {
                                                    "label": "Bank Name",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        },
                                        "@bank-corr-send": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "snd_mid_bank_acc": {
                                                    "label": "Correspondent Account",
                                                    "style": {
                                                        "width": "250px"
                                                    },
                                                    "control": "ObjectReference",
                                                    "controlProps": {
                                                        "object": "swiftBankAccount"
                                                    },
                                                    "required": true,
                                                    "actions": {
                                                        "onChange": [
                                                            {
                                                                "js": "const copy = { ...params.row }; console.log(mem); mem.snd_mid_bank = copy.BANK; mem.snd_mid_bank_acc_val = copy.VAL_CODE; mem.snd_mid_bank_acc = copy.ACC_CODE; mem.snd_mid_bank_name = copy.BANK_NAME;  "
                                                            }
                                                        ]
                                                    }
                                                },
                                                "snd_mid_bank": {
                                                    "label": "Correspondent Bank",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "150px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "snd_mid_bank_acc_val": {
                                                    "label": "Currency",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "70px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "snd_mid_bank_name": {
                                                    "label": "Bank Name",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "360px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@receiver": {
                            "title": "Receiver",
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@bank-send": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "rcv_bank": {
                                                    "label": "Bank",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "rcv_bank_name": {
                                                    "label": "Bank Name",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        },
                                        "@rcv": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "rcv_acc": {
                                                    "label": "Account",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "rcv_name": {
                                                    "label": "Name",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@record-1": {
                            "title": "Additional",
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@d": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "state": {
                                                    "label": "State",
                                                    "control": "TextEdit",
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "readOnly$": true
                                                },
                                                "file_name": {
                                                    "label": "File Name",
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit",
                                                    "readOnly$": true
                                                }
                                            }
                                        },
                                        "error": {
                                            "label": "Error",
                                            "readOnly$": true,
                                            "style": {
                                                "width": "860px"
                                            },
                                            "control": "TextEdit",
                                            "controlProps": {
                                                "multiline": true,
                                                "minRows": 2
                                            }
                                        },
                                        "content": {
                                            "style": {
                                                "height": "200px",
                                                "overflow": "hidden",
                                                "width": "860px"
                                            },
                                            "control": "AceEditor",
                                            "controlProps": {
                                                "editorId": "listFormEdit",
                                                "mode": "xml"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "justifyContent": "end"
                    },
                    "$": {
                        "btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "controlProps": {
                                "variant": "outlined",
                                "color": "primary"
                            },
                            "action": {
                                "js": "frontend.closeTask()",
                                "disableUpdate": true
                            }
                        },
                        "btnApply": {
                            "label": "Save",
                            "control": "Button",
                            "controlProps": {
                                "variant": "contained",
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "if (!validate()){throw 'Abort';}"
                                },
                                {
                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'swiftIncome', method: 'save', params: {app: mem}}).then((r)=>{ tm.setTaskTitle(task.key, `Paymment`); })"
                                },
                                {
                                    "js": "frontend.closeTask()"
                                }
                            ]
                        }
                    }
                }
            }
        },
        "settings": {
            "title": "SWIFT Settings",
            "className": "vertical task task-panel panel",
            "style": {
                "width": "700px",
                "height": "320px"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "padding": "8px",
                        "overflow": "auto"
                    },
                    "$": {
                        "record": {
                            "style": {
                                "padding": "8px",
                                "overflow": "auto"
                            },
                            "$": {
                                "id": {
                                    "label": "ID",
                                    "control": "TextEdit",
                                    "readOnly": true,
                                    "visible$": "!!mem.record?.id",
                                    "style": {
                                        "padding": "8px",
                                        "width": "400px"
                                    }
                                },
                                "server": {
                                    "label": "Server",
                                    "control": "TextEdit",
                                    "style": {
                                        "padding": "8px",
                                        "width": "600px"
                                    }
                                },
                                "folder_in": {
                                    "label": "Folder IN",
                                    "control": "TextEdit",
                                    "style": {
                                        "padding": "8px",
                                        "width": "600px"
                                    }
                                },
                                "folder_out": {
                                    "label": "Folder OUT",
                                    "control": "TextEdit",
                                    "style": {
                                        "padding": "8px",
                                        "width": "600px"
                                    }
                                }
                            }
                        }
                    }
                },
                "@buttons": {
                    "className": "horizontal",
                    "style": {
                        "borderTop": "1px solid rgba(0,0,0,0.20)",
                        "padding": "8px 16px",
                        "justifyContent": "flex-end"
                    },
                    "$": {
                        ".btnCancel": {
                            "label": "Cancel",
                            "control": "Button",
                            "controlProps": {
                                "color": "primary"
                            },
                            "action": {
                                "js": "frontend.closeTask();"
                            }
                        },
                        ".btnSave": {
                            "label": "Save",
                            "control": "Button",
                            "controlProps": {
                                "variant": "contained",
                                "color": "primary"
                            },
                            "action": [
                                {
                                    "js": "return backend.post('/aoa/execObjectMethod', {object: 'swiftIncome', method: 'saveSettings', params: { id: mem.record?.id, folder_in: mem.record?.folder_in, folder_out: mem.record?.folder_out, server: mem.record?.server }});"
                                },
                                {
                                    "js": "task.events.fireEvent('onRefreshList');"
                                },
                                {
                                    "js": "frontend.closeTask();"
                                }
                            ],
                            "disabled$": "!(mem.record?.folder_in && mem.record?.folder_out)"
                        }
                    }
                }
            },
            "actions": {
                "onTaskCreated": {
                    "js": "backend.post('/aoa/execObjectMethod', {object: 'swiftIncome', method: 'getSettings'}).then(r => { mem.record = r || {}; forceUpdate(); });"
                }
            }
        },
        "detail053": {
            "title": "Statement",
            "className": "vertical",
            "style": {
                "width": "860px"
            },
            "$": {
                "@actions": {
                    "style": {
                        "margin": "16px 0px 16px 0px"
                    },
                    "$": {
                        ".ap": {
                            "control": "ActionPanel",
                            "controlOpts": {
                                "actions": [
                                    {
                                        "title": "Транзакции",
                                        "icon": "view",
                                        "mini": false,
                                        "action": [
                                            {
                                                "js": "console.log('M', mem);tm.newTask({path: '/aoa/ObjectListTask', title: 'Транзакции', params: {getList: 'getTransactions', object: 'swiftIncome', list: 'transactions', listParams: {app: {input_id:mem.file.id}}}})"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "@form": {
                    "className": "vertical",
                    "style": {
                        "padding": "4px"
                    },
                    "$": {
                        "@info": {
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@cost": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "msg_type": {
                                                    "label": "Тип",
                                                    "style": {
                                                        "width": "100px"
                                                    },
                                                    "control": "TextEdit",
                                                    "readOnly$": true
                                                },
                                                "msg_type_name": {
                                                    "label": "Наименование",
                                                    "style": {
                                                        "width": "200px"
                                                    },
                                                    "control": "TextEdit",
                                                    "readOnly$": true
                                                },
                                                "imported": {
                                                    "label": "Импортирована",
                                                    "style": {
                                                        "width": "200px"
                                                    },
                                                    "control": "DateEdit",
                                                    "readOnly$": true
                                                },
                                                "msg_id": {
                                                    "label": "Номер",
                                                    "style": {
                                                        "width": "350px"
                                                    },
                                                    "control": "TextEdit",
                                                    "readOnly$": true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@sender": {
                            "title": "Счет",
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@send": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "acct_id": {
                                                    "label": "Номер счета",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "acct_ccy": {
                                                    "label": "Валюта",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "100px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "snd_name": {
                                                    "label": "Наименование",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        },
                                        "@bank-send": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "snd_bank": {
                                                    "label": "Банк",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "control": "TextEdit"
                                                },
                                                "snd_bank_name": {
                                                    "label": "Наименование",
                                                    "readOnly$": true,
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@bal": {
                            "object": "swiftIncome",
                            "form": "balForm"
                        },
                        "@record-1": {
                            "title": "Дополнительно",
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@d": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "state": {
                                                    "label": "Состояние",
                                                    "control": "TextEdit",
                                                    "style": {
                                                        "width": "490px"
                                                    },
                                                    "readOnly$": true
                                                },
                                                "file_name": {
                                                    "label": "Файл",
                                                    "style": {
                                                        "width": "660px"
                                                    },
                                                    "control": "TextEdit",
                                                    "readOnly$": true
                                                }
                                            }
                                        },
                                        "error": {
                                            "label": "Ошибка обработки",
                                            "readOnly$": true,
                                            "style": {
                                                "width": "860px"
                                            },
                                            "control": "TextEdit",
                                            "controlProps": {
                                                "multiline": true,
                                                "minRows": 2
                                            }
                                        },
                                        "content": {
                                            "style": {
                                                "height": "200px",
                                                "overflow": "hidden",
                                                "width": "860px"
                                            },
                                            "control": "AceEditor",
                                            "controlProps": {
                                                "editorId": "listFormEdit",
                                                "mode": "xml"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "balForm": {
            "title": "Список балансов+",
            "$": {
                "@dossier": {
                    "title": "Балансы",
                    "titleClass": "navigated-title",
                    "className": "vertical navigated-content",
                    "style": {
                        "width": "860px"
                    },
                    "$": {
                        ".dossier": {
                            "control": "ListTable",
                            "controlProps": {},
                            "getter": "params.changepoint",
                            "controlOpts": {
                                "rowModelType": "infinite",
                                "id": "docType",
                                "refreshEvent": "onRefreshDossier",
                                "columns!": {
                                    "tp_cd": {
                                        "label": "Тип",
                                        "style": {
                                            "width": "100px"
                                        }
                                    },
                                    "dt": {
                                        "label": "Дата",
                                        "style": {
                                            "width": "150px"
                                        }
                                    },
                                    "amt": {
                                        "label": "Сумма"
                                    },
                                    "amt_ccy": {
                                        "label": "Валюта",
                                        "style": {
                                            "width": "100px"
                                        }
                                    },
                                    "cdt_dbt_ind": {
                                        "label": "Дт/Кр",
                                        "style": {
                                            "width": "100px"
                                        }
                                    }
                                }
                            },
                            "actions": {
                                "onGetRows": {
                                    "js": "setTimeout(() => {const id = mem.record?.id; console.log('ID=', id); if (context.bal) { onSuccess(context.bal); } else { backend.post('/aoa/execObjectMethod', { object: 'swiftIncome', method: 'getBalList', params: { id: id } }).then((r) => { context.bal = r; onSuccess(r); }); }}, 1000); "
                                }
                            }
                        }
                    }
                }
            }
        },
        "trnForm": {
            "title": "Statement",
            "className": "vertical",
            "style": {
                "width": "860px"
            },
            "$": {
                "@form": {
                    "className": "vertical",
                    "style": {
                        "padding": "4px"
                    },
                    "$": {
                        "@info": {
                            "className": "vertical",
                            "style": {
                                "padding": "4px"
                            },
                            "$": {
                                "record": {
                                    "className": "vertical",
                                    "style": {
                                        "padding": "4px",
                                        "margin-top": "10px"
                                    },
                                    "$": {
                                        "@cost": {
                                            "className": "horizontal",
                                            "style": {
                                                "width": "860px"
                                            },
                                            "$": {
                                                "cdt_dbt_ind": {
                                                    "label": "Дт/Кт",
                                                    "style": {
                                                        "width": "100px"
                                                    },
                                                    "control": "TextEdit",
                                                    "readOnly$": true
                                                },
                                                "amt": {
                                                    "label": "Сумма",
                                                    "style": {
                                                        "width": "300px"
                                                    },
                                                    "control": "CurrencyField",
                                                    "controlOpts": {
                                                        "currencyAttr": "amt_ccy"
                                                    },
                                                    "readOnly$": true
                                                },
                                                "val_dt": {
                                                    "label": "Дата",
                                                    "style": {
                                                        "width": "200px"
                                                    },
                                                    "control": "DateEdit",
                                                    "readOnly$": true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "@bal": {
                            "object": "swiftIncome",
                            "form": "trnDtlForm"
                        }
                    }
                }
            },
            "actions": {
                "onTaskCreated": [
                    {
                        "js": "return !task.params?.componentPath && task.params?.objectKey && backend.post('/aoa/execObjectMethod', {object: 'swiftIncome', method: 'getTransactions', params: {...task.params.objectKey}}).then((r)=>{console.log('r',r);mem.file; mem.record=r; mem.out_fields =r;if(!task.params.taskId)action({name: 'onSetTaskTitle'});  forceUpdate();})"
                    },
                    {
                        "js": "if(task.params.app){mem.app = task.params.app} else if(!task.params?.componentPath && !task.params?.objectKey){mem.app = task.data.forms}"
                    },
                    {
                        "js": "context.readOnly = (task.params && 'readOnly' in task.params)?task.params.readOnly : mem.app?.state && mem.app?.state != 'START'"
                    }
                ],
                "onSetTaskTitle": {
                    "js": "tm.setTaskTitle(task.key, `Транзакция`);"
                }
            }
        },
        "trnDtlForm": {
            "title": "Список балансов+",
            "$": {
                "@dossier": {
                    "title": "Детали",
                    "titleClass": "navigated-title",
                    "className": "vertical navigated-content",
                    "style": {
                        "width": "860px"
                    },
                    "$": {
                        ".dossier": {
                            "control": "ListTable",
                            "controlProps": {},
                            "getter": "params.changepoint",
                            "controlOpts": {
                                "rowModelType": "infinite",
                                "id": "docType",
                                "refreshEvent": "onRefreshDossier",
                                "columns!": {
                                    "trad_dt": {
                                        "label": "Дата",
                                        "style": {
                                            "width": "150px"
                                        }
                                    },
                                    "amt": {
                                        "label": "Сумма"
                                    },
                                    "amt_ccy": {
                                        "label": "Валюта",
                                        "style": {
                                            "width": "100px"
                                        }
                                    },
                                    "cdt_dbt_ind": {
                                        "label": "Дт/Кр",
                                        "style": {
                                            "width": "100px"
                                        }
                                    },
                                    "cdtr_acct_iban": {
                                        "label": "Счет Кт",
                                        "style": {
                                            "width": "100px"
                                        }
                                    },
                                    "dbtr_acct_iban": {
                                        "label": "Счет Дт",
                                        "style": {
                                            "width": "100px"
                                        }
                                    }
                                }
                            },
                            "actions": {
                                "onGetRows": {
                                    "js": "setTimeout(() => {const id = mem.record?.id; console.log('ID=', id); if (context.bal) { onSuccess(context.bal); } else { backend.post('/aoa/execObjectMethod', { object: 'swiftIncome', method: 'getTrnDtl', params: { id: id } }).then((r) => { context.bal = r; onSuccess(r); }); }}, 1000); "
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "methods": {
        "getList": {
            "script": {
                "py": "from apng_core.db import fetchall\nfrom apng_core.exceptions import UserException\n\nfrom apng_core.aoa.services.filter import applyFilterModel, applyFilterModel2\nfrom datetime import datetime\nfrom django.utils.timezone import make_aware\n\nSQL = \"\"\"\n\nselect\n  si.id,\n  si.imported,\n  coalesce(\n    si.amount,\n    (\n      select sum(sn.amt)\n      from swift_stmt_ntry sn\n      where sn.swift_input_id = si.id\n    )\n  ) as amount,\n  coalesce(\n    si.currency_code,\n      (\n        select sn.amt_ccy\n        from swift_stmt_ntry sn\n        where sn.swift_input_id = si.id\n        limit 1\n      )\n  ) as currency_code,\n  state,\n  msg_type,\n  mt.name_ru msg_type_name,\n  file_name\nfrom swift_input si, ref_message_types mt\nwhere si.msg_type = mt.code\n\n\n\"\"\"\n\ndef parseDT(s):\n    return make_aware(datetime.strptime(s, '%d.%m.%Y %H:%M:%S'))\n\n\n\nfilterModel2 = parameters.get('request', {}).get('filterModel2')\nfilterDef = None\n\nif filterModel2:\n    from apng_core.aoa.services import filter as aoa\n    filterDef = aoa.buildFilterSql({\n        'objectCode': 'swiftIncome',\n        'filterData': filterModel2\n    })\n    SQL =  'select * from (' + SQL + ') '+ filterDef['sql']\n\nSQL += \" ORDER BY Imported DESC\"\n\nwith initDbSession(database='default').cursor() as c:\n    try:\n        if filterDef is not None:\n            c.execute(SQL, filterDef['params'])\n        else:\n            c.execute(SQL)\n        data = fetchall(c)\n    except Exception as e:\n        raise UserException({\n            'message': 'Error fetching records',\n            'description': 'SQL:\\n%s' % SQL\n        }).withError(e)\n\n      \n"
            },
            "sql": {}
        },
        "get": {
            "script": {
                "py": "# Get single record by ID\nfrom apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\n\nSQL = \"\"\"\n    SELECT  si.*, \n            mt.name_ru msg_type_name\n    from swift_input si, ref_message_types mt\n    where si.msg_type = mt.code\n    and id = %(id)s\n\"\"\"\n\n#raise Exception(parameters)\n\nwith initDbSession(database='default').cursor() as c:\n    try:\n        c.execute(SQL, {'id': parameters.get('id')})\n        data = fetchone(c)\n        if not data:\n            raise UserException('Record not found')\n    except Exception as e:\n        raise UserException({\n            'message': 'Error fetching record',\n            'description': 'SQL:\\n%s\\nparams: %s' % (SQL, {'id': parameters.get('id')})\n        }).withError(e)\n"
            },
            "sql": {}
        },
        "DATABASE_UPDATE": {
            "sql": {
                "sqlType": "query",
                "database": "default",
                "sql": "\n"
            },
            "script": {
                "py": "-- Table: public.swift_input\n\n-- DROP TABLE IF EXISTS public.swift_input;\n\nCREATE TABLE IF NOT EXISTS public.swift_input\n(\n    id uuid NOT NULL DEFAULT gen_random_uuid(),\n    file_name text COLLATE pg_catalog.\"default\" NOT NULL,\n    status text COLLATE pg_catalog.\"default\" NOT NULL,\n    content text COLLATE pg_catalog.\"default\",\n    imported timestamp without time zone DEFAULT now(),\n    content_out text COLLATE pg_catalog.\"default\",\n    error text COLLATE pg_catalog.\"default\",\n    txt_ben text COLLATE pg_catalog.\"default\",\n    txt_pay text COLLATE pg_catalog.\"default\",\n    nsdok numeric,\n    val_code text COLLATE pg_catalog.\"default\",\n    dval timestamp without time zone,\n    CONSTRAINT swift_input_job_item_pkey PRIMARY KEY (id)\n)\n\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS public.swift_input\n    OWNER to postgres;\n\nGRANT ALL ON TABLE public.swift_input TO apng;\n\nGRANT ALL ON TABLE public.swift_input TO postgres;"
            }
        },
        "getSettings": {
            "script": {
                "py": "from apng_core.db import fetchone\n\nSQL = 'SELECT id::text AS id, folder_in, folder_out, server FROM swift_settings LIMIT 1'\nwith initDbSession(database='default').cursor() as c:\n  c.execute(SQL)\n  data = fetchone(c)\n"
            }
        },
        "saveSettings": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\n\nwith initDbSession(database='default').cursor() as c:\n  if parameters.get('id'):\n    SQL = 'UPDATE swift_settings SET folder_in=%(folder_in)s, folder_out=%(folder_out)s, server=%(server)s WHERE id=%(id)s RETURNING id::text AS id'\n    params = {'id': parameters.get('id'), 'folder_in': parameters.get('folder_in'), 'folder_out': parameters.get('folder_out'), 'server': parameters.get('server')}\n  else:\n    SQL = 'INSERT INTO swift_settings(folder_in, folder_out, server) VALUES(%(folder_in)s, %(folder_out)s, %(server)s) RETURNING id::text AS id'\n    params = {'folder_in': parameters.get('folder_in'), 'folder_out': parameters.get('folder_out'), 'server': parameters.get('server')}\n  try:\n    c.execute(SQL, params)\n    data = fetchone(c)\n  except Exception as e:\n    raise UserException({'message': 'Error saving settings'}).withError(e)\n"
            },
            "sql": {}
        },
        "job": {
            "script": {
                "py": "import os\nimport subprocess\nimport logging\nimport shutil\nimport traceback\nfrom datetime import datetime\nfrom decimal import Decimal, InvalidOperation\nfrom xml.etree import ElementTree as ET\nfrom apng_core.db import initDbSession, fetchall\nfrom apng_core.exceptions import UserException\n\n# Initialize logger\nlogger = logging.getLogger('cron')\n\n# Log greeting and environment info\nlogger.debug('===========================================')\nlogger.debug('Starting SWIFT Income Processing Script')\nlogger.debug('🚀 VERSION: 2025-10-13 WITH MESSAGE TYPES & camt.053 PROCESSING')\nlogger.debug('===========================================')\n\n# Global variables for folder paths from settings\nFOLDER_IN = None\nFOLDER_OUT = None\n\ndef load_settings_from_db():\n    \"\"\"Load settings from swift_settings table\"\"\"\n    global FOLDER_IN, FOLDER_OUT\n\n    logger.debug('Loading settings from swift_settings table...')\n\n    sql = \"\"\"\n        SELECT folder_in, folder_out, server\n        FROM swift_settings\n        LIMIT 1\n    \"\"\"\n\n    try:\n        with initDbSession(database='default').cursor() as c:\n            c.execute(sql)\n            result = fetchall(c)\n\n            if not result or len(result) == 0:\n                raise UserException({\n                    'message': 'No settings found in swift_settings table',\n                    'description': 'Please configure SWIFT settings first'\n                })\n\n            settings = result[0]\n            FOLDER_IN = settings.get('folder_in')\n            FOLDER_OUT = settings.get('folder_out')\n            server = settings.get('server')\n\n            if not FOLDER_IN:\n                raise UserException({\n                    'message': 'folder_in is not configured in swift_settings',\n                    'description': 'Please set folder_in in SWIFT settings'\n                })\n\n            if not FOLDER_OUT:\n                raise UserException({\n                    'message': 'folder_out is not configured in swift_settings',\n                    'description': 'Please set folder_out in SWIFT settings'\n                })\n\n            logger.debug('='*60)\n            logger.debug('SETTINGS LOADED FROM DATABASE:')\n            logger.debug(f'  folder_in:  {FOLDER_IN}')\n            logger.debug(f'  folder_out: {FOLDER_OUT}')\n            logger.debug(f'  server:     {server or \"not set\"}')\n            logger.debug('='*60)\n\n            # Check and create folders\n            for folder_path, folder_name in [(FOLDER_IN, 'folder_in'), (FOLDER_OUT, 'folder_out')]:\n                if not os.path.exists(folder_path):\n                    logger.warning(f'{folder_name} does not exist: {folder_path}')\n                    logger.debug(f'Creating {folder_name}: {folder_path}')\n                    try:\n                        os.makedirs(folder_path, exist_ok=True)\n                        logger.debug(f'✓ Created {folder_name}: {folder_path}')\n                    except Exception as e:\n                        raise UserException({\n                            'message': f'Cannot create {folder_name}: {folder_path}',\n                            'description': str(e)\n                        })\n                else:\n                    logger.debug(f'✓ {folder_name} exists: {folder_path}')\n\n            logger.debug('='*60)\n\n            return FOLDER_IN\n\n    except UserException:\n        raise\n    except Exception as e:\n        logger.error(f'Error loading settings from database: {e}')\n        raise UserException({\n            'message': 'Error loading SWIFT settings from database',\n            'description': str(e)\n        }).withError(e)\n\ndef _find_first_by_localname(root, localname):\n    \"\"\"Return first element in tree by localname, ignoring namespaces.\"\"\"\n    for el in root.iter():\n        tag = el.tag\n        if isinstance(tag, str) and (tag.endswith('}' + localname) or tag == localname):\n            return el\n    return None\n\ndef _find_child_text_local(parent, localname):\n    \"\"\"Return first child text by localname under the given element (deep search).\"\"\"\n    if parent is None:\n        return None\n    for el in parent.iter():\n        if el is parent:\n            continue\n        tag = el.tag\n        if isinstance(tag, str) and (tag.endswith('}' + localname) or tag == localname):\n            txt = (el.text or '').strip()\n            return txt if txt else None\n    return None\n\ndef _find_all_by_localname(parent, localname):\n    \"\"\"Return all elements by localname under parent.\"\"\"\n    if parent is None:\n        return []\n    results = []\n    for el in parent.iter():\n        if el is parent:\n            continue\n        tag = el.tag\n        if isinstance(tag, str) and (tag.endswith('}' + localname) or tag == localname):\n            results.append(el)\n    return results\n\ndef detect_message_type(xml_text):\n    \"\"\"Detect message type from MsgDefIdr in AppHdr.\n\n    Returns: 'pacs.008', 'pacs.009', 'camt.053', 'camt.054', 'camt.056', or None\n    \"\"\"\n    try:\n        root = ET.fromstring(xml_text)\n        msg_def_idr_el = _find_first_by_localname(root, 'MsgDefIdr')\n\n        if msg_def_idr_el is not None:\n            msg_def_idr = (msg_def_idr_el.text or '').strip()\n            # Extract type: \"pacs.008.001.08\" -> \"pacs.008\"\n            if msg_def_idr:\n                parts = msg_def_idr.split('.')\n                if len(parts) >= 2:\n                    msg_type = f\"{parts[0]}.{parts[1]}\"\n                    logger.debug(f'  Detected message type: {msg_type} (from {msg_def_idr})')\n                    return msg_type\n\n        logger.debug('  Message type not detected (no MsgDefIdr found)')\n        return None\n\n    except Exception as e:\n        logger.debug(f'  Error detecting message type: {e}')\n        return None\n\ndef process_camt053(content, swift_input_id, cursor):\n    \"\"\"Process camt.053 statement and insert balances, entries, and transaction details.\n\n    Args:\n        content: XML content as string\n        swift_input_id: UUID of the swift_input record\n        cursor: Database cursor\n\n    Returns:\n        dict with counts: {'balances': N, 'entries': N, 'tx_details': N}\n    \"\"\"\n    logger.debug(f'  Processing camt.053 for swift_input_id={swift_input_id}')\n\n    counts = {'balances': 0, 'entries': 0, 'tx_details': 0}\n\n    try:\n        root = ET.fromstring(content)\n\n        # Find Stmt element\n        stmt = _find_first_by_localname(root, 'Stmt')\n        if stmt is None:\n            logger.warning('  No Stmt element found in camt.053')\n            return counts\n\n        # Process Balances (Bal)\n        bal_elements = _find_all_by_localname(stmt, 'Bal')\n        logger.debug(f'  Found {len(bal_elements)} balance(s)')\n\n        for bal_el in bal_elements:\n            try:\n                # Extract balance type\n                tp_cd_el = _find_first_by_localname(bal_el, 'Cd')\n                tp_cd = (tp_cd_el.text or '').strip() if tp_cd_el is not None else None\n\n                # Extract amount\n                amt_el = _find_first_by_localname(bal_el, 'Amt')\n                if amt_el is None:\n                    continue\n\n                amt_text = (amt_el.text or '').strip()\n                amt_ccy = amt_el.attrib.get('Ccy')\n\n                try:\n                    amt = Decimal(amt_text)\n                except:\n                    amt = None\n\n                # Extract credit/debit indicator\n                cdt_dbt_ind_el = _find_first_by_localname(bal_el, 'CdtDbtInd')\n                cdt_dbt_ind = (cdt_dbt_ind_el.text or '').strip() if cdt_dbt_ind_el is not None else None\n\n                # Extract date (Dt/Dt structure - need to find nested Dt)\n                dt_container = _find_first_by_localname(bal_el, 'Dt')\n                dt_text = None\n                if dt_container is not None:\n                    # Look for a child Dt element (skip the container itself)\n                    for child_dt in dt_container.iter():\n                        if child_dt is not dt_container and (child_dt.tag.endswith('}Dt') or child_dt.tag == 'Dt'):\n                            dt_text = (child_dt.text or '').strip()\n                            break\n\n                # Insert balance\n                if tp_cd and amt is not None and cdt_dbt_ind and dt_text:\n                    cursor.execute(\"\"\"\n                        INSERT INTO swift_stmt_bal\n                        (swift_input_id, tp_cd, amt, amt_ccy, cdt_dbt_ind, dt)\n                        VALUES (%s, %s, %s, %s, %s, %s)\n                    \"\"\", (swift_input_id, tp_cd, amt, amt_ccy, cdt_dbt_ind, dt_text))\n                    counts['balances'] += 1\n                    logger.debug(f'    Inserted balance: {tp_cd} = {amt} {amt_ccy} ({cdt_dbt_ind})')\n\n            except Exception as bal_err:\n                logger.error(f'    Error processing balance: {bal_err}')\n                continue\n\n        # Process Entries (Ntry)\n        ntry_elements = _find_all_by_localname(stmt, 'Ntry')\n        logger.debug(f'  Found {len(ntry_elements)} entry/entries')\n\n        for ntry_el in ntry_elements:\n            try:\n                # Extract entry fields\n                ntry_ref = _find_child_text_local(ntry_el, 'NtryRef')\n                acct_svcr_ref = _find_child_text_local(ntry_el, 'AcctSvcrRef')\n\n                # Amount\n                amt_el = _find_first_by_localname(ntry_el, 'Amt')\n                if amt_el is None:\n                    continue\n\n                amt_text = (amt_el.text or '').strip()\n                amt_ccy = amt_el.attrib.get('Ccy')\n\n                try:\n                    amt = Decimal(amt_text)\n                except:\n                    amt = None\n\n                if amt is None:\n                    continue\n\n                # Credit/Debit indicator\n                cdt_dbt_ind_el = _find_first_by_localname(ntry_el, 'CdtDbtInd')\n                cdt_dbt_ind = (cdt_dbt_ind_el.text or '').strip() if cdt_dbt_ind_el is not None else 'CRDT'\n\n                # Status\n                sts_cd_el = _find_first_by_localname(ntry_el, 'Cd')\n                # Find Sts/Cd specifically\n                sts_parent = _find_first_by_localname(ntry_el, 'Sts')\n                if sts_parent:\n                    sts_cd_el = _find_first_by_localname(sts_parent, 'Cd')\n                sts_cd = (sts_cd_el.text or '').strip() if sts_cd_el is not None else 'BOOK'\n\n                # Dates\n                bookg_dt_el = _find_first_by_localname(ntry_el, 'BookgDt')\n                bookg_dt = None\n                if bookg_dt_el:\n                    dt_sub = _find_first_by_localname(bookg_dt_el, 'Dt')\n                    if dt_sub is not None:\n                        bookg_dt = (dt_sub.text or '').strip()\n\n                val_dt_el = _find_first_by_localname(ntry_el, 'ValDt')\n                val_dt = None\n                if val_dt_el:\n                    dt_sub = _find_first_by_localname(val_dt_el, 'Dt')\n                    if dt_sub is not None:\n                        val_dt = (dt_sub.text or '').strip()\n\n                # Bank Transaction Code\n                bk_tx_cd = _find_first_by_localname(ntry_el, 'BkTxCd')\n                bk_tx_cd_domn_cd = None\n                bk_tx_cd_fmly_cd = None\n                bk_tx_cd_sub_fmly_cd = None\n\n                if bk_tx_cd:\n                    domn = _find_first_by_localname(bk_tx_cd, 'Domn')\n                    if domn:\n                        cd_el = _find_first_by_localname(domn, 'Cd')\n                        bk_tx_cd_domn_cd = (cd_el.text or '').strip() if cd_el is not None else None\n\n                        fmly = _find_first_by_localname(domn, 'Fmly')\n                        if fmly:\n                            cd_el = _find_first_by_localname(fmly, 'Cd')\n                            bk_tx_cd_fmly_cd = (cd_el.text or '').strip() if cd_el is not None else None\n\n                            sub_el = _find_first_by_localname(fmly, 'SubFmlyCd')\n                            bk_tx_cd_sub_fmly_cd = (sub_el.text or '').strip() if sub_el is not None else None\n\n                # Insert entry\n                cursor.execute(\"\"\"\n                    INSERT INTO swift_stmt_ntry\n                    (swift_input_id, ntry_ref, acct_svcr_ref, amt, amt_ccy, cdt_dbt_ind,\n                     sts_cd, bookg_dt, val_dt, bk_tx_cd_domn_cd, bk_tx_cd_fmly_cd, bk_tx_cd_sub_fmly_cd)\n                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                    RETURNING id\n                \"\"\", (swift_input_id, ntry_ref, acct_svcr_ref, amt, amt_ccy, cdt_dbt_ind,\n                      sts_cd, bookg_dt, val_dt, bk_tx_cd_domn_cd, bk_tx_cd_fmly_cd, bk_tx_cd_sub_fmly_cd))\n\n                ntry_id_result = cursor.fetchone()\n                if isinstance(ntry_id_result, dict):\n                    ntry_id = ntry_id_result.get('id')\n                elif isinstance(ntry_id_result, (list, tuple)):\n                    ntry_id = ntry_id_result[0]\n                else:\n                    ntry_id = ntry_id_result\n\n                counts['entries'] += 1\n                logger.debug(f'    Inserted entry: ntry_id={ntry_id}, amt={amt} {amt_ccy}, status={sts_cd}')\n\n                # Process Transaction Details (TxDtls)\n                ntry_dtls = _find_first_by_localname(ntry_el, 'NtryDtls')\n                if ntry_dtls:\n                    tx_dtls_elements = _find_all_by_localname(ntry_dtls, 'TxDtls')\n                    logger.debug(f'      Found {len(tx_dtls_elements)} transaction detail(s)')\n\n                    for tx_dtls_el in tx_dtls_elements:\n                        try:\n                            # References\n                            refs = _find_first_by_localname(tx_dtls_el, 'Refs')\n                            instr_id = None\n                            end_to_end_id = None\n                            uetr = None\n\n                            if refs:\n                                instr_id = _find_child_text_local(refs, 'InstrId')\n                                end_to_end_id = _find_child_text_local(refs, 'EndToEndId')\n                                uetr_text = _find_child_text_local(refs, 'UETR')\n                                if uetr_text:\n                                    try:\n                                        # Validate UUID format\n                                        import uuid\n                                        uuid.UUID(uetr_text)\n                                        uetr = uetr_text\n                                    except:\n                                        uetr = None\n\n                            # Amount\n                            tx_amt_el = _find_first_by_localname(tx_dtls_el, 'Amt')\n                            tx_amt = None\n                            tx_amt_ccy = None\n                            if tx_amt_el is not None:\n                                tx_amt_text = (tx_amt_el.text or '').strip()\n                                tx_amt_ccy = tx_amt_el.attrib.get('Ccy')\n                                try:\n                                    tx_amt = Decimal(tx_amt_text)\n                                except:\n                                    pass\n\n                            # Credit/Debit\n                            tx_cdt_dbt_ind_el = _find_first_by_localname(tx_dtls_el, 'CdtDbtInd')\n                            tx_cdt_dbt_ind = (tx_cdt_dbt_ind_el.text or '').strip() if tx_cdt_dbt_ind_el is not None else None\n\n                            # Related dates\n                            rltd_dts = _find_first_by_localname(tx_dtls_el, 'RltdDts')\n                            intr_bk_sttlm_dt = None\n                            if rltd_dts:\n                                dt_el = _find_first_by_localname(rltd_dts, 'IntrBkSttlmDt')\n                                intr_bk_sttlm_dt = (dt_el.text or '').strip() if dt_el is not None else None\n\n                            # Insert transaction detail\n                            cursor.execute(\"\"\"\n                                INSERT INTO swift_entry_tx_dtls\n                                (ntry_id, instr_id, end_to_end_id, uetr, amt, amt_ccy,\n                                 cdt_dbt_ind, intr_bk_sttlm_dt)\n                                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)\n                            \"\"\", (ntry_id, instr_id, end_to_end_id, uetr, tx_amt, tx_amt_ccy,\n                                  tx_cdt_dbt_ind, intr_bk_sttlm_dt))\n\n                            counts['tx_details'] += 1\n                            logger.debug(f'        Inserted tx_detail: end_to_end={end_to_end_id}, amt={tx_amt}')\n\n                        except Exception as tx_err:\n                            logger.error(f'        Error processing transaction detail: {tx_err}')\n                            continue\n\n            except Exception as ntry_err:\n                logger.error(f'    Error processing entry: {ntry_err}')\n                continue\n\n        logger.debug(f'  camt.053 processing complete: {counts[\"balances\"]} balances, {counts[\"entries\"]} entries, {counts[\"tx_details\"]} tx_details')\n        return counts\n\n    except Exception as e:\n        logger.error(f'  Error processing camt.053: {e}')\n        logger.error(f'  Traceback: {traceback.format_exc()}')\n        return counts\n\ndef extract_pacs008_fields(xml_text):\n    \"\"\"Extract sender, receiver, amount, date, currency and additional fields from pacs.008 XML.\n\n    Returns dict with keys: snd_name, rcv_name, amount, currency_code, dval, code, message,\n    snd_acc, rcv_acc, snd_bank, snd_bank_name, snd_mid_bank, snd_mid_bank_name,\n    snd_mid_bank_acc, rcv_bank, rcv_bank_name, error.\n    \"\"\"\n    result = {\n        'snd_name': None,\n        'rcv_name': None,\n        'amount': None,\n        'currency_code': None,\n        'dval': None,\n        'code': None,\n        'message': None,\n        'snd_acc': None,\n        'rcv_acc': None,\n        'snd_bank': None,\n        'snd_bank_name': None,\n        'snd_mid_bank': None,\n        'snd_mid_bank_name': None,\n        'snd_mid_bank_acc': None,\n        'rcv_bank': None,\n        'rcv_bank_name': None,\n        'error': None,\n    }\n\n    try:\n        root = ET.fromstring(xml_text)\n    except Exception as e:\n        tb = traceback.format_exc()\n        result['error'] = f'XML parse error: {e}\\\\n\\\\nTraceback:\\\\n{tb}'\n        return result\n\n    # Debtor (sender name)\n    try:\n        dbtr = _find_first_by_localname(root, 'Dbtr')\n        result['snd_name'] = _find_child_text_local(dbtr, 'Nm')\n    except Exception as e:\n        tb = traceback.format_exc()\n        result['error'] = (result['error'] or '') + f' | sender parse error: {e}\\\\nTraceback:\\\\n{tb}'\n\n    # Creditor (receiver name)\n    try:\n        cdtr = _find_first_by_localname(root, 'Cdtr')\n        result['rcv_name'] = _find_child_text_local(cdtr, 'Nm')\n    except Exception as e:\n        tb = traceback.format_exc()\n        result['error'] = (result['error'] or '') + f' | receiver parse error: {e}\\\\nTraceback:\\\\n{tb}'\n\n    # Amount and currency\n    try:\n        amt_el = _find_first_by_localname(root, 'IntrBkSttlmAmt')\n        if amt_el is not None:\n            val_text = (amt_el.text or '').strip()\n            try:\n                result['amount'] = Decimal(val_text)\n            except (InvalidOperation, ValueError):\n                result['amount'] = None\n                if val_text:\n                    result['error'] = (result['error'] or '') + f' | bad amount: {val_text}'\n            result['currency_code'] = amt_el.attrib.get('Ccy')\n    except Exception as e:\n        tb = traceback.format_exc()\n        result['error'] = (result['error'] or '') + f' | amount parse error: {e}\\\\nTraceback:\\\\n{tb}'\n\n    # Value date\n    try:\n        dval_el = _find_first_by_localname(root, 'IntrBkSttlmDt')\n        if dval_el is not None and (dval_el.text or '').strip():\n            result['dval'] = (dval_el.text or '').strip()\n        else:\n            cre_el = _find_first_by_localname(root, 'CreDtTm')\n            if cre_el is not None and (cre_el.text or '').strip():\n                result['dval'] = (cre_el.text or '').strip()[:10]\n    except Exception as e:\n        tb = traceback.format_exc()\n        result['error'] = (result['error'] or '') + f' | date parse error: {e}\\\\nTraceback:\\\\n{tb}'\n\n    # Code (EndToEndId or InstrId)\n    try:\n        code_el = _find_first_by_localname(root, 'EndToEndId')\n        if code_el is not None and (code_el.text or '').strip():\n            result['code'] = (code_el.text or '').strip()\n        else:\n            instr_el = _find_first_by_localname(root, 'InstrId')\n            if instr_el is not None:\n                result['code'] = (instr_el.text or '').strip()\n    except Exception as e:\n        pass\n\n    # Message (Remittance Information)\n    try:\n        ustrd_el = _find_first_by_localname(root, 'Ustrd')\n        if ustrd_el is not None:\n            result['message'] = (ustrd_el.text or '').strip()\n    except Exception as e:\n        pass\n\n    # Sender account\n    try:\n        dbtr_acct = _find_first_by_localname(root, 'DbtrAcct')\n        if dbtr_acct is not None:\n            iban_el = _find_child_text_local(dbtr_acct, 'IBAN')\n            if iban_el:\n                result['snd_acc'] = iban_el\n            else:\n                othr_id = _find_child_text_local(dbtr_acct, 'Id')\n                if othr_id:\n                    result['snd_acc'] = othr_id\n    except Exception as e:\n        pass\n\n    # Receiver account\n    try:\n        cdtr_acct = _find_first_by_localname(root, 'CdtrAcct')\n        if cdtr_acct is not None:\n            iban_el = _find_child_text_local(cdtr_acct, 'IBAN')\n            if iban_el:\n                result['rcv_acc'] = iban_el\n            else:\n                othr_id = _find_child_text_local(cdtr_acct, 'Id')\n                if othr_id:\n                    result['rcv_acc'] = othr_id\n    except Exception as e:\n        pass\n\n    # Sender bank\n    try:\n        dbtr_agt = _find_first_by_localname(root, 'DbtrAgt')\n        if dbtr_agt is not None:\n            bic_el = _find_child_text_local(dbtr_agt, 'BICFI')\n            if bic_el:\n                result['snd_bank'] = bic_el\n            name_el = _find_child_text_local(dbtr_agt, 'Nm')\n            if name_el:\n                result['snd_bank_name'] = name_el\n    except Exception as e:\n        pass\n\n    # Receiver bank\n    try:\n        cdtr_agt = _find_first_by_localname(root, 'CdtrAgt')\n        if cdtr_agt is not None:\n            bic_el = _find_child_text_local(cdtr_agt, 'BICFI')\n            if bic_el:\n                result['rcv_bank'] = bic_el\n            name_el = _find_child_text_local(cdtr_agt, 'Nm')\n            if name_el:\n                result['rcv_bank_name'] = name_el\n    except Exception as e:\n        pass\n\n    # Intermediary bank\n    try:\n        instg_agt = _find_first_by_localname(root, 'InstgAgt')\n        if instg_agt is not None:\n            bic_el = _find_child_text_local(instg_agt, 'BICFI')\n            if bic_el:\n                result['snd_mid_bank'] = bic_el\n            name_el = _find_child_text_local(instg_agt, 'Nm')\n            if name_el:\n                result['snd_mid_bank_name'] = name_el\n            clr_sys = _find_child_text_local(instg_agt, 'MmbId')\n            if clr_sys:\n                result['snd_mid_bank_acc'] = clr_sys\n    except Exception as e:\n        pass\n\n    if not any([result['snd_name'], result['rcv_name'], result['amount'], result['currency_code'], result['dval']]):\n        result['error'] = result['error'] or 'No key fields extracted'\n\n    return result\n\ndef create_test_file():\n    \"\"\"Create test files in the folder_in directory\"\"\"\n    global FOLDER_IN\n    logger.debug(f'create_test_file: Starting with path {FOLDER_IN}')\n\n    # Check if directory exists\n    try:\n        if not os.path.exists(FOLDER_IN):\n            logger.debug(f'Directory {FOLDER_IN} does not exist, creating it...')\n            os.makedirs(FOLDER_IN, exist_ok=True)\n            logger.debug(f'Directory created: {FOLDER_IN}')\n        else:\n            logger.debug(f'Directory exists: {FOLDER_IN}')\n\n        # CLEAN DIRECTORY\n        try:\n            contents_before = os.listdir(FOLDER_IN)\n            if contents_before:\n                logger.debug(f'Cleaning directory: found {len(contents_before)} files to remove')\n                for filename in contents_before:\n                    file_path = os.path.join(FOLDER_IN, filename)\n                    if os.path.isfile(file_path):\n                        try:\n                            os.remove(file_path)\n                            logger.debug(f'  Removed: {filename}')\n                        except Exception as e:\n                            logger.error(f'  Error removing {filename}: {e}')\n                logger.debug('Directory cleaned successfully')\n            else:\n                logger.debug('Directory is already empty')\n        except Exception as e:\n            logger.error(f'Cannot clean directory: {e}')\n\n        # Check if directory is writable\n        if not os.access(FOLDER_IN, os.W_OK):\n            logger.error(f'Input directory is not writable: {FOLDER_IN}')\n            raise UserException({\n                'message': 'Input directory is not writable',\n                'description': f'Path: {FOLDER_IN}'\n            })\n        else:\n            logger.debug(f'Directory is writable')\n    except Exception as e:\n        logger.error(f'Error checking/creating input directory: {e}')\n        raise UserException({\n            'message': 'Error checking/creating input directory',\n            'description': f'Path: {FOLDER_IN}'\n        }).withError(e)\n\n    # Create pacs.008 XML example file\n    logger.debug('Creating pacs.008 XML test file...')\n    pacs008_file_path = os.path.join(FOLDER_IN, 'pacs008_example.xml')\n    try:\n        xml_content = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Envelope xmlns=\"urn:swift:xsd:envelope\">\n\t<head:AppHdr xmlns:head=\"urn:iso:std:iso:20022:tech:xsd:head.001.001.02\">\n\t\t<head:Fr><head:FIId><head:FinInstnId><head:BICFI>DSBAHKHH</head:BICFI></head:FinInstnId></head:FIId></head:Fr>\n\t\t<head:To><head:FIId><head:FinInstnId><head:BICFI>ID521122</head:BICFI></head:FinInstnId></head:FIId></head:To>\n\t\t<head:BizMsgIdr>pacs8bizmsgidr02</head:BizMsgIdr>\n\t\t<head:MsgDefIdr>pacs.008.001.08</head:MsgDefIdr>\n\t\t<head:BizSvc>swift.cbprplus.02</head:BizSvc>\n\t\t<head:CreDt>2022-10-20T10:25:00+01:00</head:CreDt>\n\t</head:AppHdr>\n\t<pacs:Document xmlns:pacs=\"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08\">\n\t\t<pacs:FIToFICstmrCdtTrf>\n\t\t\t<pacs:GrpHdr><pacs:MsgId>pacs8bizmsgidr02</pacs:MsgId><pacs:CreDtTm>2022-10-20T10:25:00+01:00</pacs:CreDtTm><pacs:NbOfTxs>1</pacs:NbOfTxs><pacs:SttlmInf><pacs:SttlmMtd>INDA</pacs:SttlmMtd></pacs:SttlmInf></pacs:GrpHdr>\n\t\t\t<pacs:CdtTrfTxInf>\n\t\t\t\t<pacs:PmtId><pacs:InstrId>pacs8bizmsgidr02</pacs:InstrId><pacs:EndToEndId>pacs008EndToEndId-001</pacs:EndToEndId><pacs:UETR>7a562c67-ca16-48ba-b074-65581be6f001</pacs:UETR></pacs:PmtId>\n\t\t\t\t<pacs:IntrBkSttlmAmt Ccy=\"USD\">98725497</pacs:IntrBkSttlmAmt>\n\t\t\t\t<pacs:IntrBkSttlmDt>2022-10-20</pacs:IntrBkSttlmDt>\n\t\t\t\t<pacs:Dbtr><pacs:Nm>A Capone</pacs:Nm></pacs:Dbtr>\n\t\t\t\t<pacs:DbtrAcct><pacs:Id><pacs:Othr><pacs:Id>ACPN-2569874</pacs:Id></pacs:Othr></pacs:Id></pacs:DbtrAcct>\n\t\t\t\t<pacs:Cdtr><pacs:Nm>J Smith</pacs:Nm></pacs:Cdtr>\n\t\t\t\t<pacs:CdtrAcct><pacs:Id><pacs:Othr><pacs:Id>65479512</pacs:Id></pacs:Othr></pacs:Id></pacs:CdtrAcct>\n\t\t\t</pacs:CdtTrfTxInf>\n\t\t</pacs:FIToFICstmrCdtTrf>\n\t</pacs:Document>\n</Envelope>'''\n        with open(pacs008_file_path, 'w', encoding='utf-8') as f:\n            f.write(xml_content)\n        logger.debug(f'Successfully created pacs.008 XML file: {pacs008_file_path}')\n    except Exception as e:\n        logger.error(f'Error creating pacs.008 XML file: {e}')\n\n    # Create camt.053 XML example file\n    logger.debug('Creating camt.053 XML test file...')\n    camt053_file_path = os.path.join(FOLDER_IN, 'camt053_example.xml')\n    try:\n        xml_content = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Envelope xmlns=\"urn:swift:xsd:envelope\">\n\t<head:AppHdr xmlns:head=\"urn:iso:std:iso:20022:tech:xsd:head.001.001.02\">\n\t\t<head:Fr><head:FIId><head:FinInstnId><head:BICFI>DNBANOKK</head:BICFI></head:FinInstnId></head:FIId></head:Fr>\n\t\t<head:To><head:FIId><head:FinInstnId><head:BICFI>GUCRNOK1</head:BICFI></head:FinInstnId></head:FIId></head:To>\n\t\t<head:BizMsgIdr>cmt053bizmsgidr-001</head:BizMsgIdr>\n\t\t<head:MsgDefIdr>camt.053.001.08</head:MsgDefIdr>\n\t\t<head:BizSvc>swift.cbprplus.02</head:BizSvc>\n\t\t<head:CreDt>2021-06-03T18:00:00+02:00</head:CreDt>\n\t</head:AppHdr>\n\t<camt:Document xmlns:camt=\"urn:iso:std:iso:20022:tech:xsd:camt.053.001.08\">\n\t\t<camt:BkToCstmrStmt>\n\t\t\t<camt:GrpHdr><camt:MsgId>cmt053bizmsgidr-001</camt:MsgId><camt:CreDtTm>2021-06-03T18:00:00+02:00</camt:CreDtTm></camt:GrpHdr>\n\t\t\t<camt:Stmt>\n\t\t\t\t<camt:Id>STMNTID</camt:Id>\n\t\t\t\t<camt:StmtPgntn><camt:PgNb>1</camt:PgNb><camt:LastPgInd>true</camt:LastPgInd></camt:StmtPgntn>\n\t\t\t\t<camt:ElctrncSeqNb>32145</camt:ElctrncSeqNb>\n\t\t\t\t<camt:Acct><camt:Id><camt:Othr><camt:Id>123654786</camt:Id></camt:Othr></camt:Id><camt:Ccy>NOK</camt:Ccy></camt:Acct>\n\t\t\t\t<camt:Bal>\n\t\t\t\t\t<camt:Tp><camt:CdOrPrtry><camt:Cd>OPBD</camt:Cd></camt:CdOrPrtry></camt:Tp>\n\t\t\t\t\t<camt:Amt Ccy=\"NOK\">4645498.54</camt:Amt>\n\t\t\t\t\t<camt:CdtDbtInd>CRDT</camt:CdtDbtInd>\n\t\t\t\t\t<camt:Dt><camt:Dt>2021-06-03</camt:Dt></camt:Dt>\n\t\t\t\t</camt:Bal>\n\t\t\t\t<camt:Bal>\n\t\t\t\t\t<camt:Tp><camt:CdOrPrtry><camt:Cd>CLBD</camt:Cd></camt:CdOrPrtry></camt:Tp>\n\t\t\t\t\t<camt:Amt Ccy=\"NOK\">7010498.54</camt:Amt>\n\t\t\t\t\t<camt:CdtDbtInd>CRDT</camt:CdtDbtInd>\n\t\t\t\t\t<camt:Dt><camt:Dt>2021-06-03</camt:Dt></camt:Dt>\n\t\t\t\t</camt:Bal>\n\t\t\t\t<camt:Ntry>\n\t\t\t\t\t<camt:Amt Ccy=\"NOK\">2365000</camt:Amt>\n\t\t\t\t\t<camt:CdtDbtInd>CRDT</camt:CdtDbtInd>\n\t\t\t\t\t<camt:Sts><camt:Cd>BOOK</camt:Cd></camt:Sts>\n\t\t\t\t\t<camt:BookgDt><camt:Dt>2021-06-03</camt:Dt></camt:BookgDt>\n\t\t\t\t\t<camt:ValDt><camt:Dt>2021-06-03</camt:Dt></camt:ValDt>\n\t\t\t\t\t<camt:BkTxCd><camt:Domn><camt:Cd>PMNT</camt:Cd><camt:Fmly><camt:Cd>RCDT</camt:Cd><camt:SubFmlyCd>XBCT</camt:SubFmlyCd></camt:Fmly></camt:Domn></camt:BkTxCd>\n\t\t\t\t\t<camt:NtryDtls>\n\t\t\t\t\t\t<camt:TxDtls>\n\t\t\t\t\t\t\t<camt:Refs><camt:InstrId>pacs8bizmsgidr01</camt:InstrId><camt:EndToEndId>E2E04044506271305</camt:EndToEndId><camt:UETR>174c245f-2682-4291-ad67-2a41e530cd27</camt:UETR></camt:Refs>\n\t\t\t\t\t\t\t<camt:Amt Ccy=\"NOK\">2365000</camt:Amt>\n\t\t\t\t\t\t\t<camt:CdtDbtInd>CRDT</camt:CdtDbtInd>\n\t\t\t\t\t\t</camt:TxDtls>\n\t\t\t\t\t</camt:NtryDtls>\n\t\t\t\t</camt:Ntry>\n\t\t\t</camt:Stmt>\n\t\t</camt:BkToCstmrStmt>\n\t</camt:Document>\n</Envelope>'''\n        with open(camt053_file_path, 'w', encoding='utf-8') as f:\n            f.write(xml_content)\n        logger.debug(f'Successfully created camt.053 XML file: {camt053_file_path}')\n    except Exception as e:\n        logger.error(f'Error creating camt.053 XML file: {e}')\n\n    # Create error test file\n    logger.debug('Creating error test file...')\n    error_test_file_path = os.path.join(FOLDER_IN, 'error_test.xml')\n    try:\n        with open(error_test_file_path, 'w', encoding='utf-8') as f:\n            f.write('sample error file')\n        logger.debug(f'Successfully created error test file: {error_test_file_path}')\n    except Exception as e:\n        logger.error(f'Error creating error test file: {e}')\n\n    # List contents\n    try:\n        contents_after = os.listdir(FOLDER_IN)\n        logger.debug(f'Files AFTER creating test files: {len(contents_after)} files')\n        for filename in contents_after:\n            file_path = os.path.join(FOLDER_IN, filename)\n            size = os.path.getsize(file_path) if os.path.isfile(file_path) else 0\n            logger.debug(f'  - {filename} ({size} bytes)')\n    except Exception as e:\n        logger.error(f'Cannot list directory: {e}')\n\ndef read_and_import_files():\n    \"\"\"Read all files from folder_in directory and import to swift_input table\"\"\"\n    global FOLDER_IN\n    logger.debug(f'read_and_import_files: Starting with path {FOLDER_IN}')\n\n    if not os.path.exists(FOLDER_IN):\n        logger.error(f'Input directory not found: {FOLDER_IN}')\n        raise UserException({\n            'message': 'Input directory not found',\n            'description': f'Path: {FOLDER_IN}'\n        })\n\n    # Get all files\n    try:\n        files = [f for f in os.listdir(FOLDER_IN) if os.path.isfile(os.path.join(FOLDER_IN, f))]\n        logger.debug(f'Found {len(files)} files in {FOLDER_IN}')\n        if files:\n            logger.debug(f'Files to process:')\n            for filename in files:\n                file_path = os.path.join(FOLDER_IN, filename)\n                size = os.path.getsize(file_path)\n                logger.debug(f'  - {filename} ({size} bytes)')\n        else:\n            logger.warning('No files found in directory!')\n            return 0\n    except Exception as e:\n        logger.error(f'Error reading input directory: {e}')\n        raise UserException({\n            'message': 'Error reading input directory',\n            'description': f'Path: {FOLDER_IN}'\n        }).withError(e)\n\n    imported_count = 0\n    skipped_count = 0\n    error_count = 0\n\n    with initDbSession(database='default').cursor() as c:\n        for filename in files:\n            file_path = os.path.join(FOLDER_IN, filename)\n            logger.debug(f'Processing file: {filename}')\n\n            try:\n                # Read file content\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                logger.debug(f'  File size: {len(content)} bytes')\n\n                current_date = datetime.now()\n\n                # Detect message type\n                msg_type = detect_message_type(content)\n\n                # Check if message type is in our list\n                supported_types = ['pacs.008', 'pacs.009', 'camt.053', 'camt.054', 'camt.056']\n\n                if msg_type not in supported_types:\n                    # Unknown or unsupported message type - only copy to folder_out\n                    logger.warning(f'  Message type {msg_type} is not supported, skipping DB insert')\n                    skipped_count += 1\n\n                    # Copy to folder_out\n                    dest_file_path = os.path.join(FOLDER_OUT, filename)\n                    try:\n                        shutil.copy2(file_path, dest_file_path)\n                        logger.debug(f'  Copied file to: {dest_file_path}')\n                    except Exception as copy_err:\n                        logger.error(f'  Error copying file: {copy_err}')\n\n                    continue\n\n                # Process supported message types\n                logger.debug(f'  Processing as {msg_type}')\n\n                # Extract fields based on message type\n                if msg_type in ['pacs.008', 'pacs.009']:\n                    fields = extract_pacs008_fields(content)\n                    state_value = 'finished' if not fields.get('error') else 'error'\n\n                    # Insert into swift_input\n                    insert_sql = \"\"\"\n                        INSERT INTO swift_input (\n                            file_name, state, content, imported, msg_type,\n                            snd_name, rcv_name, amount, currency_code, dval,\n                            code, message, snd_acc, rcv_acc,\n                            snd_bank, snd_bank_name, snd_mid_bank, snd_mid_bank_name, snd_mid_bank_acc,\n                            rcv_bank, rcv_bank_name, error\n                        )\n                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                    \"\"\"\n                    c.execute(insert_sql, (\n                        filename, state_value, content, current_date, msg_type,\n                        fields.get('snd_name'), fields.get('rcv_name'),\n                        fields.get('amount'), fields.get('currency_code'), fields.get('dval'),\n                        fields.get('code'), fields.get('message'),\n                        fields.get('snd_acc'), fields.get('rcv_acc'),\n                        fields.get('snd_bank'), fields.get('snd_bank_name'),\n                        fields.get('snd_mid_bank'), fields.get('snd_mid_bank_name'), fields.get('snd_mid_bank_acc'),\n                        fields.get('rcv_bank'), fields.get('rcv_bank_name'),\n                        fields.get('error')\n                    ))\n                    imported_count += 1\n                    logger.debug(f'  Successfully imported {msg_type} file: {filename}')\n\n                elif msg_type == 'camt.053':\n                    # Extract basic info\n                    root = ET.fromstring(content)\n\n                    # Extract MsgId and StmtId\n                    msg_id_el = _find_first_by_localname(root, 'MsgId')\n                    msg_id = (msg_id_el.text or '').strip() if msg_id_el is not None else None\n\n                    stmt_el = _find_first_by_localname(root, 'Stmt')\n                    stmt_id = None\n                    elctrnc_seq_nb = None\n                    acct_id = None\n                    acct_ccy = None\n\n                    if stmt_el:\n                        id_el = _find_first_by_localname(stmt_el, 'Id')\n                        stmt_id = (id_el.text or '').strip() if id_el is not None else None\n\n                        seq_el = _find_first_by_localname(stmt_el, 'ElctrncSeqNb')\n                        elctrnc_seq_nb_text = (seq_el.text or '').strip() if seq_el is not None else None\n                        if elctrnc_seq_nb_text:\n                            try:\n                                elctrnc_seq_nb = int(elctrnc_seq_nb_text)\n                            except:\n                                pass\n\n                        acct_el = _find_first_by_localname(stmt_el, 'Acct')\n                        if acct_el:\n                            acct_id_el = _find_first_by_localname(acct_el, 'Id')\n                            if acct_id_el:\n                                othr = _find_first_by_localname(acct_id_el, 'Othr')\n                                if othr:\n                                    id_sub = _find_first_by_localname(othr, 'Id')\n                                    acct_id = (id_sub.text or '').strip() if id_sub is not None else None\n\n                            ccy_el = _find_first_by_localname(acct_el, 'Ccy')\n                            acct_ccy = (ccy_el.text or '').strip() if ccy_el is not None else None\n\n                    # Insert into swift_input\n                    insert_sql = \"\"\"\n                        INSERT INTO swift_input (\n                            file_name, state, content, imported, msg_type,\n                            msg_id, stmt_id, elctrnc_seq_nb, acct_id, acct_ccy\n                        )\n                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                        RETURNING id\n                    \"\"\"\n                    c.execute(insert_sql, (\n                        filename, 'finished', content, current_date, msg_type,\n                        msg_id, stmt_id, elctrnc_seq_nb, acct_id, acct_ccy\n                    ))\n\n                    # Get swift_input_id\n                    result = c.fetchone()\n                    if isinstance(result, dict):\n                        swift_input_id = result.get('id')\n                    elif isinstance(result, (list, tuple)):\n                        swift_input_id = result[0]\n                    else:\n                        swift_input_id = result\n\n                    logger.debug(f'  Inserted swift_input record: id={swift_input_id}')\n\n                    # Process camt.053 details\n                    counts = process_camt053(content, swift_input_id, c)\n\n                    imported_count += 1\n                    logger.debug(f'  Successfully imported camt.053 file: {filename}')\n\n                elif msg_type in ['camt.054', 'camt.056']:\n                    # Basic insert for future processing\n                    insert_sql = \"\"\"\n                        INSERT INTO swift_input (\n                            file_name, state, content, imported, msg_type\n                        )\n                        VALUES (%s, %s, %s, %s, %s)\n                    \"\"\"\n                    c.execute(insert_sql, (filename, 'finished', content, current_date, msg_type))\n                    imported_count += 1\n                    logger.debug(f'  Successfully imported {msg_type} file: {filename}')\n\n                # Copy to folder_out\n                dest_file_path = os.path.join(FOLDER_OUT, filename)\n                try:\n                    shutil.copy2(file_path, dest_file_path)\n                    logger.debug(f'  Copied file to: {dest_file_path}')\n                except Exception as copy_err:\n                    logger.error(f'  Error copying file: {copy_err}')\n\n            except UnicodeDecodeError:\n                error_msg = 'UTF-8 decode failed'\n                logger.error(f'  {error_msg} for {filename}')\n                error_count += 1\n\n                try:\n                    dest_file_path = os.path.join(FOLDER_OUT, filename)\n                    shutil.copy2(file_path, dest_file_path)\n\n                    error_file_path = os.path.join(FOLDER_OUT, f'{filename}.error.txt')\n                    with open(error_file_path, 'w', encoding='utf-8') as err_f:\n                        err_f.write(f'Error processing file: {filename}\\\\n')\n                        err_f.write(f'Timestamp: {datetime.now()}\\\\n')\n                        err_f.write(f'\\\\nError: {error_msg}\\\\n')\n                except:\n                    pass\n                continue\n\n            except Exception as e:\n                logger.error(f'  Error processing file {filename}: {str(e)}')\n                logger.error(f'  Traceback: {traceback.format_exc()}')\n                error_count += 1\n\n                try:\n                    dest_file_path = os.path.join(FOLDER_OUT, filename)\n                    shutil.copy2(file_path, dest_file_path)\n\n                    error_file_path = os.path.join(FOLDER_OUT, f'{filename}.error.txt')\n                    tb = traceback.format_exc()\n                    with open(error_file_path, 'w', encoding='utf-8') as err_f:\n                        err_f.write(f'Error processing file: {filename}\\\\n')\n                        err_f.write(f'Timestamp: {datetime.now()}\\\\n')\n                        err_f.write(f'\\\\nError: {str(e)}\\\\n\\\\nTraceback:\\\\n{tb}')\n                except:\n                    pass\n                continue\n\n        # Commit transaction\n        if imported_count > 0:\n            c.connection.commit()\n            logger.debug(f'Transaction committed: {imported_count} files')\n\n    logger.debug('='*60)\n    logger.debug(f'IMPORT SUMMARY:')\n    logger.debug(f'  Imported: {imported_count} files')\n    logger.debug(f'  Skipped (unknown type): {skipped_count} files')\n    logger.debug(f'  Errors: {error_count} files')\n    logger.debug(f'  All files copied to: {FOLDER_OUT}')\n    logger.debug('='*60)\n\n    return imported_count\n\ndef main():\n    \"\"\"Main execution function\"\"\"\n    global FOLDER_IN\n\n    try:\n        # Load settings\n        load_settings_from_db()\n\n        logger.debug('='*80)\n        logger.debug('main: Starting SWIFT import process')\n        logger.debug(f'Input folder: {FOLDER_IN}')\n        logger.debug('='*80)\n\n        # Create test files\n        logger.debug('Step 1: Creating test files...')\n        create_test_file()\n\n        # Read and import files\n        logger.debug('Step 2: Reading and importing files...')\n        imported_count = read_and_import_files()\n\n        logger.debug('='*80)\n        logger.debug('Process completed successfully!')\n        logger.debug(f'Total files imported: {imported_count}')\n        logger.debug('='*80)\n\n    except UserException as e:\n        logger.error(f'User error: {e}')\n        raise\n    except Exception as e:\n        logger.error(f'Unexpected error: {e}')\n        raise UserException({\n            'message': 'Unexpected error in main process',\n            'description': str(e)\n        }).withError(e)\n\nmain()\n"
            },
            "sql": {}
        },
        "save": {
            "script": {
                "py": "from apng_core.db import fetchone\nfrom apng_core.exceptions import UserException\nfrom apng_core.auth import getUser\n\nwith initDbSession(database='default').cursor() as c:\n    SQL = \"\"\"\n            \n            update swift_input set\n            snd_mid_bank = %(snd_mid_bank)s,\n            snd_mid_bank_name = %(snd_mid_bank_name)s,\n            snd_mid_bank_acc = %(snd_mid_bank_acc)s,\n            snd_mid_bank_acc_val = %(snd_mid_bank_acc_val)s\n            where id = %(id)s;\n    \"\"\"\n    try:\n      c.execute(SQL, { \n                        'id': parameters.get('app').get('record').get('id'), \n                        'snd_mid_bank': parameters.get('app').get('out_fields').get('snd_mid_bank'), \n                        'snd_mid_bank_name': parameters.get('app').get('out_fields').get('snd_mid_bank_name'), \n                        'snd_mid_bank_acc': parameters.get('app').get('out_fields').get('snd_mid_bank_acc'), \n                        'snd_mid_bank_acc_val': parameters.get('app').get('out_fields').get('snd_mid_bank_acc_val') \n          \n      })\n    except Exception as e:\n      raise UserException({'message': str(e)})\n"
            }
        },
        "getBalList": {
            "sql": {},
            "script": {
                "py": "# Get all records from simple_list table\nfrom apng_core.db import fetchall\nfrom apng_core.exceptions import UserException\n\nfrom apng_core.aoa.services.filter import applyFilterModel, applyFilterModel2\nfrom datetime import datetime\nfrom django.utils.timezone import make_aware\n\n\nSQL = \"\"\"\n    SELECT *\n    FROM swift_stmt_bal\n    WHERE swift_input_id = %(id)s\n\n\"\"\"\n\n#raise Exception(parameters)\n\n\nwith initDbSession(database='default').cursor() as c:\n    try:\n        c.execute(SQL, {'id': parameters.get('id')})\n        data = fetchall(c)\n    except Exception as e:\n        raise UserException({\n            'message': 'Error fetching records',\n            'description': 'SQL:\\n%s' % SQL\n        }).withError(e)\n"
            }
        },
        "getTransactions": {
            "sql": {},
            "script": {
                "py": "# Get transactions list for a statement\nfrom apng_core.db import fetchall, fetchone\nfrom apng_core.exceptions import UserException\n\n\ninput_id = None \nif parameters.get('listParams'):\n    input_id = parameters.get('listParams').get('app').get('input_id')\n\nid = parameters.get('id')\n\n\nSQL = \"\"\" \n\n        SELECT n.id::text as id, n.swift_input_id::text as swift_input_id, \n                n.ntry_ref, n.acct_svcr_ref, n.amt, n.amt_ccy, n.cdt_dbt_ind, \n                n.rvsl_ind, \n                \n                n.sts_cd, \n                es.name_ru sts_cd_name, \n                n.bookg_dt, n.val_dt, n.bk_tx_cd_domn_cd, \n                n.bk_tx_cd_fmly_cd, n.bk_tx_cd_sub_fmly_cd, n.created_at, \n                i.file_name, i.stmt_id ,\n                mt.name_ru msg_type_name\n        FROM swift_stmt_ntry n , swift_input i, ref_entry_status es, ref_message_types mt\n        WHERE   es.code = n.sts_cd\n        and n.swift_input_id = i.id \n        and i.msg_type = mt.code\n        and n.swift_input_id = COALESCE(%(swift_input_id)s, n.swift_input_id ) \n        and n.id = COALESCE(%(id)s, n.id) \n        ORDER BY n.bookg_dt DESC, n.created_at DESC \n        \"\"\"\nwith initDbSession(database='default').cursor() as c: \n    try: \n        c.execute(SQL, {'swift_input_id': input_id, 'id': id }) \n        if id:\n            data = fetchone(c) \n        else:\n            data = fetchall(c) \n        #if id:\n        #    raise Exception(data)\n    except Exception as e: \n        raise UserException({'message': 'Error fetching transactions', 'description': 'SQL:\\n%s' % SQL}).withError(e)"
            }
        },
        "getTrnDtl": {
            "script": {
                "py": "# Get all records from simple_list table\nfrom apng_core.db import fetchall\nfrom apng_core.exceptions import UserException\n\nfrom apng_core.aoa.services.filter import applyFilterModel, applyFilterModel2\nfrom datetime import datetime\nfrom django.utils.timezone import make_aware\n\n\nSQL = \"\"\"\n    SELECT *\n    FROM swift_entry_tx_dtls\n    WHERE ntry_id = %(id)s\n\n\"\"\"\n\n#raise Exception(parameters)\n\n\nwith initDbSession(database='default').cursor() as c:\n    try:\n        c.execute(SQL, {'id': parameters.get('id')})\n        data = fetchall(c)\n    except Exception as e:\n        raise UserException({\n            'message': 'Error fetching records',\n            'description': 'SQL:\\n%s' % SQL\n        }).withError(e)\n"
            }
        }
    },
    "actions": [],
    "filter": {},
    "references": {},
    "js": {}
}